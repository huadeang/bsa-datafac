{
	"name": "CC_DataFactoryInsertOrUpdateScoreValueProcessDat",
	"properties": {
		"activities": [
			{
				"name": "Move FIle Sync",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Update CC_DATA_FACTORY Success_copy1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "CC_MoveFile",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"inDir": {
							"value": "@pipeline().parameters.inputPath",
							"type": "Expression"
						},
						"outDir": {
							"value": "@pipeline().parameters.moveInputPath",
							"type": "Expression"
						},
						"inName": {
							"value": "@pipeline().parameters.fileSyncName",
							"type": "Expression"
						},
						"outName": {
							"value": "@pipeline().parameters.fileSyncName",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Move FIle Dat",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Update CC_DATA_FACTORY Success_copy1",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "CC_MoveFile",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"inDir": {
							"value": "@pipeline().parameters.inputPath",
							"type": "Expression"
						},
						"outDir": {
							"value": "@pipeline().parameters.moveInputPath",
							"type": "Expression"
						},
						"inName": {
							"value": "@pipeline().parameters.fileDatName",
							"type": "Expression"
						},
						"outName": {
							"value": "@pipeline().parameters.fileDatName",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "update data facEnd Process Move file sync Error",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Move FIle Sync",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "update data fac End Process Move file dat Error",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Move FIle Dat",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "Update CC_DATA_FACTORY Catch Exception",
				"description": "",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Copy data to CC_TEMP_FILE_DETAIL",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',activity('Copy data to CC_TEMP_FILE_DETAIL').Error),0,if(greater(length(activity('Copy data to CC_TEMP_FILE_DETAIL').Error),499),499,length(activity('Copy data to CC_TEMP_FILE_DETAIL').Error))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "Copy data to CC_TEMP_FILE_DETAIL",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "insert 01",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"additionalColumns": [
							{
								"name": "DATA_ID",
								"value": {
									"value": "@pipeline().parameters.dataId",
									"type": "Expression"
								}
							}
						],
						"storeSettings": {
							"type": "FileServerReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings",
							"skipLineCount": 1
						}
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBatchSize": 1000,
						"writeBatchTimeout": "00:30:00",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"enableSkipIncompatibleRow": true,
					"logSettings": {
						"enableCopyActivityLog": true,
						"copyActivityLogSettings": {
							"logLevel": "Warning",
							"enableReliableLogging": false
						},
						"logLocationSettings": {
							"linkedServiceName": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							},
							"path": "credit-control/logs"
						}
					},
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"name": "DATA_ID",
									"type": "String"
								},
								"sink": {
									"name": "DATA_ID",
									"type": "Int64",
									"physicalType": "bigint"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 1
								},
								"sink": {
									"name": "PROCESS_TYPE",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 2
								},
								"sink": {
									"name": "ROW_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 3
								},
								"sink": {
									"name": "CREATED",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 4
								},
								"sink": {
									"name": "CREATED_BY",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 5
								},
								"sink": {
									"name": "LAST_UPD",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 6
								},
								"sink": {
									"name": "LAST_UPD_BY",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 7
								},
								"sink": {
									"name": "ACCNT_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 8
								},
								"sink": {
									"name": "BILLING_ACCNT_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 9
								},
								"sink": {
									"name": "ACCNT_NO",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 10
								},
								"sink": {
									"name": "CL_LEVEL",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 11
								},
								"sink": {
									"name": "SCORE_RANGE",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 12
								},
								"sink": {
									"name": "CL_TYPE",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 13
								},
								"sink": {
									"name": "CL_CHANGE_REASON",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 14
								},
								"sink": {
									"name": "OUTCOME_CD",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 15
								},
								"sink": {
									"name": "OUTCOME_REASON",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 16
								},
								"sink": {
									"name": "CREDIT_LIMIT",
									"type": "Decimal",
									"physicalType": "decimal",
									"scale": 7,
									"precision": 22
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 17
								},
								"sink": {
									"name": "PERM_CREDIT_LIMIT",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 18
								},
								"sink": {
									"name": "TEMP_CREDIT_LIMIT",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 19
								},
								"sink": {
									"name": "PREV_CREDIT_LIMIT",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 20
								},
								"sink": {
									"name": "PREV_SCORE_RANGE",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 21
								},
								"sink": {
									"name": "ACTUAL",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 22
								},
								"sink": {
									"name": "ACTUAL_PERM",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 23
								},
								"sink": {
									"name": "BILLING_CREDIT_LIMIT",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 24
								},
								"sink": {
									"name": "BILLING_THRESHOLD_SET_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 25
								},
								"sink": {
									"name": "FBB_FLAG",
									"type": "String",
									"physicalType": "char"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 26
								},
								"sink": {
									"name": "LAST_REVIEW_DAT",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 27
								},
								"sink": {
									"name": "MIN_REVIEW",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 28
								},
								"sink": {
									"name": "AVAILABLE_CREDIT",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 29
								},
								"sink": {
									"name": "PAYMENT_FLG",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 30
								},
								"sink": {
									"name": "BA_REGISTER_DT",
									"type": "String",
									"physicalType": "varchar"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "CCLocalFileMasterSplitPipe",
						"type": "DatasetReference",
						"parameters": {
							"filePath": {
								"value": "@pipeline().parameters.inputPath",
								"type": "Expression"
							},
							"fileName": {
								"value": "@pipeline().parameters.fileDatName",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "CC_TableDynamic",
						"type": "DatasetReference",
						"parameters": {
							"Schema": {
								"value": "@pipeline().parameters.SCHEMA",
								"type": "Expression"
							},
							"Table": "CC_DATA_FACTORY_SCORE_VALUE"
						}
					}
				]
			},
			{
				"name": "insert 01",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Read 01",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_SCORE_VALUE (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "Read 01",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "FileServerReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"dataset": {
						"referenceName": "CCLocalFileMasterNotSplit",
						"type": "DatasetReference",
						"parameters": {
							"filePath": {
								"value": "@pipeline().parameters.inputPath",
								"type": "Expression"
							},
							"fileName": {
								"value": "@pipeline().parameters.fileDatName",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "SELECT old 09",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Copy data to CC_TEMP_FILE_DETAIL",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat('SELECT ROW_ID AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_SCORE_VALUE WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlMaster",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Update 09",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "SELECT old 09",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_SCORE_VALUE\n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ROW_ID = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "Update CC_DATA_FACTORY Success_copy1",
				"description": "",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Merge ca To cc_scorevalue",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Merge Ba To cc_scorevalue",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,2)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "Merge Ba To cc_scorevalue",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Update 09",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('MERGE CREDIT_DATA_FAC.CC_SCORE_VALUE AS TARGET\nUSING CREDIT_DATA_FAC.CC_DATA_FACTORY_SCORE_VALUE AS SOURCE\nON (TARGET.ACCNT_ID = SOURCE.ACCNT_ID)\nWHEN MATCHED AND SOURCE.DATA_ID = ',pipeline().parameters.dataId,' AND SOURCE.CL_LEVEL = ''BA'' AND SOURCE.PROCESS_TYPE LIKE ''02%'' AND TARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID \nTHEN \nUPDATE\nSET\n\tTARGET.REF_ROW_ID = SOURCE.ROW_ID ,\n\tTARGET.CREATED = SOURCE.CREATED ,\n\tTARGET.CREATED_BY = SOURCE. CREATED_BY,\n\tTARGET.LAST_UPD = SOURCE.LAST_UPD ,\n\tTARGET.LAST_UPD_BY = SOURCE.LAST_UPD_BY,\n\tTARGET.ACCNT_ID = SOURCE.ACCNT_ID ,\n\tTARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID,\n\tTARGET.ACCNT_NO = SOURCE.ACCNT_NO ,\n\tTARGET.CL_LEVEL = SOURCE.CL_LEVEL ,\n\tTARGET.SCORE_RANGE = SOURCE.SCORE_RANGE,\n\tTARGET.CL_TYPE = SOURCE.CL_TYPE ,\n\tTARGET.CL_CHANGE_REASON = SOURCE.CL_CHANGE_REASON,\n\tTARGET.OUTCOME_CD = SOURCE.OUTCOME_CD,\n\tTARGET.OUTCOME_REASON = SOURCE.OUTCOME_REASON,\n\tTARGET.CREDIT_LIMIT = SOURCE.CREDIT_LIMIT,\n\tTARGET.PERM_CREDIT_LIMIT = SOURCE.PERM_CREDIT_LIMIT,\n\tTARGET.TEMP_CREDIT_LIMIT = SOURCE.TEMP_CREDIT_LIMIT,\n\tTARGET.PREV_CREDIT_LIMIT = SOURCE.PREV_CREDIT_LIMIT,\n\tTARGET.PREV_SCORE_RANGE = SOURCE.PREV_SCORE_RANGE,\n\tTARGET.ACTUAL = SOURCE.ACTUAL,\n\tTARGET.ACTUAL_PERM = SOURCE.ACTUAL_PERM,\n\tTARGET.BILLING_CREDIT_LIMIT = SOURCE.BILLING_CREDIT_LIMIT ,\n\tTARGET.BILLING_THRESHOLD_SET_ID = SOURCE.BILLING_THRESHOLD_SET_ID ,\n\tTARGET.FBB_FLAG = SOURCE.FBB_FLAG ,\n\tTARGET.LAST_REVIEW_DAT = SOURCE.LAST_REVIEW_DAT ,\n\tTARGET.MIN_REVIEW = SOURCE.MIN_REVIEW ,\n\tTARGET.AVAILABLE_CREDIT = SOURCE.AVAILABLE_CREDIT ,\n\tTARGET.PAYMENT_FLG = SOURCE.PAYMENT_FLG ,\n\tTARGET.BA_REGISTER_DT = SOURCE.BA_REGISTER_DT\nWHEN NOT MATCHED BY TARGET AND SOURCE.DATA_ID = ',pipeline().parameters.dataId,' AND SOURCE.CL_LEVEL = ''BA'' AND SOURCE.PROCESS_TYPE LIKE ''02%'' \nTHEN INSERT (REF_ROW_ID ,\n\tCREATED ,\n\tCREATED_BY ,\n\tLAST_UPD ,\n\tLAST_UPD_BY ,\n\tACCNT_ID ,\n\tBILLING_ACCNT_ID ,\n\tACCNT_NO ,\n\tCL_LEVEL ,\n\tSCORE_RANGE ,\n\tCL_TYPE ,\n\tCL_CHANGE_REASON ,\n\tOUTCOME_CD ,\n\tOUTCOME_REASON ,\n\tCREDIT_LIMIT ,\n\tPERM_CREDIT_LIMIT ,\n\tTEMP_CREDIT_LIMIT ,\n\tPREV_CREDIT_LIMIT ,\n\tPREV_SCORE_RANGE ,\n\tACTUAL ,\n\tACTUAL_PERM ,\n\tBILLING_CREDIT_LIMIT ,\n\tBILLING_THRESHOLD_SET_ID ,\n\tFBB_FLAG ,\n\tLAST_REVIEW_DAT ,\n\tMIN_REVIEW ,\n\tAVAILABLE_CREDIT ,\n\tPAYMENT_FLG ,\n\tBA_REGISTER_DT ) VALUES (SOURCE.ROW_ID ,\n\tSOURCE.CREATED ,\n\tSOURCE. CREATED_BY,\n\tSOURCE.LAST_UPD ,\n\tSOURCE.LAST_UPD_BY,\n\tSOURCE.ACCNT_ID ,\n\tSOURCE.BILLING_ACCNT_ID,\n\tSOURCE.ACCNT_NO ,\n\tSOURCE.CL_LEVEL ,\n\tSOURCE.SCORE_RANGE,\n\tSOURCE.CL_TYPE ,\n\tSOURCE.CL_CHANGE_REASON,\n\tSOURCE.OUTCOME_CD,\n\tSOURCE.OUTCOME_REASON,\n\tSOURCE.CREDIT_LIMIT,\n\tSOURCE.PERM_CREDIT_LIMIT,\n\tSOURCE.TEMP_CREDIT_LIMIT,\n\tSOURCE.PREV_CREDIT_LIMIT,\n\tSOURCE.PREV_SCORE_RANGE,\n\tSOURCE.ACTUAL,\n\tSOURCE.ACTUAL_PERM,\n\tSOURCE.BILLING_CREDIT_LIMIT ,\n\tSOURCE.BILLING_THRESHOLD_SET_ID ,\n\tSOURCE.FBB_FLAG ,\n\tSOURCE.LAST_REVIEW_DAT ,\n\tSOURCE.MIN_REVIEW ,\n\tSOURCE.AVAILABLE_CREDIT ,\n\tSOURCE.PAYMENT_FLG ,\n\tSOURCE.BA_REGISTER_DT);')",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "Merge ca To cc_scorevalue",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Update 09",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('MERGE CREDIT_DATA_FAC.CC_SCORE_VALUE AS TARGET\nUSING CREDIT_DATA_FAC.CC_DATA_FACTORY_SCORE_VALUE AS SOURCE\nON (TARGET.ACCNT_ID = SOURCE.ACCNT_ID)\nWHEN MATCHED AND SOURCE.DATA_ID = ',pipeline().parameters.dataId,' AND SOURCE.CL_LEVEL = ''CA'' AND SOURCE.PROCESS_TYPE LIKE ''02%'' AND TARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID \nTHEN \nUPDATE\nSET\n\tTARGET.REF_ROW_ID = SOURCE.ROW_ID ,\n\tTARGET.CREATED = SOURCE.CREATED ,\n\tTARGET.CREATED_BY = SOURCE. CREATED_BY,\n\tTARGET.LAST_UPD = SOURCE.LAST_UPD ,\n\tTARGET.LAST_UPD_BY = SOURCE.LAST_UPD_BY,\n\tTARGET.ACCNT_ID = SOURCE.ACCNT_ID ,\n\tTARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID,\n\tTARGET.ACCNT_NO = SOURCE.ACCNT_NO ,\n\tTARGET.CL_LEVEL = SOURCE.CL_LEVEL ,\n\tTARGET.SCORE_RANGE = SOURCE.SCORE_RANGE,\n\tTARGET.CL_TYPE = SOURCE.CL_TYPE ,\n\tTARGET.CL_CHANGE_REASON = SOURCE.CL_CHANGE_REASON,\n\tTARGET.OUTCOME_CD = SOURCE.OUTCOME_CD,\n\tTARGET.OUTCOME_REASON = SOURCE.OUTCOME_REASON,\n\tTARGET.CREDIT_LIMIT = SOURCE.CREDIT_LIMIT,\n\tTARGET.PERM_CREDIT_LIMIT = SOURCE.PERM_CREDIT_LIMIT,\n\tTARGET.TEMP_CREDIT_LIMIT = SOURCE.TEMP_CREDIT_LIMIT,\n\tTARGET.PREV_CREDIT_LIMIT = SOURCE.PREV_CREDIT_LIMIT,\n\tTARGET.PREV_SCORE_RANGE = SOURCE.PREV_SCORE_RANGE,\n\tTARGET.ACTUAL = SOURCE.ACTUAL,\n\tTARGET.ACTUAL_PERM = SOURCE.ACTUAL_PERM,\n\tTARGET.BILLING_CREDIT_LIMIT = SOURCE.BILLING_CREDIT_LIMIT ,\n\tTARGET.BILLING_THRESHOLD_SET_ID = SOURCE.BILLING_THRESHOLD_SET_ID ,\n\tTARGET.FBB_FLAG = SOURCE.FBB_FLAG ,\n\tTARGET.LAST_REVIEW_DAT = SOURCE.LAST_REVIEW_DAT ,\n\tTARGET.MIN_REVIEW = SOURCE.MIN_REVIEW ,\n\tTARGET.AVAILABLE_CREDIT = SOURCE.AVAILABLE_CREDIT ,\n\tTARGET.PAYMENT_FLG = SOURCE.PAYMENT_FLG ,\n\tTARGET.BA_REGISTER_DT = SOURCE.BA_REGISTER_DT\nWHEN NOT MATCHED BY TARGET AND SOURCE.DATA_ID = ',pipeline().parameters.dataId,' AND SOURCE.CL_LEVEL = ''CA'' AND SOURCE.PROCESS_TYPE LIKE ''02%'' \nTHEN INSERT (REF_ROW_ID ,\n\tCREATED ,\n\tCREATED_BY ,\n\tLAST_UPD ,\n\tLAST_UPD_BY ,\n\tACCNT_ID ,\n\tBILLING_ACCNT_ID ,\n\tACCNT_NO ,\n\tCL_LEVEL ,\n\tSCORE_RANGE ,\n\tCL_TYPE ,\n\tCL_CHANGE_REASON ,\n\tOUTCOME_CD ,\n\tOUTCOME_REASON ,\n\tCREDIT_LIMIT ,\n\tPERM_CREDIT_LIMIT ,\n\tTEMP_CREDIT_LIMIT ,\n\tPREV_CREDIT_LIMIT ,\n\tPREV_SCORE_RANGE ,\n\tACTUAL ,\n\tACTUAL_PERM ,\n\tBILLING_CREDIT_LIMIT ,\n\tBILLING_THRESHOLD_SET_ID ,\n\tFBB_FLAG ,\n\tLAST_REVIEW_DAT ,\n\tMIN_REVIEW ,\n\tAVAILABLE_CREDIT ,\n\tPAYMENT_FLG ,\n\tBA_REGISTER_DT ) VALUES (SOURCE.ROW_ID ,\n\tSOURCE.CREATED ,\n\tSOURCE. CREATED_BY,\n\tSOURCE.LAST_UPD ,\n\tSOURCE.LAST_UPD_BY,\n\tSOURCE.ACCNT_ID ,\n\tSOURCE.BILLING_ACCNT_ID,\n\tSOURCE.ACCNT_NO ,\n\tSOURCE.CL_LEVEL ,\n\tSOURCE.SCORE_RANGE,\n\tSOURCE.CL_TYPE ,\n\tSOURCE.CL_CHANGE_REASON,\n\tSOURCE.OUTCOME_CD,\n\tSOURCE.OUTCOME_REASON,\n\tSOURCE.CREDIT_LIMIT,\n\tSOURCE.PERM_CREDIT_LIMIT,\n\tSOURCE.TEMP_CREDIT_LIMIT,\n\tSOURCE.PREV_CREDIT_LIMIT,\n\tSOURCE.PREV_SCORE_RANGE,\n\tSOURCE.ACTUAL,\n\tSOURCE.ACTUAL_PERM,\n\tSOURCE.BILLING_CREDIT_LIMIT ,\n\tSOURCE.BILLING_THRESHOLD_SET_ID ,\n\tSOURCE.FBB_FLAG ,\n\tSOURCE.LAST_REVIEW_DAT ,\n\tSOURCE.MIN_REVIEW ,\n\tSOURCE.AVAILABLE_CREDIT ,\n\tSOURCE.PAYMENT_FLG ,\n\tSOURCE.BA_REGISTER_DT);')",
								"type": "Expression"
							}
						}
					]
				}
			}
		],
		"parameters": {
			"SCHEMA": {
				"type": "string"
			},
			"DATA_TYPE": {
				"type": "string"
			},
			"CREDIT_USER": {
				"type": "string"
			},
			"inputPath": {
				"type": "string"
			},
			"moveInputPath": {
				"type": "string"
			},
			"fileDatName": {
				"type": "string"
			},
			"dataId": {
				"type": "string"
			},
			"fileSyncName": {
				"type": "string"
			}
		},
		"variables": {
			"haveErrorRow": {
				"type": "Boolean",
				"defaultValue": false
			}
		},
		"annotations": []
	}
}