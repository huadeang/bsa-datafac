{
	"name": "CC_DataFactorySendFileProcessLimitAndLoop",
	"properties": {
		"activities": [
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get Count Round",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@range(1,int(activity('Get Count Round').output.firstRow.COUNT_ROUND))",
						"type": "Expression"
					},
					"isSequential": false,
					"batchCount": 5,
					"activities": [
						{
							"name": "CC_DataFactorySendFileProcessCrossway",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "CC_DataFactorySendFileProcessCrossway",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"outputPath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"prefixOutputFile": {
										"value": "@pipeline().parameters.prefixOutputFile",
										"type": "Expression"
									},
									"fileTypeOutputFile": {
										"value": "@pipeline().parameters.fileTypeOutputFile",
										"type": "Expression"
									},
									"SCHEMA": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"CREDIT_USER": {
										"value": "@pipeline().parameters.CREDIT_USER",
										"type": "Expression"
									},
									"DATA_TYPE": {
										"value": "@pipeline().parameters.DATA_TYPE",
										"type": "Expression"
									},
									"count": {
										"value": "@pipeline().parameters.count",
										"type": "Expression"
									},
									"pipeLineProcessFileName": {
										"value": "@pipeline().parameters.pipeLineProcessFileName",
										"type": "Expression"
									},
									"round": {
										"value": "@item()",
										"type": "Expression"
									},
									"limitPerRound": {
										"value": "@variables('limitPerRound')",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "Get limit",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat('SELECT CAST(ISNULL(NULLIF(LOV_NAME ,''''),50000) AS NUMERIC(22,0)) AS LIMIT FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT WHERE LOV_TYPE = ''WRITE_FILE_MAX_RECORD'' AND ACTIVE_FLG = ''Y''')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlMaster",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Get Count Round",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set limitPerRound",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat('SELECT\n    IIF(ROUND(',string(pipeline().parameters.count),' /(',variables('limitPerRound'),'), 0, 1)>0,\n\tROUND(',string(pipeline().parameters.count),' /(',variables('limitPerRound'),'), 0, 1)+\n\t(IIF(',string(pipeline().parameters.count),'%(',variables('limitPerRound'),') > 0,1,0)),1) AS COUNT_ROUND;')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlMaster",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Set limitPerRound",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get limit",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"variableName": "limitPerRound",
					"value": {
						"value": "@string(activity('Get limit').output.firstRow.LIMIT)",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"outputPath": {
				"type": "string"
			},
			"prefixOutputFile": {
				"type": "string"
			},
			"fileTypeOutputFile": {
				"type": "string"
			},
			"SCHEMA": {
				"type": "string"
			},
			"CREDIT_USER": {
				"type": "string"
			},
			"DATA_TYPE": {
				"type": "string"
			},
			"count": {
				"type": "float"
			},
			"pipeLineProcessFileName": {
				"type": "string"
			}
		},
		"variables": {
			"limitPerRound": {
				"type": "String"
			},
			"offset": {
				"type": "String"
			},
			"scriptQuery": {
				"type": "String"
			},
			"round": {
				"type": "String"
			},
			"baScriptQuery": {
				"type": "String"
			}
		},
		"annotations": []
	}
}