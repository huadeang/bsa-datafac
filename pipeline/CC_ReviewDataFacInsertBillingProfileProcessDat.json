{
	"name": "CC_ReviewDataFacInsertBillingProfileProcessDat",
	"properties": {
		"activities": [
			{
				"name": "Update CC_DATA_FACTORY Success_copy1",
				"description": "",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Copy data to CC_TEMP_FILE_DETAIL",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactory Exception :',replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),0,if(less(length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499),length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499)),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "Move FIle Sync",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Update CC_DATA_FACTORY Success",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "CC_MoveFile",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"inDir": {
							"value": "@pipeline().parameters.inputPath",
							"type": "Expression"
						},
						"outDir": {
							"value": "@pipeline().parameters.moveInputPath",
							"type": "Expression"
						},
						"inName": {
							"value": "@pipeline().parameters.fileSyncName",
							"type": "Expression"
						},
						"outName": {
							"value": "@pipeline().parameters.fileSyncName",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Move FIle Dat",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Update CC_DATA_FACTORY Success",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "CC_MoveFile",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"inDir": {
							"value": "@pipeline().parameters.inputPath",
							"type": "Expression"
						},
						"outDir": {
							"value": "@pipeline().parameters.moveInputPath",
							"type": "Expression"
						},
						"inName": {
							"value": "@pipeline().parameters.fileDatName",
							"type": "Expression"
						},
						"outName": {
							"value": "@pipeline().parameters.fileDatName",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "update data facEnd Process Move file sync Error",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Move FIle Sync",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "update data fac End Process Move file dat Error",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Move FIle Dat",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "Copy data to CC_TEMP_FILE_DETAIL",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "insert 01",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"additionalColumns": [
							{
								"name": "DATA_ID",
								"value": {
									"value": "@pipeline().parameters.dataId",
									"type": "Expression"
								}
							}
						],
						"storeSettings": {
							"type": "FileServerReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings",
							"skipLineCount": 1
						}
					},
					"sink": {
						"type": "AzureSqlSink",
						"writeBatchSize": 1000,
						"writeBatchTimeout": "00:30:00",
						"writeBehavior": "insert",
						"sqlWriterUseTableLock": false,
						"disableMetricsCollection": false
					},
					"enableStaging": false,
					"enableSkipIncompatibleRow": true,
					"translator": {
						"type": "TabularTranslator",
						"mappings": [
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 2
								},
								"sink": {
									"name": "ROW_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 3
								},
								"sink": {
									"name": "CREATED",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 4
								},
								"sink": {
									"name": "CREATED_BY",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 5
								},
								"sink": {
									"name": "LAST_UPD",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 6
								},
								"sink": {
									"name": "LAST_UPD_BY",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"name": "DATA_ID",
									"type": "String"
								},
								"sink": {
									"name": "DATA_ID",
									"type": "Int64",
									"physicalType": "bigint"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 1
								},
								"sink": {
									"name": "PROCESS_TYPE",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 7
								},
								"sink": {
									"name": "ACCNT_NO",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 8
								},
								"sink": {
									"name": "ACCNT_CATEGORY",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 9
								},
								"sink": {
									"name": "ACCNT_SUB_CATEGORY",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 10
								},
								"sink": {
									"name": "BILL_CYCLE",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 11
								},
								"sink": {
									"name": "PAYMENT_METHOD",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 12
								},
								"sink": {
									"name": "MASTER_ACCNT_ID",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 13
								},
								"sink": {
									"name": "STATUS_CD",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 14
								},
								"sink": {
									"name": "BILLING_STATUS_CD",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 15
								},
								"sink": {
									"name": "REGISTER_DT",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"type": "String",
									"physicalType": "String",
									"ordinal": 16
								},
								"sink": {
									"name": "FBB_FLAG",
									"type": "String",
									"physicalType": "char"
								}
							},
							{
								"source": {
									"physicalType": "String",
									"ordinal": 18
								},
								"sink": {
									"name": "POST_PAID_FLAG",
									"type": "String",
									"physicalType": "varchar"
								}
							},
							{
								"source": {
									"physicalType": "String",
									"ordinal": 17
								},
								"sink": {
									"name": "COUNT_SME_MOBILE",
									"type": "String",
									"physicalType": "varchar"
								}
							}
						],
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "CC_LocalFileMasterSplitPipe",
						"type": "DatasetReference",
						"parameters": {
							"filePath": {
								"value": "@pipeline().parameters.inputPath",
								"type": "Expression"
							},
							"fileName": {
								"value": "@pipeline().parameters.fileDatName",
								"type": "Expression"
							}
						}
					}
				],
				"outputs": [
					{
						"referenceName": "CC_TableDynamic",
						"type": "DatasetReference",
						"parameters": {
							"Schema": {
								"value": "@pipeline().parameters.SCHEMA",
								"type": "Expression"
							},
							"Table": "CC_DATA_FACTORY_BILLING_REVIEW"
						}
					}
				]
			},
			{
				"name": "insert 01",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Read 01",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_REVIEW (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "Read 01",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "DelimitedTextSource",
						"storeSettings": {
							"type": "FileServerReadSettings",
							"recursive": true,
							"enablePartitionDiscovery": false
						},
						"formatSettings": {
							"type": "DelimitedTextReadSettings"
						}
					},
					"dataset": {
						"referenceName": "CC_LocalFileMasterNotSplit",
						"type": "DatasetReference",
						"parameters": {
							"filePath": {
								"value": "@pipeline().parameters.inputPath",
								"type": "Expression"
							},
							"fileName": {
								"value": "@pipeline().parameters.fileDatName",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "SELECT old 09",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Copy data to CC_TEMP_FILE_DETAIL",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat('SELECT ROW_ID AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_REVIEW WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlMaster",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Update 09",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "SELECT old 09",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_REVIEW \n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ROW_ID = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "Update CC_DATA_FACTORY Success",
				"description": "",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "MERGE to CC_BILLING_REVIEW",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(add(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,1)),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,1)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST_copy1",
				"description": "",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "MERGE to CC_BILLING_REVIEW",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('MERGE to CC_BILLING_REVIEW').Error),'''','\"')),0,if(greater(length(string(activity('MERGE to CC_BILLING_REVIEW').Error)),499 ),499,length(string(activity('MERGE to CC_BILLING_REVIEW').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "MERGE to CC_BILLING_REVIEW",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "EXEC IMPORT_BILLING_REVIEW",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('CREATE PROCEDURE ',pipeline().parameters.SCHEMA,'.IMPORT_BILLING_REVIEW(@DATA_ID BIGINT)AS \nBEGIN\n\tDECLARE @COUNT_INSERT INT = 0\n\tDECLARE @COUNT_ERROR INT = 0\n\t\n\tDECLARE @PROCESS_TYPE VARCHAR(MAX)\n\tDECLARE @ROW_ID VARCHAR(MAX)\n\tDECLARE @CREATED VARCHAR(MAX)\n\tDECLARE @CREATED_BY VARCHAR(MAX)\n\tDECLARE @LAST_UPD VARCHAR(MAX)\n\tDECLARE @LAST_UPD_BY VARCHAR(MAX)\n\tDECLARE @ACCNT_NO VARCHAR(MAX)\n\tDECLARE @ACCNT_CATEGORY VARCHAR(MAX)\n\tDECLARE @ACCNT_SUB_CATEGORY VARCHAR(MAX)\n\tDECLARE @BILL_CYCLE VARCHAR(MAX)\n\tDECLARE @PAYMENT_METHOD VARCHAR(MAX)\n\tDECLARE @MASTER_ACCNT_ID VARCHAR(MAX)\n\tDECLARE @STATUS_CD VARCHAR(MAX)\n\tDECLARE @BILLING_STATUS_CD VARCHAR(MAX)\n\tDECLARE @REGISTER_DT VARCHAR(MAX)\n\tDECLARE @FBB_FLAG VARCHAR(MAX)\n\tDECLARE @POST_PAID_FLAG VARCHAR(MAX)\n\tDECLARE @COUNT_SME_MOBILE VARCHAR(MAX)\n\tDECLARE DATA_BILLING_REVIEW CURSOR FOR \n\tSELECT PROCESS_TYPE,ROW_ID,CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,ACCNT_NO,ACCNT_CATEGORY,ACCNT_SUB_CATEGORY,BILL_CYCLE,\n\tPAYMENT_METHOD,MASTER_ACCNT_ID,STATUS_CD,BILLING_STATUS_CD,REGISTER_DT,FBB_FLAG,POST_PAID_FLAG,COUNT_SME_MOBILE \n\tFROM CC_DATA_FACTORY_BILLING_REVIEW WHERE DATA_ID = @DATA_ID AND PROCESS_TYPE =''02'' ORDER BY DATA_BILLING_ID ASC OFFSET 0 ROWS;\n\tBEGIN\n\t\tOPEN DATA_BILLING_REVIEW \n\t\tFETCH NEXT FROM DATA_BILLING_REVIEW INTO @PROCESS_TYPE,@ROW_ID,@CREATED,@CREATED_BY,@LAST_UPD,@LAST_UPD_BY,@ACCNT_NO,@ACCNT_CATEGORY,@ACCNT_SUB_CATEGORY,@BILL_CYCLE,@PAYMENT_METHOD,@MASTER_ACCNT_ID,@STATUS_CD,@BILLING_STATUS_CD,@REGISTER_DT,@FBB_FLAG,@POST_PAID_FLAG,@COUNT_SME_MOBILE\n\t\tWHILE @@FETCH_STATUS=0\n\t\tBEGIN\n\t\t\tBEGIN TRY  \n\t\t\t    INSERT INTO CC_BILLING_REVIEW(ROW_ID,CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,ACCNT_NO,ACCNT_CATEGORY,ACCNT_SUB_CATEGORY,BILL_CYCLE\n\t\t\t    ,PAYMENT_METHOD,MASTER_ACCNT_ID,STATUS_CD,BILLING_STATUS_CD,REGISTER_DT,FBB_FLAG,POST_PAID_FLAG,COUNT_SME_MOBILE)\n\t\t\t    VALUES(@ROW_ID,@CREATED,@CREATED_BY,@LAST_UPD,@LAST_UPD_BY,@ACCNT_NO,@ACCNT_CATEGORY,@ACCNT_SUB_CATEGORY,@BILL_CYCLE\n\t\t\t    ,@PAYMENT_METHOD,@MASTER_ACCNT_ID,@STATUS_CD,@BILLING_STATUS_CD,@REGISTER_DT,@FBB_FLAG,@POST_PAID_FLAG,@COUNT_SME_MOBILE);\n\t\t\t   SET @COUNT_INSERT = @COUNT_INSERT+1\n\t\t\tEND TRY  \n\t\t\tBEGIN CATCH  \n\t\t\t    INSERT INTO CC_DATA_FACTORY_HIST(CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,DATA_ID,STATUS,DESCRIPTION,ERROR_MSG )\n\t\t\t    VALUES(CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),''DATA_FAC_INSERT_BILLING_REVIEW'',CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),''DATA_FAC_INSERT_BILLING_REVIEW'',@DATA_ID,''E''\n\t\t\t    ,CONCAT(@PROCESS_TYPE,''|'',@ROW_ID,''|'',@CREATED,''|'',@CREATED_BY,''|'',@LAST_UPD,''|'',@LAST_UPD_BY,''|'',@ACCNT_NO,''|'',@ACCNT_CATEGORY,''|'',@ACCNT_SUB_CATEGORY,''|'',@BILL_CYCLE,''|''\n\t\t\t    ,@PAYMENT_METHOD,''|'',@MASTER_ACCNT_ID,''|'',@STATUS_CD,''|'',@BILLING_STATUS_CD,''|'',@REGISTER_DT,''|'',@FBB_FLAG,''|'',@POST_PAID_FLAG,''|'',@COUNT_SME_MOBILE),ERROR_MESSAGE());\n\t\t\t    SET @COUNT_ERROR = @COUNT_ERROR+1\n\t\t\tEND CATCH\n\t\tFETCH NEXT FROM DATA_BILLING_REVIEW INTO @PROCESS_TYPE,@ROW_ID,@CREATED,@CREATED_BY,@LAST_UPD,@LAST_UPD_BY,@ACCNT_NO,@ACCNT_CATEGORY,@ACCNT_SUB_CATEGORY,@BILL_CYCLE,@PAYMENT_METHOD,@MASTER_ACCNT_ID,@STATUS_CD,@BILLING_STATUS_CD,@REGISTER_DT,@FBB_FLAG,@POST_PAID_FLAG,@COUNT_SME_MOBILE\n\t\tEND\n\t\tCLOSE DATA_BILLING_REVIEW\n\t\t\n\t\tBEGIN\n\t\t\tUPDATE CC_DATA_FACTORY SET DESCRIPTION = CONCAT(DESCRIPTION,'' ==> Run Insert '',@COUNT_INSERT,'' record , Error '',@COUNT_ERROR,'' record'') WHERE DATA_ID = @DATA_ID \n\t\tEND\n\tEND\nEND\n\nDEALLOCATE DATA_BILLING_REVIEW;\n')",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "EXEC IMPORT_BILLING_REVIEW",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Update 09",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('EXEC ',pipeline().parameters.SCHEMA,'.IMPORT_BILLING_REVIEW ',pipeline().parameters.dataId,'')",
								"type": "Expression"
							}
						}
					]
				}
			}
		],
		"parameters": {
			"SCHEMA": {
				"type": "string"
			},
			"DATA_TYPE": {
				"type": "string"
			},
			"CREDIT_USER": {
				"type": "string"
			},
			"inputPath": {
				"type": "string"
			},
			"moveInputPath": {
				"type": "string"
			},
			"fileDatName": {
				"type": "string"
			},
			"dataId": {
				"type": "string"
			},
			"fileSyncName": {
				"type": "string"
			}
		},
		"variables": {
			"haveErrorRow": {
				"type": "Boolean",
				"defaultValue": false
			},
			"fileDatNameNotExension": {
				"type": "String"
			},
			"fileDatExension": {
				"type": "String"
			},
			"fileSyncNotExension": {
				"type": "String"
			},
			"fileSyncExension": {
				"type": "String"
			}
		},
		"annotations": []
	}
}