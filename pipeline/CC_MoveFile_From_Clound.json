{
	"name": "CC_MoveFile_From_Clound",
	"properties": {
		"activities": [
			{
				"name": "get Move file info",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "@concat('SELECT SYNC_FLG,MOVE_PATH ,MOVE_BACKUP_PATH ,FILE_NAME ,FILE_NAME_SYNC  FROM ',variables('SCHEMA'),'.CC_RESPONSE_FILE crf WHERE RES_ID = ',pipeline().parameters.resId,' AND STATUS = ''O'';')",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlMaster",
						"type": "DatasetReference"
					},
					"firstRowOnly": true
				}
			},
			{
				"name": "If get info not found or move path is null",
				"type": "IfCondition",
				"dependsOn": [
					{
						"activity": "get Move file info",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@or(not(contains(string(activity('get Move file info').output),'firstRow')),equals(if(equals(trim(coalesce(activity('get Move file info').output.firstRow.MOVE_PATH,'')),''),null,activity('get Move file info').output.firstRow.MOVE_PATH),null))",
						"type": "Expression"
					},
					"ifFalseActivities": [
						{
							"name": "insert CC_DATA_FACTORY onprocess",
							"type": "Script",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"linkedServiceName": {
								"referenceName": "AzureSqlDatabase1",
								"type": "LinkedServiceReference"
							},
							"typeProperties": {
								"scripts": [
									{
										"type": "Query",
										"text": {
											"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''O'',''Process move file resId ',pipeline().parameters.resId,''');')",
											"type": "Expression"
										}
									}
								]
							}
						},
						{
							"name": "Set dataId",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "insert CC_DATA_FACTORY onprocess",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "dataId",
								"value": {
									"value": "@string(first(first(activity('insert CC_DATA_FACTORY onprocess').output.resultSets).rows).DATA_ID)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set fileNameSync",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set dataId",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "fileNameSync",
								"value": {
									"value": "@if(empty(activity('get Move file info').output.firstRow.FILE_NAME_SYNC),'',replace(activity('get Move file info').output.firstRow.FILE_NAME_SYNC,variables('rootfolder'),''))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set fileNameSyncOnly",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set fileNameSync",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "fileNameSyncOnly",
								"value": {
									"value": "@if(empty(variables('fileNameSync')),'',split(variables('fileNameSync'),'/')[sub(length(split(variables('fileNameSync'),'/')),1)])",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set fileName",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set dataId",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "fileName",
								"value": {
									"value": "@if(empty(activity('get Move file info').output.firstRow.FILE_NAME),'',replace(activity('get Move file info').output.firstRow.FILE_NAME,variables('rootfolder'),''))",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set fileNameDatOnly",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set fileName",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "fileNameDatOnly",
								"value": {
									"value": "@if(empty(variables('fileName')),null,split(variables('fileName'),'/')[sub(length(split(variables('fileName'),'/')),1)])",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set syncFlg",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set dataId",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "syncFlg",
								"value": {
									"value": "@if(equals(activity('get Move file info').output.firstRow.SYNC_FLG,null),'',activity('get Move file info').output.firstRow.SYNC_FLG)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set moveBackUpPath",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set dataId",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "moveBackUpPath",
								"value": {
									"value": "@if(equals(activity('get Move file info').output.firstRow.MOVE_BACKUP_PATH,null),'',activity('get Move file info').output.firstRow.MOVE_BACKUP_PATH)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set movePath",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set dataId",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "movePath",
								"value": {
									"value": "@if(equals(activity('get Move file info').output.firstRow.MOVE_PATH,null),'',activity('get Move file info').output.firstRow.MOVE_PATH)",
									"type": "Expression"
								}
							}
						},
						{
							"name": "validate sync flg",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Set syncFlg",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Set moveBackUpPath",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Set movePath",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Set fileNameDatOnly",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Set fileNameSyncOnly",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"variableName": "errorMessage",
								"value": {
									"value": "@if(and(equals(variables('syncFlg'),'Y'),or(empty(variables('fileName')),empty(variables('fileNameSync')))),'Sync flg is active but fileName or fileNameSync is empty',if(and(not(equals(variables('syncFlg'),'Y')),empty(variables('fileName'))),'Sync flg is inactive but fileName is empty',''))",
									"type": "Expression"
								}
							}
						}
					],
					"ifTrueActivities": [
						{
							"name": "Set errorQueryDataNotFound",
							"type": "SetVariable",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"variableName": "errorMessage",
								"value": "errorQueryDataNotFound"
							}
						}
					]
				}
			},
			{
				"name": "Switch case movefile",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "If get info not found or move path is null",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@if(not(empty(variables('errorMessage'))),if(equals(variables('errorMessage'),'errorQueryDataNotFound'),variables('errorMessage'),'error'),if(equals(variables('syncFlg'),'Y'),'SyncFlg','NotSyncFlg'))",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "error",
							"activities": [
								{
									"name": "Update Data fac process",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',variables('CREDIT_USER'),''',\n\tFILE_NAME = ',concat('''',variables('fileName'),''''),',\n\tFILE_NAME_SYNC = ',concat('''',variables('fileNameSync'),''''),',\n\tFILE_PATH = ''',variables('movePath'),''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',variables('errorMessage'),'''\n\tWHERE DATA_ID =',variables('dataId'),';')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Update response file process",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',variables('SCHEMA'),'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',variables('CREDIT_USER'),''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',variables('errorMessage'),'''\n\tWHERE RES_ID =',pipeline().parameters.resId,';')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						},
						{
							"value": "SyncFlg",
							"activities": [
								{
									"name": "CC_MoveFile_From_Clound_HaveSync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile_From_Clound_HaveSync",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileName": {
												"value": "@variables('fileName')",
												"type": "Expression"
											},
											"fileNameSync": {
												"value": "@variables('fileNameSync')",
												"type": "Expression"
											},
											"MovePath": {
												"value": "@variables('movePath')",
												"type": "Expression"
											},
											"MoveBackupPath": {
												"value": "@variables('moveBackUpPath')",
												"type": "Expression"
											},
											"fileNameOnly": {
												"value": "@variables('fileNameDatOnly')",
												"type": "Expression"
											},
											"fileNameSyncOnly": {
												"value": "@variables('fileNameSyncOnly')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"dataId": {
												"value": "@variables('dataId')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"resId": {
												"value": "@pipeline().parameters.resId",
												"type": "Expression"
											},
											"rootFolder": {
												"value": "@variables('rootfolder')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert CC_DATA_FACTORY exception_copy1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "CC_MoveFile_From_Clound_HaveSync",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',substring(concat('Data factory Exception :',replace(string(activity('CC_MoveFile_From_Clound_HaveSync').Error),'''','\"')),0,if(less(length(replace(string(activity('CC_MoveFile_From_Clound_HaveSync').Error),'''','\"')),499),length(replace(string(activity('CC_MoveFile_From_Clound_HaveSync').Error),'''','\"')),499)),''');')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Update response file error_copy1",
									"description": "",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "CC_MoveFile_From_Clound_HaveSync",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',variables('SCHEMA'),'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',variables('CREDIT_USER'),''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',substring(concat('Data factory Exception :',replace(string(activity('CC_MoveFile_From_Clound_HaveSync').Error),'''','\"')),0,if(less(length(replace(string(activity('CC_MoveFile_From_Clound_HaveSync').Error),'''','\"')),499),length(replace(string(activity('CC_MoveFile_From_Clound_HaveSync').Error),'''','\"')),499)),'''\n\tWHERE RES_ID =',pipeline().parameters.resId,';')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						},
						{
							"value": "NotSyncFlg",
							"activities": [
								{
									"name": "CC_MoveFile_From_Clound_NotHaveSync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile_From_Clound_NotHaveSync",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileName": {
												"value": "@variables('fileName')",
												"type": "Expression"
											},
											"MovePath": {
												"value": "@variables('movePath')",
												"type": "Expression"
											},
											"MoveBackupPath": {
												"value": "@variables('moveBackUpPath')",
												"type": "Expression"
											},
											"fileNameOnly": {
												"value": "@variables('fileNameDatOnly')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"dataId": {
												"value": "@variables('dataId')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"resId": {
												"value": "@pipeline().parameters.resId",
												"type": "Expression"
											},
											"rootFolder": {
												"value": "@variables('rootfolder')",
												"type": "Expression"
											}
										}
									}
								}
							]
						},
						{
							"value": "errorQueryDataNotFound",
							"activities": [
								{
									"name": "insert CC_DATA_FACTORY Error data not found",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''Query Data not found resId ',pipeline().parameters.resId,''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					]
				}
			},
			{
				"name": "insert CC_DATA_FACTORY exception",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Switch case movefile",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',substring(concat('Data factory Exception :',replace(string(activity('Switch case movefile').Error),'''','\"')),0,if(less(length(replace(string(activity('Switch case movefile').Error),'''','\"')),499),length(replace(string(activity('Switch case movefile').Error),'''','\"')),499)),''');')",
								"type": "Expression"
							}
						}
					]
				}
			},
			{
				"name": "Update response file error",
				"description": "",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Switch case movefile",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "@concat('UPDATE ',variables('SCHEMA'),'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',variables('CREDIT_USER'),''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',substring(concat('Data factory Exception :',replace(string(activity('Switch case movefile').Error),'''','\"')),0,if(less(length(replace(string(activity('Switch case movefile').Error),'''','\"')),499),length(replace(string(activity('Switch case movefile').Error),'''','\"')),499)),'''\n\tWHERE RES_ID =',pipeline().parameters.resId,';')",
								"type": "Expression"
							}
						}
					]
				}
			}
		],
		"parameters": {
			"resId": {
				"type": "string"
			}
		},
		"variables": {
			"syncFlg": {
				"type": "String"
			},
			"fileName": {
				"type": "String"
			},
			"fileNameSync": {
				"type": "String"
			},
			"movePath": {
				"type": "String"
			},
			"moveBackUpPath": {
				"type": "String"
			},
			"SCHEMA": {
				"type": "String",
				"defaultValue": "CREDIT_UAT"
			},
			"fileNameDatOnly": {
				"type": "String"
			},
			"fileNameSyncOnly": {
				"type": "String"
			},
			"rootfolder": {
				"type": "String",
				"defaultValue": "/bsaaksfileshare"
			},
			"CREDIT_USER": {
				"type": "String",
				"defaultValue": "DATAFAC_MOVE_FILE"
			},
			"DATA_TYPE": {
				"type": "String",
				"defaultValue": "MOVE_FILE"
			},
			"errorMessage": {
				"type": "String"
			},
			"dataId": {
				"type": "String"
			}
		},
		"annotations": []
	}
}