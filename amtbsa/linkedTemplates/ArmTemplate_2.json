{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "amtbsa"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CC_ProcessFileSync')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each file Sync",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.fileNameList",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Read File Sync",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set reviewId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"dataset": {
											"referenceName": "CCLocalFileMasterNotSplit",
											"type": "DatasetReference",
											"parameters": {
												"filePath": {
													"value": "@pipeline().parameters.inputPath",
													"type": "Expression"
												},
												"fileName": {
													"value": "@variables('fileinputName')",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "Get File size Dat",
									"type": "GetMetadata",
									"dependsOn": [
										{
											"activity": "Setfor file Dat Name",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "CCLocalFileMasterNotSplit",
											"type": "DatasetReference",
											"parameters": {
												"filePath": {
													"value": "@pipeline().parameters.inputPath",
													"type": "Expression"
												},
												"fileName": {
													"value": "@variables('fileDatName')",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"size",
											"exists"
										],
										"storeSettings": {
											"type": "FileServerReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If file size equal and Not exist",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get File size Dat",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(activity('Get File size Dat').output.exists,equals(variables('fileDatSize'), string(string(if(contains(activity('Get File size Dat').output,'size'),activity('Get File size Dat').output?.size,0)))))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "update file dat data not mapping",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabase1",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''file name data not found/file size no mapping file result ',variables('fileinputName'),'''',\n\t' WHERE REVIEW_ID =''',variables('reviewId'),''';')",
																"type": "Expression"
															}
														}
													]
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Execute ProcessFileDat",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "CC_ProcessFileDat",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"fileDatName": {
															"value": "@variables('fileDatName')",
															"type": "Expression"
														},
														"SCHEMA": {
															"value": "@pipeline().parameters.SCHEMA",
															"type": "Expression"
														},
														"FILE_TYPE": {
															"value": "@pipeline().parameters.FILE_TYPE",
															"type": "Expression"
														},
														"CREDIT_USER": {
															"value": "@pipeline().parameters.CREDIT_USER",
															"type": "Expression"
														},
														"inputPath": {
															"value": "@pipeline().parameters.inputPath",
															"type": "Expression"
														},
														"moveInputPath": {
															"value": "@pipeline().parameters.moveInputPath",
															"type": "Expression"
														},
														"fileSyncName": {
															"value": "@variables('fileinputName')",
															"type": "Expression"
														},
														"reviewId": {
															"value": "@variables('reviewId')",
															"type": "Expression"
														}
													}
												}
											},
											{
												"name": "insert review ExceptionError",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "Execute ProcessFileDat",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabase1",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.REVIEW_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''E'','' CC_FindFileDat ',replace(activity('Execute ProcessFileDat').Error.Message,'''','\"'),''');')",
																"type": "Expression"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"name": "Setfor file Dat Name",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set For Each File Dat Sizer",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileDatName",
										"value": {
											"value": "@split(activity('Read File Sync').output.firstRow.Prop_0,'|')[0]",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set For Each File Dat Sizer",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Read File Sync",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileDatSize",
										"value": {
											"value": "@split(activity('Read FIle Sync').output.firstRow.Prop_0,'|')[1]",
											"type": "Expression"
										}
									}
								},
								{
									"name": "insert review process file sync",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set fileInputName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.REVIEW_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.LOV_TYPE_REVIEW,''',\n\t''P'',''Process :',variables('fileinputName'),''');')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set reviewId",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "insert review process file sync",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "reviewId",
										"value": {
											"value": "@string(first(first(activity('insert review process file sync').output.resultSets).rows).REVIEW_ID)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileInputName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileinputName",
										"value": {
											"value": "@item().name",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"LOV_TYPE_REVIEW": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileNameList": {
						"type": "array"
					}
				},
				"variables": {
					"fileDatName": {
						"type": "String"
					},
					"fileDatSize": {
						"type": "String"
					},
					"reviewId": {
						"type": "String"
					},
					"fileinputName": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_FileOutputValidate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach file error",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.fileErrorList",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set fileId",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileType",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileId",
										"value": {
											"value": "@string(if(equals(trim(coalesce(string(item().FILE_ID),'')),''),null,string(item().FILE_ID)))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "If Some val is Null",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set fileOutputpath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@or(or(or(equals(variables('fileId'),string(null)),equals(variables('fileName'),string(null))),equals(variables('outputPath'),string(null))),equals(variables('fileType'),string(null)))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Execute CreateFileOutPut",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "CC_CreateFileOutput",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"SCHEMA": {
															"value": "@pipeline().parameters.SCHEMA",
															"type": "Expression"
														},
														"CREDIT_USER": {
															"value": "@pipeline().parameters.CREDIT_USER",
															"type": "Expression"
														},
														"fileType": {
															"value": "@variables('fileType')",
															"type": "Expression"
														},
														"fileName": {
															"value": "@variables('fileName')",
															"type": "Expression"
														},
														"outputPath": {
															"value": "@variables('outputPath')",
															"type": "Expression"
														},
														"fileId": {
															"value": "@variables('fileId')",
															"type": "Expression"
														},
														"fileNameArchive": {
															"value": "@variables('fileNameArchive')",
															"type": "Expression"
														}
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "insert error when config val error",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "Set errorMsg",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabase1",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tRES_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.RES_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''RESPONSE_FILE'',\n\t''E'',''Temp file Val ',variables('errorMessage'),' data not found.'');')",
																"type": "Expression"
															}
														}
													]
												}
											},
											{
												"name": "Set errorMsg",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "errorMessage",
													"value": {
														"value": "@concat(if(equals(variables('fileId'),string(null)),',file id',''),if(equals(variables('fileName'),string(null)),',file name',''),if(equals(variables('outputPath'),string(null)),',output path',''),if(equals(variables('fileType'),string(null)),',file type',''))",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Set fileOutputpath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "outputPath",
										"value": {
											"value": "@string(if(equals(trim(coalesce(item().OUTPUT_PATH,'')),''),null,item().OUTPUT_PATH))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileName",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@string(if(equals(trim(coalesce(item().FILE_NAME,'')),''),null,item().FILE_NAME))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileType",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileAchriveName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileType",
										"value": {
											"value": "@string(if(equals(trim(coalesce(item().FILE_TYPE,'')),''),null,item().FILE_TYPE))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileAchriveName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileNameArchive",
										"value": {
											"value": "@string(if(equals(trim(coalesce(item().FILE_NAME_ARCHIVE,'')),''),null,item().FILE_NAME_ARCHIVE))",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileErrorList": {
						"type": "array"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					}
				},
				"variables": {
					"resId": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileId": {
						"type": "String"
					},
					"outputPath": {
						"type": "String"
					},
					"errorMessage": {
						"type": "String"
					},
					"fileType": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"switchCaseValue": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_FindFileSyncInDir')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get All FIle in Config directory",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterPath",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter file Sync",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get All FIle in Config directory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All FIle in Config directory').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.prefixInputFile),endswith(item().name,pipeline().parameters.fileTypeInputFile))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If not Have file input",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Filter file Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(activity('Filter file Sync').output.Value)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute ProcessFileSync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ProcessFileSync",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@pipeline().parameters.LOV_TYPE_REVIEW",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@pipeline().parameters.FILE_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"fileNameList": {
												"value": "@activity('Filter file Sync').output.Value",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert review ExceptionError",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Execute ProcessFileSync",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.REVIEW_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''E'','' CC_FindFileSync ',replace(activity('Execute ProcessFileSync').Error.Message,'''','\"'),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert review process file sync not have input file",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.REVIEW_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.LOV_TYPE_REVIEW,''',\n\t''S'',''File prefix : ',pipeline().parameters.prefixInputFile,' data not found in path ',pipeline().parameters.inputPath,''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"prefixInputFile": {
						"type": "string"
					},
					"fileTypeInputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"LOV_TYPE_REVIEW": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ProcessFileSync')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ProcessFileError')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get file Error Temp file",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT FILE_ID,FILE_TYPE,FILE_NAME,FILE_NAME_ARCHIVE,OUTPUT_PATH FROM CREDIT_DEV.CC_TEMP_FILE \nWHERE FILE_TYPE  LIKE 'RESPONSE_FILE%'\nORDER BY CREATED;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "If not Have file input",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "get file Error Temp file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(activity('get file Error Temp file').output.value)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute Create file error",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_FileOutputValidate",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileErrorList": {
												"value": "@activity('get file Error Temp file').output.value",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert response file not have input file",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_RESPONSE_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tRES_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.RES_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''RESPONSE_FILE'',\n\t''S'',''Query response file data not found'');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DEV"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "CREDIT"
					},
					"errorException": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_FileOutputValidate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_UpdateArpu')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value in Clound Storage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('lovType'),''' AND c.LOV_NAME = ''',variables('lovName'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Clear Data Temp Table Detail",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE_DETAIL \n    WHERE FILE_ID IN(SELECT FILE_ID \n                        FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n                        WHERE STATUS = ''S'' \n                        AND FILE_TYPE = ''',variables('FILE_TYPE'),''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear Data Temp Table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n            WHERE STATUS = ''S'' \n            AND FILE_TYPE = ''',variables('FILE_TYPE'),'''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value in Clound Storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute All Process",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_FindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@variables('FILE_TYPE')",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@variables('REVIEW_TYPE')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"CC_TEMP_FILE_DETAIL": {
												"value": "@variables('TEMP_FILE_DETAIL_CREATED_BY')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert review ExceptionError",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Execute All Process",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.REVIEW_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('REVIEW_TYPE'),''',\n\t''E'','' CC_UpdateCreditGradeException ',replace(activity('Execute All Process').Error.Message,'''','\"'),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('REVIEW_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),concat('Config LOV_TYPE : ',variables('lovType'),' ,LOV_NAME : ',variables('lovName'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_ARPU"
					},
					"FILE_TYPE": {
						"type": "String",
						"defaultValue": "REQUEST_FILE_ARPU"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DEV"
					},
					"TEMP_FILE_DETAIL_CREATED_BY": {
						"type": "String",
						"defaultValue": "CC_TEMP_FILE_DETAIL"
					},
					"moveInputPath": {
						"type": "String"
					},
					"configErrorMsg": {
						"type": "String"
					},
					"lovType": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"lovName": {
						"type": "String",
						"defaultValue": "sff_cc_arpu"
					},
					"REVIEW_TYPE": {
						"type": "String",
						"defaultValue": "sff_cc_arpu_data_fac"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_FindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_UpdateCreditgrade')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value in Clound Storage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('lovType'),''' AND c.LOV_NAME = ''',variables('lovName'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Clear Data Temp Table Detail",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE_DETAIL \n    WHERE FILE_ID IN(SELECT FILE_ID \n                        FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n                        WHERE STATUS = ''S'' \n                        AND FILE_TYPE = ''',variables('FILE_TYPE'),''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear Data Temp Table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n            WHERE STATUS = ''S'' \n            AND FILE_TYPE = ''',variables('FILE_TYPE'),'''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value in Clound Storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute All Process",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_FindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@variables('FILE_TYPE')",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@variables('REVIEW_TYPE')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert review ExceptionError",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Execute All Process",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.REVIEW_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('REVIEW_TYPE'),''',\n\t''E'','' CC_UpdateCreditGradeException ',replace(activity('Execute All Process').Error.Message,'''','\"'),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('REVIEW_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),concat('Config LOV_TYPE : ',variables('lovType'),' ,LOV_NAME : ',variables('lovName'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_CREDIT_GRADE"
					},
					"FILE_TYPE": {
						"type": "String",
						"defaultValue": "REQUEST_FILE_CREDIT_GRADE"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DEV"
					},
					"moveInputPath": {
						"type": "String"
					},
					"configErrorMsg": {
						"type": "String"
					},
					"lovType": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"lovName": {
						"type": "String",
						"defaultValue": "sff_cc_credit_grade"
					},
					"REVIEW_TYPE": {
						"type": "String",
						"defaultValue": "sff_cc_credit_grade_data_fac"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_FindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_UpdatePayment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value in Clound Storage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('lovType'),''' AND c.LOV_NAME = ''',variables('lovName'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Clear Data Temp Table Detail",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE_DETAIL \n    WHERE FILE_ID IN(SELECT FILE_ID \n                        FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n                        WHERE STATUS = ''S'' \n                        AND FILE_TYPE = ''',variables('FILE_TYPE'),''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear Data Temp Table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n            WHERE STATUS = ''S'' \n            AND FILE_TYPE = ''',variables('FILE_TYPE'),'''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value in Clound Storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute All Process",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_FindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@variables('FILE_TYPE')",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@variables('REVIEW_TYPE')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"CC_TEMP_FILE_DETAIL": {
												"value": "@variables('TEMP_FILE_DETAIL_CREATED_BY')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert review ExceptionError",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Execute All Process",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.REVIEW_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('REVIEW_TYPE'),''',\n\t''E'','' CC_UpdateCreditGradeException ',replace(activity('Execute All Process').Error.Message,'''','\"'),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('REVIEW_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),concat('Config LOV_TYPE : ',variables('lovType'),' ,LOV_NAME : ',variables('lovName'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_UPDATE_PAYMENT"
					},
					"FILE_TYPE": {
						"type": "String",
						"defaultValue": "REQUEST_FILE_UPDATE_PAYMENT"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DEV"
					},
					"TEMP_FILE_DETAIL_CREATED_BY": {
						"type": "String",
						"defaultValue": "CC_TEMP_FILE_DETAIL"
					},
					"moveInputPath": {
						"type": "String"
					},
					"configErrorMsg": {
						"type": "String"
					},
					"lovType": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"lovName": {
						"type": "String",
						"defaultValue": "sff_cc_review_cl_res"
					},
					"REVIEW_TYPE": {
						"type": "String",
						"defaultValue": "sff_cc_review_cl_res_data_fac"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_FindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CC_UpdateCreditgrade",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-05-17T02:48:00",
						"timeZone": "SE Asia Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								10
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_UpdateCreditgrade')]"
			]
		}
	]
}