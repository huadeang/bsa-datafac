{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "amtbsa"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CC_CreateFileAndArchiveHaveDatName')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "create file output",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.scriptQuery",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "LINE",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileToWrite",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get Metadata file created",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "create file output",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists",
								"size",
								"columnCount"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "create file output archive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Metadata file created",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "COLUMN",
										"value": {
											"value": "@concat(pipeline().parameters.fileName,'|',coalesce(activity('Get Metadata file created').output?.size,'0'))",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": " SELECT 'ONE'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "COLUMN"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileToWrite",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileNameArchive",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileName": {
						"type": "string"
					},
					"fileNameArchive": {
						"type": "string"
					},
					"scriptQuery": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_MoveFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy to create file",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inDir",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.inName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outDir",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.outName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy to create file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inDir",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.inName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete File Archive",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outDir",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.outName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inDir": {
						"type": "string"
					},
					"outDir": {
						"type": "string"
					},
					"inName": {
						"type": "string"
					},
					"outName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewCreateFileOutputAndArchive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update RESPONSE_FILE not have input file_copy1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''P'',\n\tDESCRIPTION = ''Query response detail ',string(pipeline().parameters.countRecord),' record'' WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "create file output",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update RESPONSE_FILE not have input file_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT COALESCE(FILE_LINE+''|''+ERROR_MSG ,FILE_LINE) AS errorLine, STATUS AS status \n        FROM ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_DETAIL \n        WHERE FILE_ID = ',pipeline().parameters.fileId,' ORDER BY FILE_DTL_ID;')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "errorLine",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileToWrite",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Clear temp file detail",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Creste file Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_DETAIL\n        WHERE FILE_ID = ',pipeline().parameters.fileId,'')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear temp file",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear temp file detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE\n        WHERE FILE_ID = ',pipeline().parameters.fileId,'')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Creste file Success",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "create file output archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tDESCRIPTION = ''Query response detail ',string(pipeline().parameters.countRecord),' record | create file ',pipeline().parameters.fileName,' in path ',pipeline().parameters.outputPath,' complete'' WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Creste file Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "create file output",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',activity('create file output').Error.Message,''' WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Get Metadata file created",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "create file output",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists",
								"size",
								"columnCount"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "create file output archive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Metadata file created",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "COLUMN",
										"value": {
											"value": "@concat(pipeline().parameters.fileName,'|',coalesce(activity('Get Metadata file created').output?.size,'0'))",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": " SELECT 'ONE'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "COLUMN"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileToWrite",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileNameArchive",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Creste file Error_copy1",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "create file output archive",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',activity('create file output archive').Error.Message,''' WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"fileType": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"fileId": {
						"type": "string"
					},
					"fileNameArchive": {
						"type": "string"
					},
					"countRecord": {
						"type": "string"
					},
					"resId": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewCreateFileOutputNotArchive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update RESPONSE_FILE not have input file_copy1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''P'',\n\tDESCRIPTION = ''Query response detail ',string(pipeline().parameters.countRecord),' record'' WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "create file output",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update RESPONSE_FILE not have input file_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT COALESCE(FILE_LINE+''|''+ERROR_MSG ,FILE_LINE) AS errorLine, STATUS AS status \n        FROM ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_DETAIL \n        WHERE FILE_ID = ',pipeline().parameters.fileId,' ORDER BY FILE_DTL_ID;')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "errorLine",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileToWrite",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Clear temp file detail",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Creste file Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_DETAIL\n        WHERE FILE_ID = ',pipeline().parameters.fileId,'')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear temp file",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear temp file detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE\n        WHERE FILE_ID = ',pipeline().parameters.fileId,'')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Creste file Success",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "create file output",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tDESCRIPTION = ''Query response detail ',string(pipeline().parameters.countRecord),' record | create file ',pipeline().parameters.fileName,' in path ',pipeline().parameters.outputPath,' complete'' WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Creste file Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "create file output",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',activity('create file output').Error.Message,'''  WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"fileType": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"fileId": {
						"type": "string"
					},
					"countRecord": {
						"type": "string"
					},
					"resId": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyBillingFileToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyBillingActivity",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@activity('Lookup1').output.firstRow.val3",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREATED",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILL_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILL_NAME",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "INVOICING_COMPANY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "INVOICING_COMPANY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "REGISTER_DT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "REGISTER_DT",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "ARPU",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ARPU",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "CREDIT_GRADE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREDIT_GRADE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 5
										}
									},
									{
										"source": {
											"name": "DEBT_NEGO_FLG",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEBT_NEGO_FLG",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DemoBillingCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTestBillingTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "CopyBillingActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://www.google.com/search?q=success",
							"connectVia": {
								"referenceName": "SelfHostIntegration",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Web2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "CopyBillingActivity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://www.google.com/search?q=failed",
							"connectVia": {
								"referenceName": "SelfHostIntegration",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from CREDIT.CC_CURRENT c where c.LOV_TYPE= 'CC_MONITOR_MASTER' and c.LOV_NAME = 'sff_cc_review_cl_res' and c.ACTIVE_FLG ='Y';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportReviewBilling')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportFileToCCBilling",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"preCopyScript": "delete from credit.test_cc_billing",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREATED",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILL_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILL_NAME",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "INVOICING_COMPANY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "INVOICING_COMPANY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "REGISTER_DT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "REGISTER_DT",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "ARPU",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ARPU",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "CREDIT_GRADE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREDIT_GRADE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 5
										}
									},
									{
										"source": {
											"name": "DEBT_NEGO_FLG",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEBT_NEGO_FLG",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCBillingFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TestCCBilling",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResReviewCreditLimit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupSyncFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.sync",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ResReviewSyncFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyDataToTable",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupSyncFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@{activity('LookupSyncFile').output.firstRow.Prop_0}",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "BA_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "FLAG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "DATE",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ResReviewCreditLimitData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCResReviewTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DeleteDataFile",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyDataToTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ResReviewCreditLimitData",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "DeleteSyncFile",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteDataFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ResReviewSyncFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-19T03:16:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResReviewCreditLimitCheckSize')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupSyncFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.sync",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ResReviewSyncFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GetFileMetadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LookupSyncFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ResReviewCreditLimitDataMatadata",
								"type": "DatasetReference",
								"parameters": {
									"filleName": {
										"value": "@{activity('LookupSyncFile').output.firstRow.Prop_0}",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFileMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetFileMetadata').output.size,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyDataToTable",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@{activity('LookupSyncFile').output.firstRow.Prop_0}",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"validateDataConsistency": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"type": "String",
														"ordinal": 1
													},
													"sink": {
														"name": "BA_NO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 2
													},
													"sink": {
														"name": "FLAG",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 3
													},
													"sink": {
														"name": "DATE",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ResReviewCreditLimitData",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "CCResReviewTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "DeleteDataFile",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyDataToTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ResReviewCreditLimitData",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "DeleteSyncFile",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "DeleteDataFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ResReviewSyncFile",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-19T03:16:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_CaCreditLimitDataFatorySendAccntIdProcesFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "insert CC_DATA_FACTORY onprocess",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "UPDATE CC_UPDATE_CA_INFO O To P",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.DATA_TYPE,''',\n\t''P'',''Process review send account id count ',if(greaterOrEquals(sub(pipeline().parameters.count,int(variables('offset'))),float(pipeline().parameters.limitPerRound)),pipeline().parameters.limitPerRound,sub(pipeline().parameters.count,int(variables('offset')))),''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update End Process",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CC_CreateFileAndArchiveHaveDatName",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',substring(concat('CC_ReviewDataFactorySendBilingNoProcessAccountNoList Exception :',replace(activity('CC_CreateFileAndArchiveHaveDatName').Error.Message,'''','\"')),0,if(less(length(replace(activity('CC_CreateFileAndArchiveHaveDatName').Error.Message,'''','\"')),499),length(replace(activity('CC_CreateFileAndArchiveHaveDatName').Error.Message,'''','\"')),499)),''' WHERE DATA_ID =',string(first(first(activity('insert CC_DATA_FACTORY onprocess').output.resultSets).rows).DATA_ID),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update End Process Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CC_CreateFileAndArchiveHaveDatName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tFILE_NAME = ',concat('''',variables('fileName'),''''),',\n\tFILE_NAME_SYNC = ',concat('''',variables('fileNameArchive'),''''),',\n\tFILE_PATH = ''',pipeline().parameters.outputPath,''',\n\tSTATUS = ''S'',\n\tDESCRIPTION = ''',concat('Create File : ',variables('fileName'),' success'),''' WHERE DATA_ID =',string(first(first(activity('insert CC_DATA_FACTORY onprocess').output.resultSets).rows).DATA_ID),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set offset",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "offset",
							"value": {
								"value": "@string(mul(sub(pipeline().parameters.round,1),int(pipeline().parameters.limitPerRound)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CC_CreateFileAndArchiveHaveDatName",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set fileName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set fileNameArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set script Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_CreateFileAndArchiveHaveDatName",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"fileName": {
									"value": "@variables('fileName')",
									"type": "Expression"
								},
								"fileNameArchive": {
									"value": "@variables('fileNameArchive')",
									"type": "Expression"
								},
								"scriptQuery": {
									"value": "@variables('scriptQuery')",
									"type": "Expression"
								},
								"outputPath": {
									"value": "@pipeline().parameters.outputPath",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set processTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "insert CC_DATA_FACTORY onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "processTime",
							"value": {
								"value": "@formatDateTime(convertTimeZone(addminutes(utcnow(),pipeline().parameters.round),'UTC','North Asia Standard Time'),'yyyyMMdd_HHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileNameArchive",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.sync')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.',pipeline().parameters.fileTypeOutputFile)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set script Query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "scriptQuery",
							"value": {
								"value": "@concat('SELECT\n\t''01|'' + ''',variables('processTime'),''' AS LINE  \n    UNION ALL \n    SELECT ''02|'' + T.LINE FROM (SELECT TOP ',pipeline().parameters.limitPerRound,' ACCNT_ID AS LINE FROM ',pipeline().parameters.SCHEMA,'.CC_UPDATE_CA_INFO \n                                    WHERE STATUS = ''P'' \n                                    ORDER BY CA_ID ASC ) T\n    UNION ALL \n    SELECT ''09|'' + CONVERT(varchar(255),COUNT(T2.LINE)) AS LINE FROM (SELECT TOP ',pipeline().parameters.limitPerRound,' ACCNT_ID AS LINE FROM ',pipeline().parameters.SCHEMA,'.CC_UPDATE_CA_INFO \n                                                                        WHERE STATUS = ''P'' \n                                                                        ORDER BY CA_ID ASC ) T2; ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "UPDATE CC_UPDATE_CA_INFO O To P",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set offset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE INFO \nSET INFO.STATUS = ''P''\nFROM (SELECT TOP 50000 CA_ID FROM ',pipeline().parameters.SCHEMA,'.CC_UPDATE_CA_INFO WHERE STATUS = ''O'' ORDER BY CA_ID) UP\nINNER JOIN ',pipeline().parameters.SCHEMA,'.CC_UPDATE_CA_INFO INFO\nON UP.CA_ID = INFO.CA_ID;')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"count": {
						"type": "float"
					},
					"round": {
						"type": "int"
					},
					"limitPerRound": {
						"type": "string"
					}
				},
				"variables": {
					"offset": {
						"type": "String"
					},
					"scriptQuery": {
						"type": "String"
					},
					"processTime": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_CreateFileAndArchiveHaveDatName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ChangeCatSubcatSendBillingAccoutnNoProcessAccountNoList')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set countRound",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set offset first round",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "countRound",
							"value": {
								"value": "@string(if(equals(length(split(string(div(length(pipeline().parameters.baList),float(variables('limitPerRound')))),'.')),2),add(div(length(pipeline().parameters.baList),int(variables('limitPerRound'))),1),div(length(pipeline().parameters.baList),int(variables('limitPerRound')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set tempCountList",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set countRound",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "tempCountList",
							"value": {
								"value": "@take(pipeline().parameters.baList,int(variables('countRound')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set tempCountList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('tempCountList')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set script Query",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "scriptQuery",
										"value": {
											"value": "@concat('SELECT BILLING_ACCNT_NO  FROM ',pipeline().parameters.SCHEMA,'.CC_CHANGE_CAT_SUBCAT_INFO \nGROUP BY BILLING_ACCNT_NO ORDER BY BILLING_ACCNT_NO OFFSET ',variables('offset'),' ROWS FETCH NEXT ',variables('limitPerRound'),' ROWS ONLY;')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Insert to change cat subcat Hist",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set new offset",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "CREATED",
													"value": {
														"value": "@convertTimeZone(utcnow(),'UTC','North Asia Standard Time')",
														"type": "Expression"
													}
												},
												{
													"name": "CREATED_BY",
													"value": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													}
												},
												{
													"name": "LAST_UPD",
													"value": {
														"value": "@convertTimeZone(utcnow(),'UTC','North Asia Standard Time')",
														"type": "Expression"
													}
												},
												{
													"name": "LAST_UPD_BY",
													"value": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													}
												},
												{
													"name": "STATUS",
													"value": ""
												},
												{
													"name": "CHANGE_ID",
													"value": {
														"value": "@pipeline().parameters.changeId",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@variables('scriptQuery')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "CREATED"
													},
													"sink": {
														"name": "CREATED",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "CREATED_BY"
													},
													"sink": {
														"name": "CREATED_BY",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "LAST_UPD"
													},
													"sink": {
														"name": "LAST_UPD",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "LAST_UPD_BY"
													},
													"sink": {
														"name": "LAST_UPD_BY",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CHANGE_ID"
													},
													"sink": {
														"name": "CHANGE_ID",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "BILLING_ACCNT_NO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "BILLING_ACCNT_NO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "STATUS"
													},
													"sink": {
														"name": "STATUS",
														"type": "String",
														"physicalType": "char"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlMaster",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "CC_DatasetChangeCatSubcatHistUAT",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set new offset",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set script Query",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "offset",
										"value": {
											"value": "@string(mul(int(variables('round')),int(variables('limitPerRound'))))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set processTime",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Insert to change cat subcat Hist",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "processTime",
										"value": {
											"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','North Asia Standard Time'),'yyyyMMdd_HHmmss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute CC_CreateFileAndArchive",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set fileNameArchive",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set fileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_CreateFileAndArchive",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"scriptQuery": {
												"value": "@variables('scriptQuery')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Set fileNameArchive",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set processTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileNameArchive",
										"value": {
											"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.sync')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileName",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set processTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.',pipeline().parameters.fileTypeOutputFile)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Have Error Record",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Execute CC_CreateFileAndArchive",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "haveError",
										"value": {
											"value": "@bool(true)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set offset first round",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set round",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "offset",
							"value": "0"
						}
					},
					{
						"name": "Set round",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "round",
							"value": "1"
						}
					},
					{
						"name": "Update End Process",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_CHANGE_CAT_SUBCAT \n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tCHANGE_TYPE = ''',pipeline().parameters.CHANGE_TYPE,''',\n\tSTATUS = ''',if(variables('haveError'),'E','S'),''',\n\tDESCRIPTION =''Create FileError''\n\tWHERE CHANGE_ID = ',pipeline().parameters.changeId)",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"CHANGE_TYPE": {
						"type": "string"
					},
					"baList": {
						"type": "array"
					},
					"changeId": {
						"type": "string"
					}
				},
				"variables": {
					"tempCountList": {
						"type": "Array"
					},
					"countRound": {
						"type": "String"
					},
					"limitPerRound": {
						"type": "String"
					},
					"offset": {
						"type": "String"
					},
					"scriptQuery": {
						"type": "String"
					},
					"round": {
						"type": "String"
					},
					"processTime": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"haveError": {
						"type": "Boolean"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertBillingChangeCatSubcatProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup File dat",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter Start With 02",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup File dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup File dat').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().Prop_0,'02')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Start With 02",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Start With 02').output.Value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Script Insert Table CC_BILLING_CAT_SUBCAT",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_BILLING_CAT_SUBCAT \n    (ROW_ID,\n\tCREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tACCNT_NO,\n\tACCNT_CATEGORY ,\n\tACCNT_SUB_CATEGORY ,\n\tBILL_CYCLE ,\n\tNAME ,\n\tPAYMENT_METHOD ,\n\tMASTER_ACCNT_ID ,\n\tSTATUS_CD ,\n\tBILLING_STATUS_CD,\n\tREGISTER_DT,\n\tFBB_FLAG,\n\tSUPPEND_FLAG,\n\tCOUNT_MOBILE,\n\tSUM_MAIN_PRO) VALUES ('\n    ,if(empty(split(item().Prop_0,'|')[1]),'NULL',concat('''',split(item().Prop_0,'|')[1],'''')),',',\nif(empty(split(item().Prop_0,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcnow(),'UTC','North Asia Standard Time'),''')'),concat('''',split(item().Prop_0,'|')[2],'''')),',',\nif(empty(split(item().Prop_0,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(item().Prop_0,'|')[3],'''')),',',\nif(empty(split(item().Prop_0,'|')[4]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcnow(),'UTC','North Asia Standard Time'),''')'),concat('''',split(item().Prop_0,'|')[4],'''')),',',\nif(empty(split(item().Prop_0,'|')[5]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(item().Prop_0,'|')[5],'''')),',',\nif(empty(split(item().Prop_0,'|')[6]),'NULL',concat('''',split(item().Prop_0,'|')[6],'''')),',',\nif(empty(split(item().Prop_0,'|')[7]),'NULL',concat('''',split(item().Prop_0,'|')[7],'''')),',',\nif(empty(split(item().Prop_0,'|')[8]),'NULL',concat('''',split(item().Prop_0,'|')[8],'''')),',',\nif(empty(split(item().Prop_0,'|')[9]),'NULL',concat('''',split(item().Prop_0,'|')[9],'''')),',',\nif(empty(split(item().Prop_0,'|')[10]),'NULL',concat('''',split(item().Prop_0,'|')[10],'''')),',',\nif(empty(split(item().Prop_0,'|')[11]),'NULL',concat('''',split(item().Prop_0,'|')[11],'''')),',',\nif(empty(split(item().Prop_0,'|')[12]),'NULL',concat('''',split(item().Prop_0,'|')[12],'''')),',',\nif(empty(split(item().Prop_0,'|')[13]),'NULL',concat('''',split(item().Prop_0,'|')[13],'''')),',',\nif(empty(split(item().Prop_0,'|')[14]),'NULL',concat('''',split(item().Prop_0,'|')[14],'''')),',',\nif(empty(split(item().Prop_0,'|')[15]),'NULL',concat('''',split(item().Prop_0,'|')[15],'''')),',',\nif(empty(split(item().Prop_0,'|')[16]),'NULL',concat('''',split(item().Prop_0,'|')[16],'''')),',',\nif(empty(split(item().Prop_0,'|')[17]),'NULL',concat('''',split(item().Prop_0,'|')[17],'''')),',',\nif(empty(split(item().Prop_0,'|')[18]),'NULL',concat('''',split(item().Prop_0,'|')[18],'''')),',',\nif(equals(trim(coalesce(split(item().Prop_0,'|')[19],'')),''),'NULL',concat('''',split(item().Prop_0,'|')[19],'''')),');')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Script Insert Table CC_DATA_FACTORY_HIST onfail",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set haveErrorRow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',item().Prop_0,''',\n\t''',replace(activity('Script Insert Table CC_BILLING_CAT_SUBCAT').Error.Message,'''','\"'),''',\n\t''E''\n\t)')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set haveErrorRow",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Script Insert Table CC_BILLING_CAT_SUBCAT",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "haveErrorRow",
										"value": {
											"value": "@bool(true)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If have Error Record",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('haveErrorRow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update CC_DATA_FACTORY Success",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Update CC_DATA_FACTORY haveErrorRow is true",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateCreditAssignProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup File dat",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter Start With 02",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup File dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup File dat').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().Prop_0,'02')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Start With 02",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Start With 02').output.Value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Get Exiting RefRowId",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT ''Y'' from ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN WHERE REF_ROW_ID = ''',split(item().Prop_0,'|')[1],'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlTableCurrent",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Script Insert or Update Table CC_CREDIT_ASSIGN",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Get Exiting RefRowId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@if(not(contains(string(activity('Get Exiting RefRowId').output),'firstRow'))\n,concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN \n    (REF_ROW_ID,\n\tCREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tBILLING_ACCOUNT_NUM,\n\tLIMIT_MNY,\n\tGNV_LIMIT_MNY,\n\tTHRESHOLD_ID,\n\tREQUEST_ID,\n\tACTION_TYPE,\n\tACTION_DTM,\n\tREASON_CODE,\n\tREASON_SUBCODE,\n\tLAST_UPDATE_BY,\n\tLAST_UPDATE_DTM,\n\tASSIGN_NO,\n\tTEMP_EXPIRE_DAT,\n\tSEQ_NO,\n\tCREDIT_GRADE,\n\tARPU,\n\tMIN_REVIEW,\n\tSUM_MAIN,\n\tNEXT_BILL_DATE) VALUES ('\n    ,if(empty(split(item().Prop_0,'|')[1]),'NULL',concat('''',split(item().Prop_0,'|')[1],'''')),',',\nif(empty(split(item().Prop_0,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')'),concat('''',split(item().Prop_0,'|')[2],'''')),',',\nif(empty(split(item().Prop_0,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(item().Prop_0,'|')[3],'''')),',',\nif(empty(split(item().Prop_0,'|')[4]),'NULL',concat('''',split(item().Prop_0,'|')[4],'''')),',',\nif(empty(split(item().Prop_0,'|')[5]),'NULL',concat('''',split(item().Prop_0,'|')[5],'''')),',',\nif(empty(split(item().Prop_0,'|')[6]),'NULL',concat('''',split(item().Prop_0,'|')[6],'''')),',',\nif(empty(split(item().Prop_0,'|')[7]),'NULL',concat('''',split(item().Prop_0,'|')[7],'''')),',',\nif(empty(split(item().Prop_0,'|')[8]),'NULL',concat('''',split(item().Prop_0,'|')[8],'''')),',',\nif(empty(split(item().Prop_0,'|')[9]),'NULL',concat('''',split(item().Prop_0,'|')[9],'''')),',',\nif(empty(split(item().Prop_0,'|')[10]),'NULL',concat('''',split(item().Prop_0,'|')[10],'''')),',',\nif(empty(split(item().Prop_0,'|')[11]),'NULL',concat('''',split(item().Prop_0,'|')[11],'''')),',',\nif(empty(split(item().Prop_0,'|')[12]),'NULL',concat('''',split(item().Prop_0,'|')[12],'''')),',',\nif(empty(split(item().Prop_0,'|')[13]),'NULL',concat('''',split(item().Prop_0,'|')[13],'''')),',',\nif(empty(split(item().Prop_0,'|')[14]),'NULL',concat('''',split(item().Prop_0,'|')[14],'''')),',',\nif(empty(split(item().Prop_0,'|')[15]),'NULL',concat('''',split(item().Prop_0,'|')[15],'''')),',',\nif(empty(split(item().Prop_0,'|')[16]),'NULL',concat('''',split(item().Prop_0,'|')[16],'''')),',',\nif(empty(split(item().Prop_0,'|')[17]),'NULL',concat('''',split(item().Prop_0,'|')[17],'''')),',',\nif(empty(split(item().Prop_0,'|')[18]),'NULL',concat('''',split(item().Prop_0,'|')[18],'''')),',',\nif(empty(split(item().Prop_0,'|')[19]),'NULL',concat('''',split(item().Prop_0,'|')[19],'''')),',',\nif(empty(split(item().Prop_0,'|')[20]),'NULL',concat('''',split(item().Prop_0,'|')[20],'''')),',',\nif(empty(split(item().Prop_0,'|')[21]),'NULL',concat('''',split(item().Prop_0,'|')[21],'''')),',',\nif(empty(split(item().Prop_0,'|')[22]),'NULL',concat('''',split(item().Prop_0,'|')[22],'''')),',',\nif(empty(split(item().Prop_0,'|')[23]),'NULL',concat('''',split(item().Prop_0,'|')[23],'''')),',',\nif(empty(split(item().Prop_0,'|')[25]),'NULL',concat('''',split(item().Prop_0,'|')[25],'''')),');')\n\n,concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN\n    SET\n\tCREATED =',if(empty(split(item().Prop_0,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')'),concat('''',split(item().Prop_0,'|')[2],'''')),',\n\tCREATED_BY =',if(empty(split(item().Prop_0,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(item().Prop_0,'|')[3],'''')),',\n\tLAST_UPD =',if(empty(split(item().Prop_0,'|')[4]),'NULL',concat('''',split(item().Prop_0,'|')[4],'''')),',\n\tLAST_UPD_BY =',if(empty(split(item().Prop_0,'|')[5]),'NULL',concat('''',split(item().Prop_0,'|')[5],'''')),',\n\tBILLING_ACCOUNT_NUM =',if(empty(split(item().Prop_0,'|')[6]),'NULL',concat('''',split(item().Prop_0,'|')[6],'''')),',\n\tLIMIT_MNY =',if(empty(split(item().Prop_0,'|')[7]),'NULL',concat('''',split(item().Prop_0,'|')[7],'''')),',\n\tGNV_LIMIT_MNY =',if(empty(split(item().Prop_0,'|')[8]),'NULL',concat('''',split(item().Prop_0,'|')[8],'''')),',\n\tTHRESHOLD_ID =',if(empty(split(item().Prop_0,'|')[9]),'NULL',concat('''',split(item().Prop_0,'|')[9],'''')),',\n\tREQUEST_ID =',if(empty(split(item().Prop_0,'|')[10]),'NULL',concat('''',split(item().Prop_0,'|')[10],'''')),',\n\tACTION_TYPE =',if(empty(split(item().Prop_0,'|')[11]),'NULL',concat('''',split(item().Prop_0,'|')[11],'''')),',\n\tACTION_DTM =',if(empty(split(item().Prop_0,'|')[12]),'NULL',concat('''',split(item().Prop_0,'|')[12],'''')),',\n\tREASON_CODE =',if(empty(split(item().Prop_0,'|')[13]),'NULL',concat('''',split(item().Prop_0,'|')[13],'''')),',\n\tREASON_SUBCODE =',if(empty(split(item().Prop_0,'|')[14]),'NULL',concat('''',split(item().Prop_0,'|')[14],'''')),',\n\tLAST_UPDATE_BY =',if(empty(split(item().Prop_0,'|')[15]),'NULL',concat('''',split(item().Prop_0,'|')[15],'''')),',\n\tLAST_UPDATE_DTM =',if(empty(split(item().Prop_0,'|')[16]),'NULL',concat('''',split(item().Prop_0,'|')[16],'''')),',\n\tASSIGN_NO =',if(empty(split(item().Prop_0,'|')[17]),'NULL',concat('''',split(item().Prop_0,'|')[17],'''')),',\n\tTEMP_EXPIRE_DAT =',if(empty(split(item().Prop_0,'|')[18]),'NULL',concat('''',split(item().Prop_0,'|')[18],'''')),',\n\tSEQ_NO =',if(empty(split(item().Prop_0,'|')[19]),'NULL',concat('''',split(item().Prop_0,'|')[19],'''')),',\n\tCREDIT_GRADE =',if(empty(split(item().Prop_0,'|')[20]),'NULL',concat('''',split(item().Prop_0,'|')[20],'''')),',\n\tARPU =',if(empty(split(item().Prop_0,'|')[21]),'NULL',concat('''',split(item().Prop_0,'|')[21],'''')),',\n\tMIN_REVIEW =',if(empty(split(item().Prop_0,'|')[22]),'NULL',concat('''',split(item().Prop_0,'|')[22],'''')),',\n\tSUM_MAIN =',if(empty(split(item().Prop_0,'|')[23]),'NULL',concat('''',split(item().Prop_0,'|')[23],'''')),',\n\tNEXT_BILL_DATE =',if(empty(split(item().Prop_0,'|')[25]),'NULL',concat('''',split(item().Prop_0,'|')[25],'''')),'\n\tWHERE REF_ROW_ID = ''',split(item().Prop_0,'|')[1],''';'))",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Script Insert Table CC_DATA_FACTORY_HIST",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set haveErrorRow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',item().Prop_0,''',\n\t''',replace(activity('Script Insert or Update Table CC_CREDIT_ASSIGN').Error.Message,'''','\"'),''',\n\t''E''\n\t)')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set haveErrorRow",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Script Insert or Update Table CC_CREDIT_ASSIGN",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "haveErrorRow",
										"value": {
											"value": "@bool(true)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If have Error Record",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('haveErrorRow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update CC_DATA_FACTORY Success",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Update CC_DATA_FACTORY haveErrorRow is true",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					},
					"refRowId": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup File dat",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter Start With 02",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup File dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup File dat').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().Prop_0,'02')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Start With 02",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Start With 02').output.Value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Script Insert Table CC_DATA_FACTORY_HIST onfail",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set haveErrorRow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',item().Prop_0,''',\n\t''',replace(activity('Script Insert or Update Table CC_NEGOTIATION_VALUE').Error.Message,'''','\"'),''',\n\t''E''\n\t)')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set haveErrorRow",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Script Insert or Update Table CC_NEGOTIATION_VALUE",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "haveErrorRow",
										"value": {
											"value": "@bool(true)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get Data By RowId",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT ''Y'' FROM ',pipeline().parameters.SCHEMA,'.CC_NEGOTIATION_VALUE WHERE REF_ROW_ID= ''',split(item().Prop_0,'|')[1],'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlTableCurrent",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Script Insert or Update Table CC_NEGOTIATION_VALUE",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Get Data By RowId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@if(not(contains(string(activity('Get Data By RowId').output),'firstRow'))\n,concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_NEGOTIATION_VALUE \n    (REF_ROW_ID,\n\tCREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREQ_ID ,\n\tACCNT_ID ,\n\tBILLING_ACCNT_ID ,\n\tNEGO_CREDIT_LIMIT ,\n\tAR_BALANCE ,\n\tAVAILABLE_FOR_MONTHLY ,\n\tPRICE_MAIN_PRO ,\n\tMULTIPLIER,\n\tBA_SCORE_RANGE,\n\tCL_BEFORE_NEGO,\n\tCUS_REQ_BALANCE,\n\tNEGO_STATUS,\n\tREASON_CODE,\n\tCHANNEL,\n\tCL_BEFORE_NEGO_PERM,\n\tCL_BEFORE_NEGO_TEMP) VALUES ('\n    ,if(empty(split(item().Prop_0,'|')[1]),'NULL',concat('''',split(item().Prop_0,'|')[1],'''')),',',\nif(empty(split(item().Prop_0,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')'),concat('''',split(item().Prop_0,'|')[2],'''')),',',\nif(empty(split(item().Prop_0,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(item().Prop_0,'|')[3],'''')),',',\nif(empty(split(item().Prop_0,'|')[4]),'NULL',concat('''',split(item().Prop_0,'|')[4],'''')),',',\nif(empty(split(item().Prop_0,'|')[5]),'NULL',concat('''',split(item().Prop_0,'|')[5],'''')),',',\nif(empty(split(item().Prop_0,'|')[6]),'NULL',concat('''',split(item().Prop_0,'|')[6],'''')),',',\nif(empty(split(item().Prop_0,'|')[7]),'NULL',concat('''',split(item().Prop_0,'|')[7],'''')),',',\nif(empty(split(item().Prop_0,'|')[8]),'NULL',concat('''',split(item().Prop_0,'|')[8],'''')),',',\nif(empty(split(item().Prop_0,'|')[9]),'NULL',concat('''',split(item().Prop_0,'|')[9],'''')),',',\nif(empty(split(item().Prop_0,'|')[10]),'NULL',concat('''',split(item().Prop_0,'|')[10],'''')),',',\nif(empty(split(item().Prop_0,'|')[11]),'NULL',concat('''',split(item().Prop_0,'|')[11],'''')),',',\nif(empty(split(item().Prop_0,'|')[12]),'NULL',concat('''',split(item().Prop_0,'|')[12],'''')),',',\nif(empty(split(item().Prop_0,'|')[13]),'NULL',concat('''',split(item().Prop_0,'|')[13],'''')),',',\nif(empty(split(item().Prop_0,'|')[14]),'NULL',concat('''',split(item().Prop_0,'|')[14],'''')),',',\nif(empty(split(item().Prop_0,'|')[15]),'NULL',concat('''',split(item().Prop_0,'|')[15],'''')),',',\nif(empty(split(item().Prop_0,'|')[16]),'NULL',concat('''',split(item().Prop_0,'|')[16],'''')),',',\nif(empty(split(item().Prop_0,'|')[17]),'NULL',concat('''',split(item().Prop_0,'|')[17],'''')),',',\nif(empty(split(item().Prop_0,'|')[18]),'NULL',concat('''',split(item().Prop_0,'|')[18],'''')),',',\nif(empty(split(item().Prop_0,'|')[19]),'NULL',concat('''',split(item().Prop_0,'|')[19],'''')),',',\nif(empty(split(item().Prop_0,'|')[20]),'NULL',concat('''',split(item().Prop_0,'|')[20],'''')),',',\nif(empty(split(item().Prop_0,'|')[21]),'NULL',concat('''',split(item().Prop_0,'|')[21],'''')),');')\n\n,concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_NEGOTIATION_VALUE\n    SET\n\tCREATED =',if(empty(split(item().Prop_0,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')'),concat('''',split(item().Prop_0,'|')[2],'''')),',\n\tCREATED_BY =',if(empty(split(item().Prop_0,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(item().Prop_0,'|')[3],'''')),',\n\tLAST_UPD =',if(empty(split(item().Prop_0,'|')[4]),'NULL',concat('''',split(item().Prop_0,'|')[4],'''')),',\n\tLAST_UPD_BY =',if(empty(split(item().Prop_0,'|')[5]),'NULL',concat('''',split(item().Prop_0,'|')[5],'''')),',\n\tREQ_ID =',if(empty(split(item().Prop_0,'|')[6]),'NULL',concat('''',split(item().Prop_0,'|')[6],'''')),',\n\tACCNT_ID =',if(empty(split(item().Prop_0,'|')[7]),'NULL',concat('''',split(item().Prop_0,'|')[7],'''')),',\n\tBILLING_ACCNT_ID =',if(empty(split(item().Prop_0,'|')[8]),'NULL',concat('''',split(item().Prop_0,'|')[8],'''')),',\n\tNEGO_CREDIT_LIMIT =',if(empty(split(item().Prop_0,'|')[9]),'NULL',concat('''',split(item().Prop_0,'|')[9],'''')),',\n\tAR_BALANCE =',if(empty(split(item().Prop_0,'|')[10]),'NULL',concat('''',split(item().Prop_0,'|')[10],'''')),',\n\tAVAILABLE_FOR_MONTHLY =',if(empty(split(item().Prop_0,'|')[11]),'NULL',concat('''',split(item().Prop_0,'|')[11],'''')),',\n\tPRICE_MAIN_PRO =',if(empty(split(item().Prop_0,'|')[12]),'NULL',concat('''',split(item().Prop_0,'|')[12],'''')),',\n\tMULTIPLIER =',if(empty(split(item().Prop_0,'|')[13]),'NULL',concat('''',split(item().Prop_0,'|')[13],'''')),',\n\tBA_SCORE_RANGE =',if(empty(split(item().Prop_0,'|')[14]),'NULL',concat('''',split(item().Prop_0,'|')[14],'''')),',\n\tCL_BEFORE_NEGO =',if(empty(split(item().Prop_0,'|')[15]),'NULL',concat('''',split(item().Prop_0,'|')[15],'''')),',\n\tCUS_REQ_BALANCE =',if(empty(split(item().Prop_0,'|')[16]),'NULL',concat('''',split(item().Prop_0,'|')[16],'''')),',\n\tNEGO_STATUS =',if(empty(split(item().Prop_0,'|')[17]),'NULL',concat('''',split(item().Prop_0,'|')[17],'''')),',\n\tREASON_CODE =',if(empty(split(item().Prop_0,'|')[18]),'NULL',concat('''',split(item().Prop_0,'|')[18],'''')),',\n\tCHANNEL =',if(empty(split(item().Prop_0,'|')[19]),'NULL',concat('''',split(item().Prop_0,'|')[19],'''')),',\n\tCL_BEFORE_NEGO_PERM =',if(empty(split(item().Prop_0,'|')[20]),'NULL',concat('''',split(item().Prop_0,'|')[20],'''')),',\n\tCL_BEFORE_NEGO_TEMP =',if(empty(split(item().Prop_0,'|')[21]),'NULL',concat('''',split(item().Prop_0,'|')[21],'''')),'\n\tWHERE REF_ROW_ID = ''',split(item().Prop_0,'|')[1],''';'))",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If have Error Record",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('haveErrorRow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update CC_DATA_FACTORY Success",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Update CC_DATA_FACTORY haveErrorRow is true",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					},
					"refRowId": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateScoreValueProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup File dat",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter Start With 02",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup File dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup File dat').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().Prop_0,'02')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Start With 02",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Start With 02').output.Value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Get Exiting RefRowId",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT ''Y'' from ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE WHERE REF_ROW_ID = ''',split(item().Prop_0,'|')[1],'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlTableCurrent",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Script Insert or Update Table CC_SCORE_VALUE",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Get Exiting RefRowId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@if(not(contains(string(activity('Get Exiting RefRowId').output),'firstRow'))\n,concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE \n    (REF_ROW_ID,\n\tCREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tACCNT_ID,\n\tBILLING_ACCNT_ID,\n\tACCNT_NO,\n\tCL_LEVEL,\n\tSCORE_RANGE,\n\tCL_TYPE,\n\tCL_CHANGE_REASON,\n\tOUTCOME_CD,\n\tOUTCOME_REASON,\n\tCREDIT_LIMIT,\n\tPERM_CREDIT_LIMIT,\n\tTEMP_CREDIT_LIMIT,\n\tPREV_CREDIT_LIMIT,\n\tPREV_SCORE_RANGE,\n\tACTUAL,\n\tACTUAL_PERM,\n\tBILLING_CREDIT_LIMIT,\n\tBILLING_THRESHOLD_SET_ID,\n\tFBB_FLAG,\n\tLAST_REVIEW_DAT,\n\tMIN_REVIEW,\n\tAVAILABLE_CREDIT,\n\tPAYMENT_FLG,\n\tBA_REGISTER_DT) VALUES ('\n    ,if(empty(split(item().Prop_0,'|')[1]),'NULL',concat('''',split(item().Prop_0,'|')[1],'''')),',',\nif(empty(split(item().Prop_0,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')'),concat('''',split(item().Prop_0,'|')[2],'''')),',',\nif(empty(split(item().Prop_0,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(item().Prop_0,'|')[3],'''')),',',\nif(empty(split(item().Prop_0,'|')[4]),'NULL',concat('''',split(item().Prop_0,'|')[4],'''')),',',\nif(empty(split(item().Prop_0,'|')[5]),'NULL',concat('''',split(item().Prop_0,'|')[5],'''')),',',\nif(empty(split(item().Prop_0,'|')[6]),'NULL',concat('''',split(item().Prop_0,'|')[6],'''')),',',\nif(empty(split(item().Prop_0,'|')[7]),'NULL',concat('''',split(item().Prop_0,'|')[7],'''')),',',\nif(empty(split(item().Prop_0,'|')[8]),'NULL',concat('''',split(item().Prop_0,'|')[8],'''')),',',\nif(empty(split(item().Prop_0,'|')[9]),'NULL',concat('''',split(item().Prop_0,'|')[9],'''')),',',\nif(empty(split(item().Prop_0,'|')[10]),'NULL',concat('''',split(item().Prop_0,'|')[10],'''')),',',\nif(empty(split(item().Prop_0,'|')[11]),'NULL',concat('''',split(item().Prop_0,'|')[11],'''')),',',\nif(empty(split(item().Prop_0,'|')[12]),'NULL',concat('''',split(item().Prop_0,'|')[12],'''')),',',\nif(empty(split(item().Prop_0,'|')[13]),'NULL',concat('''',split(item().Prop_0,'|')[13],'''')),',',\nif(empty(split(item().Prop_0,'|')[14]),'NULL',concat('''',split(item().Prop_0,'|')[14],'''')),',',\nif(empty(split(item().Prop_0,'|')[15]),'NULL',concat('''',split(item().Prop_0,'|')[15],'''')),',',\nif(empty(split(item().Prop_0,'|')[16]),'NULL',concat('''',split(item().Prop_0,'|')[16],'''')),',',\nif(empty(split(item().Prop_0,'|')[17]),'NULL',concat('''',split(item().Prop_0,'|')[17],'''')),',',\nif(empty(split(item().Prop_0,'|')[18]),'NULL',concat('''',split(item().Prop_0,'|')[18],'''')),',',\nif(empty(split(item().Prop_0,'|')[19]),'NULL',concat('''',split(item().Prop_0,'|')[19],'''')),',',\nif(empty(split(item().Prop_0,'|')[20]),'NULL',concat('''',split(item().Prop_0,'|')[20],'''')),',',\nif(empty(split(item().Prop_0,'|')[21]),'NULL',concat('''',split(item().Prop_0,'|')[21],'''')),',',\nif(empty(split(item().Prop_0,'|')[22]),'NULL',concat('''',split(item().Prop_0,'|')[22],'''')),',',\nif(empty(split(item().Prop_0,'|')[23]),'NULL',concat('''',split(item().Prop_0,'|')[23],'''')),',',\nif(empty(split(item().Prop_0,'|')[24]),'NULL',concat('''',split(item().Prop_0,'|')[24],'''')),',',\nif(empty(split(item().Prop_0,'|')[25]),'NULL',concat('''',split(item().Prop_0,'|')[25],'''')),',',\nif(empty(split(item().Prop_0,'|')[26]),'NULL',concat('''',split(item().Prop_0,'|')[26],'''')),',',\nif(empty(split(item().Prop_0,'|')[27]),'NULL',concat('''',split(item().Prop_0,'|')[27],'''')),',',\nif(empty(split(item().Prop_0,'|')[28]),'NULL',concat('''',split(item().Prop_0,'|')[28],'''')),',',\nif(empty(split(item().Prop_0,'|')[29]),'NULL',concat('''',split(item().Prop_0,'|')[29],'''')),');')\n\n,concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE\n    SET\n\tCREATED =',if(empty(split(item().Prop_0,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')'),concat('''',split(item().Prop_0,'|')[2],'''')),',\n\tCREATED_BY =',if(empty(split(item().Prop_0,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(item().Prop_0,'|')[3],'''')),',\n\tLAST_UPD =',if(empty(split(item().Prop_0,'|')[4]),'NULL',concat('''',split(item().Prop_0,'|')[4],'''')),',\n\tLAST_UPD_BY =',if(empty(split(item().Prop_0,'|')[5]),'NULL',concat('''',split(item().Prop_0,'|')[5],'''')),',\n\tACCNT_ID =',if(empty(split(item().Prop_0,'|')[6]),'NULL',concat('''',split(item().Prop_0,'|')[6],'''')),',\n\tBILLING_ACCNT_ID =',if(empty(split(item().Prop_0,'|')[7]),'NULL',concat('''',split(item().Prop_0,'|')[7],'''')),',\n\tACCNT_NO =',if(empty(split(item().Prop_0,'|')[8]),'NULL',concat('''',split(item().Prop_0,'|')[8],'''')),',\n\tCL_LEVEL =',if(empty(split(item().Prop_0,'|')[9]),'NULL',concat('''',split(item().Prop_0,'|')[9],'''')),',\n\tSCORE_RANGE =',if(empty(split(item().Prop_0,'|')[10]),'NULL',concat('''',split(item().Prop_0,'|')[10],'''')),',\n\tCL_TYPE =',if(empty(split(item().Prop_0,'|')[11]),'NULL',concat('''',split(item().Prop_0,'|')[11],'''')),',\n\tCL_CHANGE_REASON =',if(empty(split(item().Prop_0,'|')[12]),'NULL',concat('''',split(item().Prop_0,'|')[12],'''')),',\n\tOUTCOME_CD =',if(empty(split(item().Prop_0,'|')[13]),'NULL',concat('''',split(item().Prop_0,'|')[12],'''')),',\n\tOUTCOME_REASON =',if(empty(split(item().Prop_0,'|')[14]),'NULL',concat('''',split(item().Prop_0,'|')[14],'''')),',\n\tCREDIT_LIMIT =',if(empty(split(item().Prop_0,'|')[15]),'NULL',concat('''',split(item().Prop_0,'|')[15],'''')),',\n\tPERM_CREDIT_LIMIT =',if(empty(split(item().Prop_0,'|')[16]),'NULL',concat('''',split(item().Prop_0,'|')[16],'''')),',\n\tTEMP_CREDIT_LIMIT =',if(empty(split(item().Prop_0,'|')[17]),'NULL',concat('''',split(item().Prop_0,'|')[17],'''')),',\n\tPREV_CREDIT_LIMIT =',if(empty(split(item().Prop_0,'|')[18]),'NULL',concat('''',split(item().Prop_0,'|')[18],'''')),',\n\tPREV_SCORE_RANGE =',if(empty(split(item().Prop_0,'|')[19]),'NULL',concat('''',split(item().Prop_0,'|')[19],'''')),',\n\tACTUAL =',if(empty(split(item().Prop_0,'|')[20]),'NULL',concat('''',split(item().Prop_0,'|')[20],'''')),',\n\tACTUAL_PERM =',if(empty(split(item().Prop_0,'|')[21]),'NULL',concat('''',split(item().Prop_0,'|')[21],'''')),',\n\tBILLING_CREDIT_LIMIT =',if(empty(split(item().Prop_0,'|')[22]),'NULL',concat('''',split(item().Prop_0,'|')[22],'''')),',\n\tBILLING_THRESHOLD_SET_ID =',if(empty(split(item().Prop_0,'|')[23]),'NULL',concat('''',split(item().Prop_0,'|')[23],'''')),',\n\tFBB_FLAG =',if(empty(split(item().Prop_0,'|')[24]),'NULL',concat('''',split(item().Prop_0,'|')[24],'''')),',\n\tLAST_REVIEW_DAT =',if(empty(split(item().Prop_0,'|')[25]),'NULL',concat('''',split(item().Prop_0,'|')[25],'''')),',\n\tMIN_REVIEW =',if(empty(split(item().Prop_0,'|')[26]),'NULL',concat('''',split(item().Prop_0,'|')[26],'''')),',\n\tAVAILABLE_CREDIT =',if(empty(split(item().Prop_0,'|')[27]),'NULL',concat('''',split(item().Prop_0,'|')[27],'''')),',\n\tPAYMENT_FLG =',if(empty(split(item().Prop_0,'|')[28]),'NULL',concat('''',split(item().Prop_0,'|')[28],'''')),',\n\tBA_REGISTER_DT =',if(empty(split(item().Prop_0,'|')[29]),'NULL',concat('''',split(item().Prop_0,'|')[29],'''')),'\n\tWHERE REF_ROW_ID = ''',split(item().Prop_0,'|')[1],''';'))",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Script Insert Table CC_DATA_FACTORY_HIST",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set haveErrorRow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',item().Prop_0,''',\n\t''',substring(replace(activity('Script Insert or Update Table CC_SCORE_VALUE').Error.Message,'''','\"'),0,499),''',\n\t''E''\n\t)')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set haveErrorRow",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Script Insert or Update Table CC_SCORE_VALUE",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "haveErrorRow",
										"value": {
											"value": "@bool(true)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If have Error Record",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('haveErrorRow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update CC_DATA_FACTORY Success",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Update CC_DATA_FACTORY haveErrorRow is true",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					},
					"refRowId": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertProfileChangeProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup File dat",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter Start With 02",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup File dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup File dat').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().Prop_0,'02')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Start With 02",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Start With 02').output.Value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Script Insert Table CC_PROFILE_CHANGE",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_PROFILE_CHANGE \n    (ROW_ID,\n\tCREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tTYPE,\n\tACCNT_ID ,\n\tSTATUS_CD ,\n\tSTATUS_DT  ,\n\tEFFECTIVE_DT ,\n\tREMARK ,\n\tPROFILE_CHG_NO ,\n\tNEW_ACCNT_CATEGORY ,\n\tNEW_ACCNT_SUB_CATEGORY,\n\tOLD_ACCNT_CATEGORY,\n\tOLD_ACCNT_SUB_CATEGORY) VALUES ('\n    ,if(empty(split(item().Prop_0,'|')[1]),'NULL',concat('''',split(item().Prop_0,'|')[1],'''')),',',\nif(empty(split(item().Prop_0,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcnow(),'UTC','North Asia Standard Time'),''')'),concat('''',split(item().Prop_0,'|')[2],'''')),',',\nif(empty(split(item().Prop_0,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(item().Prop_0,'|')[3],'''')),',',\nif(empty(split(item().Prop_0,'|')[4]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcnow(),'UTC','North Asia Standard Time'),''')'),concat('''',split(item().Prop_0,'|')[4],'''')),',',\nif(empty(split(item().Prop_0,'|')[5]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(item().Prop_0,'|')[5],'''')),',',\nif(empty(split(item().Prop_0,'|')[6]),'NULL',concat('''',split(item().Prop_0,'|')[6],'''')),',',\nif(empty(split(item().Prop_0,'|')[7]),'NULL',concat('''',split(item().Prop_0,'|')[7],'''')),',',\nif(empty(split(item().Prop_0,'|')[8]),'NULL',concat('''',split(item().Prop_0,'|')[8],'''')),',',\nif(empty(split(item().Prop_0,'|')[9]),'NULL',concat('''',split(item().Prop_0,'|')[9],'''')),',',\nif(empty(split(item().Prop_0,'|')[10]),'NULL',concat('''',split(item().Prop_0,'|')[10],'''')),',',\nif(empty(split(item().Prop_0,'|')[11]),'NULL',concat('''',split(item().Prop_0,'|')[11],'''')),',',\nif(empty(split(item().Prop_0,'|')[12]),'NULL',concat('''',split(item().Prop_0,'|')[12],'''')),',',\nif(empty(split(item().Prop_0,'|')[13]),'NULL',concat('''',split(item().Prop_0,'|')[13],'''')),',',\nif(empty(split(item().Prop_0,'|')[14]),'NULL',concat('''',split(item().Prop_0,'|')[14],'''')),',',\nif(empty(split(item().Prop_0,'|')[15]),'NULL',concat('''',split(item().Prop_0,'|')[15],'''')),',',\nif(empty(split(item().Prop_0,'|')[16]),'NULL',concat('''',split(item().Prop_0,'|')[16],'''')),');')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Script Insert Table CC_DATA_FACTORY_HIST onfail",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set haveErrorRow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',item().Prop_0,''',\n\t''',replace(activity('Script Insert Table CC_PROFILE_CHANGE').Error.Message,'''','\"'),''',\n\t''E''\n\t)')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set haveErrorRow",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Script Insert Table CC_PROFILE_CHANGE",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "haveErrorRow",
										"value": {
											"value": "@bool(true)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If have Error Record",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('haveErrorRow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update CC_DATA_FACTORY Success",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Update CC_DATA_FACTORY haveErrorRow is true",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertUpdateCaBillingProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup File dat",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter Start With 02",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup File dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup File dat').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().Prop_0,'02')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Start With 02",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Start With 02').output.Value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Set accntId",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set recordLine",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "accntId",
										"value": {
											"value": "@if(empty(split(item().Prop_0,'|')[1]),'NULL',split(item().Prop_0,'|')[1])",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set billingAccntId",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set accntId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "billingAccntId",
										"value": {
											"value": "@if(empty(split(item().Prop_0,'|')[2]),'NULL',split(item().Prop_0,'|')[2])",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set statusCd",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set billingAccntId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "statusCd",
										"value": {
											"value": "@if(empty(split(item().Prop_0,'|')[3]),'NULL',split(item().Prop_0,'|')[3])",
											"type": "Expression"
										}
									}
								},
								{
									"name": "If accnt is null",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set statusCd",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(variables('accntId'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Script Insert Table CC_UPDATE_CA_BILLING",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabase1",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "\t@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_BILLING_CAT_SUBCAT\n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tACCNT_ID,\n\tBILLING_ACCNT_ID,\n\tSTATUS_CD,\n\tDATA_ID,\n\tSTATUS,\n\tREMARK) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t',pipeline().parameters.CREDIT_USER,',\n\t''',variables('accntId'),''',\n\t''',variables('billingAccntId'),''',\n\t''',variables('statusCd'),''',\n\t',pipeline().parameters.dataId,',\n\t''S'',''',\n\tif(empty(variables('billingAccntId')),'billing accntId data not found',concat(\n\tif(empty(variables('statusCd')),'statusCd data not found and default is Inactive',null))),''');')",
																"type": "Expression"
															}
														}
													]
												}
											},
											{
												"name": "Script Insert Table CC_DATA_FACTORY_HIST onfail",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "Set haveErrorRow",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabase1",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',item().Prop_0,''',\n\t''',replace(activity('Script Insert Table CC_UPDATE_CA_BILLING').Error.Message,'''','\"'),''',\n\t''E''\n\t)')",
																"type": "Expression"
															}
														}
													]
												}
											},
											{
												"name": "Set haveErrorRow",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Script Insert Table CC_UPDATE_CA_BILLING",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "haveErrorRow",
													"value": {
														"value": "@bool(true)",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Script Insert Table CC_DATA_FACTORY_HIST onfail_copy1",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabase1",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',variables('recordLine'),''',\n\t''accntId data not found'',\n\t''E''\n\t)')",
																"type": "Expression"
															}
														}
													]
												}
											}
										]
									}
								},
								{
									"name": "Set recordLine",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "recordLine",
										"value": {
											"value": "@item().Prop_0",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If have Error Record",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('haveErrorRow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update CC_DATA_FACTORY Success",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Update CC_DATA_FACTORY haveErrorRow is true",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					},
					"accntId": {
						"type": "String"
					},
					"billingAccntId": {
						"type": "String"
					},
					"statusCd": {
						"type": "String"
					},
					"recordLine": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewCreateFileOutput')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "insert response file onprocess",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tRES_TYPE,\n\tSTATUS,\n\tFILE_NAME) OUTPUT INSERTED.RES_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.fileType,''',\n\t''O'',''',pipeline().parameters.fileName,''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set resId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "insert response file onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "resId",
							"value": {
								"value": "@string(first(first(activity('insert response file onprocess').output.resultSets).rows).RES_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup file detail",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set resId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT COALESCE(FILE_LINE+''|''+ERROR_MSG ,FILE_LINE) AS errorLine, STATUS AS status \n        FROM CREDIT_DEV.CC_TEMP_FILE_DETAIL \n        WHERE FILE_ID = ',pipeline().parameters.fileId,' ORDER BY FILE_DTL_ID;')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "If not Have Archive",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup file detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.fileNameArchive,string(null) )",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute createFileAndFileArchive",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewCreateFileOutputAndArchive",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"fileType": {
												"value": "@pipeline().parameters.fileType",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"fileId": {
												"value": "@pipeline().parameters.fileId",
												"type": "Expression"
											},
											"fileNameArchive": {
												"value": "@pipeline().parameters.fileNameArchive",
												"type": "Expression"
											},
											"countRecord": {
												"value": "@activity('Lookup file detail').output.count",
												"type": "Expression"
											},
											"resId": {
												"value": "@variables('resId')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert response file ExceptionError",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set error exception_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',variables('exceptionMessage'),'''  WHERE RES_ID =',variables('resId'),'')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set error exception_copy1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Execute createFileAndFileArchive",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "exceptionMessage",
										"value": {
											"value": "@substring(concat('Datafac Exception ',replace(string(activity('Execute createFileAndFileArchive')),'''','''''')),0,499)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute createFileAndNotArchive",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewCreateFileOutputNotArchive",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"fileType": {
												"value": "@pipeline().parameters.fileType",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"fileId": {
												"value": "@pipeline().parameters.fileId",
												"type": "Expression"
											},
											"countRecord": {
												"value": "@activity('Lookup file detail').output.count",
												"type": "Expression"
											},
											"resId": {
												"value": "@variables('resId')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert response file ExceptionError 1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set error exception",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',variables('exceptionMessage'),'''  WHERE RES_ID =',variables('resId'),'')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set error exception",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Execute createFileAndNotArchive",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "exceptionMessage",
										"value": {
											"value": "@substring(concat('Datafac Exception ',replace(string(activity('Execute createFileAndNotArchive')),'''','''''')),0,499)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"fileType": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"fileId": {
						"type": "string"
					},
					"fileNameArchive": {
						"type": "string"
					}
				},
				"variables": {
					"resId": {
						"type": "String"
					},
					"switchCaseVal": {
						"type": "String"
					},
					"exceptionMessage": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewCreateFileOutputAndArchive')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewCreateFileOutputNotArchive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewDataFactoryInsertBillingAccountNoProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup File dat",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter Start With 02",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup File dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup File dat').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().Prop_0,'02')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Start With 02",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Start With 02').output.Value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Script Insert Table CC_BILLING_REVIEW",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_BILLING_REVIEW \n    (ROW_ID,\n\tCREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tACCNT_NO,\n\tACCNT_CATEGORY,\n\tACCNT_SUB_CATEGORY,\n\tBILL_CYCLE,\n\tPAYMENT_METHOD,\n\tMASTER_ACCNT_ID,\n\tSTATUS_CD,\n\tBILLING_STATUS_CD,\n\tREGISTER_DT,\n\tFBB_FLAG,\n\tCOUNT_SME_MOBILE,\n\tPOST_PAID_FLAG) VALUES ('\n    ,if(empty(split(item().Prop_0,'|')[1]),'NULL',concat('''',split(item().Prop_0,'|')[1],'''')),',',\nif(empty(split(item().Prop_0,'|')[2]),'NULL',concat('''',split(item().Prop_0,'|')[2],'''')),',',\nif(empty(split(item().Prop_0,'|')[3]),'NULL',concat('''',split(item().Prop_0,'|')[3],'''')),',',\nif(empty(split(item().Prop_0,'|')[4]),'NULL',concat('''',split(item().Prop_0,'|')[4],'''')),',',\nif(empty(split(item().Prop_0,'|')[5]),'NULL',concat('''',split(item().Prop_0,'|')[5],'''')),',',\nif(empty(split(item().Prop_0,'|')[6]),'NULL',concat('''',split(item().Prop_0,'|')[6],'''')),',',\nif(empty(split(item().Prop_0,'|')[7]),'NULL',concat('''',split(item().Prop_0,'|')[7],'''')),',',\nif(empty(split(item().Prop_0,'|')[8]),'NULL',concat('''',split(item().Prop_0,'|')[8],'''')),',',\nif(empty(split(item().Prop_0,'|')[9]),'NULL',concat('''',split(item().Prop_0,'|')[9],'''')),',',\nif(empty(split(item().Prop_0,'|')[10]),'NULL',concat('''',split(item().Prop_0,'|')[10],'''')),',',\nif(empty(split(item().Prop_0,'|')[11]),'NULL',concat('''',split(item().Prop_0,'|')[11],'''')),',',\nif(empty(split(item().Prop_0,'|')[12]),'NULL',concat('''',split(item().Prop_0,'|')[12],'''')),',',\nif(empty(split(item().Prop_0,'|')[13]),'NULL',concat('''',split(item().Prop_0,'|')[13],'''')),',',\nif(empty(split(item().Prop_0,'|')[14]),'NULL',concat('''',split(item().Prop_0,'|')[14],'''')),',',\nif(empty(split(item().Prop_0,'|')[15]),'NULL',concat('''',split(item().Prop_0,'|')[15],'''')),',',\nif(empty(split(item().Prop_0,'|')[16]),'NULL',concat('''',split(item().Prop_0,'|')[16],'''')),',',\nif(empty(split(item().Prop_0,'|')[17]),'NULL',concat('''',split(item().Prop_0,'|')[17],'''')),');')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Script Insert Table CC_DATA_FACTORY_HIST onfail",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set haveErrorRow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',item().Prop_0,''',\n\t''',replace(activity('Script Insert Table CC_BILLING_REVIEW').Error.Message,'''','\"'),''',\n\t''E''\n\t)')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set haveErrorRow",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Script Insert Table CC_BILLING_REVIEW",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "haveErrorRow",
										"value": {
											"value": "@bool(true)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Success_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If have Error Record",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('haveErrorRow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update CC_DATA_FACTORY Success",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Update CC_DATA_FACTORY Success_copy1_copy1",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					},
					"fileDatNameNotExension": {
						"type": "String"
					},
					"fileDatExension": {
						"type": "String"
					},
					"fileSyncNotExension": {
						"type": "String"
					},
					"fileSyncExension": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewDataFactorySendBilingNoProcesFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "insert CC_DATA_FACTORY onprocess",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set ba script Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.DATA_TYPE,''',\n\t''P'',''Process review send billing account count ',if(greaterOrEquals(sub(pipeline().parameters.count,int(variables('offset'))),float(pipeline().parameters.limitPerRound)),pipeline().parameters.limitPerRound,sub(pipeline().parameters.count,int(variables('offset')))),''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update End Process",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CC_CreateFileAndArchiveHaveDatName",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',substring(concat('CC_ReviewDataFactorySendBilingNoProcessAccountNoList Exception :',replace(activity('CC_CreateFileAndArchiveHaveDatName').Error.Message,'''','\"')),0,if(less(length(replace(activity('CC_CreateFileAndArchiveHaveDatName').Error.Message,'''','\"')),499),length(replace(activity('CC_CreateFileAndArchiveHaveDatName').Error.Message,'''','\"')),499)),''' WHERE DATA_ID =',string(first(first(activity('insert CC_DATA_FACTORY onprocess').output.resultSets).rows).DATA_ID),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update End Process Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CC_CreateFileAndArchiveHaveDatName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tFILE_NAME = ',concat('''',variables('fileName'),''''),',\n\tFILE_NAME_SYNC = ',concat('''',variables('fileNameArchive'),''''),',\n\tFILE_PATH = ''',pipeline().parameters.outputPath,''',\n\tSTATUS = ''S'',\n\tDESCRIPTION = ''',concat('Create File : ',variables('fileName'),' success'),''' WHERE DATA_ID =',string(first(first(activity('insert CC_DATA_FACTORY onprocess').output.resultSets).rows).DATA_ID),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set ba script Query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set offset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "baScriptQuery",
							"value": {
								"value": "@concat('SELECT ''02|''+ COALESCE(TEMP.BILLING_ACCNT_ID+''|''+TEMP.ACCNT_NO,TEMP.BILLING_ACCNT_ID+''|'',''|''+TEMP.ACCNT_NO) AS LINE\nFROM (SELECT B.BILLING_ACCNT_ID, B.ACCNT_NO\n  FROM ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE B \n WHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \n   AND B.CL_LEVEL = ''BA''\n   AND ISNULL(B.CREDIT_LIMIT,0) > 0\n   AND B.LAST_REVIEW_DAT IS NULL  \n   AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) >= \n\t(SELECT top 1 CAST(val1 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'') \t     \n   AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) < \n\t((SELECT top 1 CAST(val1 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'') \n\t  + \n\t(SELECT top 1 CAST(val3 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' )\n\t)\nUNION ALL\nSELECT B.BILLING_ACCNT_ID,B.ACCNT_NO\n  FROM ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE B \n WHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \n   AND B.CL_LEVEL = ''BA''\n   AND ISNULL(B.CREDIT_LIMIT,0) > 0\n   AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) >= \n\t\t((SELECT top 1 CAST(val1 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'') \n\t\t + \n\t     (SELECT top 1 CAST(val3 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' )\n\t     )\n  AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE())  <=  ( SELECT top 1 CAST(lov_val1 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CFG_LOV c WHERE LOV_TYPE = ''CC_CUSTOMER_NEW_OLD'' and lov_name = ''Existing'' and active_flg = ''Y'' )      \n  AND ((B.LAST_REVIEW_DAT is null)\n        or ( B.LAST_REVIEW_DAT < cast(DATEADD(month, -(SELECT top 1 CAST(val3 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y''), GETDATE()+1) As Date) )\n\t  ) \nUNION ALL\t  \nSELECT B.BILLING_ACCNT_ID,B.ACCNT_NO\n  FROM ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE B \n WHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \n   AND B.CL_LEVEL = ''BA''\n   AND ISNULL(B.CREDIT_LIMIT,0) > 0\n  AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE())  >= ( SELECT top 1 CAST(val5 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' ) \n  AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) < \n\t\t((SELECT top 1 CAST(val5 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg =''Y'') \n\t\t + \n\t     (SELECT top 1 CAST(val7 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' )\n\t     )   \n  AND  ((B.LAST_REVIEW_DAT is null)\n        or ( B.LAST_REVIEW_DAT < cast(DATEADD(month, (SELECT top 1 CAST(val5 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y''), B.BA_REGISTER_DT) As Date) )\n\t) \nUNION ALL\nSELECT B.BILLING_ACCNT_ID, B.ACCNT_NO\n  FROM ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE B \n WHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \n   AND B.CL_LEVEL = ''BA''\n   AND ISNULL(B.CREDIT_LIMIT,0) > 0\n   AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) >= \n\t\t((SELECT top 1 CAST(val5 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'') \n\t\t + \n\t     (SELECT top 1 CAST(val7 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' )\n\t     )\n  AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE())  >= ( SELECT top 1 CAST(val5 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' ) \n  AND B.LAST_REVIEW_DAT < cast(DATEADD(month, -(SELECT top 1 CAST(val7 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y''), GETDATE())+1 As Date)  \nUNION ALL  \nSELECT B.BILLING_ACCNT_ID ,B.ACCNT_NO\nFROM ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE B \nINNER JOIN ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN C ON C.BILLING_ACCOUNT_NUM = B.ACCNT_NO AND C.REASON_SUBCODE IN(''1863'',''1864'') AND C.ACTION_DTM < CAST(GETDATE() AS DATE) \nWHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \nAND B.CL_LEVEL = ''BA'' AND ISNULL(B.CREDIT_LIMIT,0) > 0\n)TEMP\nGROUP BY TEMP.BILLING_ACCNT_ID,TEMP.ACCNT_NO\nORDER BY TEMP.ACCNT_NO OFFSET ',variables('offset'),' ROWS FETCH NEXT ',string(int(pipeline().parameters.limitPerRound)),' ROWS ONLY')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set offset",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "offset",
							"value": {
								"value": "@string(mul(sub(pipeline().parameters.round,1),int(pipeline().parameters.limitPerRound)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CC_CreateFileAndArchiveHaveDatName",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set fileName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set fileNameArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set script Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_CreateFileAndArchiveHaveDatName",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"fileName": {
									"value": "@variables('fileName')",
									"type": "Expression"
								},
								"fileNameArchive": {
									"value": "@variables('fileNameArchive')",
									"type": "Expression"
								},
								"scriptQuery": {
									"value": "@variables('scriptQuery')",
									"type": "Expression"
								},
								"outputPath": {
									"value": "@pipeline().parameters.outputPath",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set processTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "insert CC_DATA_FACTORY onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "processTime",
							"value": {
								"value": "@formatDateTime(convertTimeZone(addminutes(utcnow(),pipeline().parameters.round),'UTC','North Asia Standard Time'),'yyyyMMdd_HHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileNameArchive",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.sync')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.',pipeline().parameters.fileTypeOutputFile)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set script Query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "scriptQuery",
							"value": {
								"value": "@concat('SELECT\n\t''01|'' + ''',variables('processTime'),''' AS LINE  \n    UNION ALL \n    SELECT T.LINE FROM (',variables('baScriptQuery'),') T\n    UNION ALL \n    SELECT ''09|'' + CONVERT(varchar(255),COUNT(T2.LINE)) AS LINE FROM (',variables('baScriptQuery'),') T2; ')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"count": {
						"type": "float"
					},
					"round": {
						"type": "int"
					},
					"limitPerRound": {
						"type": "string"
					}
				},
				"variables": {
					"offset": {
						"type": "String"
					},
					"scriptQuery": {
						"type": "String"
					},
					"baScriptQuery": {
						"type": "String"
					},
					"processTime": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_CreateFileAndArchiveHaveDatName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewTempfileProcessFileDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set temp file dat Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "STATUS",
										"value": "S"
									},
									{
										"name": "FILE_ID",
										"value": {
											"value": "@variables('tempFileDatId')",
											"type": "Expression"
										}
									},
									{
										"name": "CREATED_BY",
										"value": {
											"value": "@pipeline().parameters.CREDIT_USER",
											"type": "Expression"
										}
									},
									{
										"name": "LAST_UPD_BY",
										"value": {
											"value": "@pipeline().parameters.CREDIT_USER",
											"type": "Expression"
										}
									},
									{
										"name": "CREATED",
										"value": {
											"value": "@convertTimeZone(utcNow(),'UTC','SE Asia Standard Time')",
											"type": "Expression"
										}
									},
									{
										"name": "LAST_UPD",
										"value": {
											"value": "@convertTimeZone(utcNow(),'UTC','SE Asia Standard Time')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CREATED",
											"type": "String"
										},
										"sink": {
											"name": "CREATED",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "CREATED_BY",
											"type": "String"
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LAST_UPD",
											"type": "String"
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"name": "LAST_UPD_BY",
											"type": "String"
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "FILE_LINE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "FILE_ID",
											"type": "String"
										},
										"sink": {
											"name": "FILE_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "STATUS",
											"type": "String"
										},
										"sink": {
											"name": "STATUS",
											"type": "String",
											"physicalType": "char"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CCTableFileTempDetailSchemaUAT",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Insert CC_TEMP_FILE_DAT",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set fileNameArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tFILE_TYPE,\n\tFILE_NAME,\n\tFILE_NAME_ARCHIVE,\n\tFILE_PROCESS_TIME,\n\tSTATUS) OUTPUT INSERTED.FILE_ID  \n\tVALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.FILE_TYPE,''',\n\t''',pipeline().parameters.fileDatName,''',\n\t''',variables('fileNameArchive'),''',\n\t''',variables('fileProcessTime'),''',\n\t''O'');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set temp file dat Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Insert CC_TEMP_FILE_DAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "tempFileDatId",
							"value": {
								"value": "@string(first(first(activity('Insert CC_TEMP_FILE_DAT').output.resultSets).rows).FILE_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Move Data Dat Succes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clean Up File line Null",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE\n\t',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''S''',\n\t', DESCRIPTION = ''Insert data on file update ',pipeline().parameters.FILE_UPDATE_TYPE,' complete''',\n\t' WHERE FILE_ID =',variables('tempFileDatId'),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Move Data Dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE\n\t',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E''',\n\t''', DESCRIPTION = ''', substring(concat('Datafac Exception ',replace(string(activity('Copy data to CC_TEMP_FILE_DETAIL')),'''','''''')),0,499),'''',\n\t' WHERE FILE_ID =',variables('tempFileDatId'),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set fileProcessTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "update file dat onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileProcessTime",
							"value": {
								"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','North Asia Standard Time'),'yyyyMMddHHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileNameArchive",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileProcessTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@concat(variables('fileDatNameNotExension'),'_',variables('fileProcessTime'),'.',variables('fileDatExension'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "update file dat onprocess",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set description on process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''P'',',\n\t' DESCRIPTION = ''',variables('descriptionOnprocess'),'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Lookup FIle Dat",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set fileDatExension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "update review End Process Success",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move Data Dat Succes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''S''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update review End Process Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move Data Dat Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''', substring(concat('Datafac Exception ',replace(string(activity('Copy data to CC_TEMP_FILE_DETAIL')),'''','''''')),0,499),'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clean Up File line Null",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_DETAIL '\n    ,'WHERE FILE_ID = ',variables('tempFileDatId'),' AND FILE_LINE IS NULL;')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set fileDatNameNotExtension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileSyncExension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatNameNotExension",
							"value": {
								"value": "@if(greater(length(split(pipeline().parameters.fileDatName,'.')),2),join(take(split(pipeline().parameters.fileDatName,'.'),sub(length(split(pipeline().parameters.fileDatName,'.')),1)),'.'),split(pipeline().parameters.fileDatName,'.')[0])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileDatExension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileDatNameNotExtension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatExension",
							"value": {
								"value": "@split(pipeline().parameters.fileDatName,'.')[sub(length(split(pipeline().parameters.fileDatName,'.')),1)]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileSyncNameNotExtension",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileSyncNotExension",
							"value": {
								"value": "@if(greater(length(split(pipeline().parameters.fileSyncName,'.')),2),join(take(split(pipeline().parameters.fileSyncName,'.'),sub(length(split(pipeline().parameters.fileSyncName,'.')),1)),'.'),split(pipeline().parameters.fileSyncName,'.')[0])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileSyncExension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileSyncNameNotExtension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileSyncExension",
							"value": {
								"value": "@split(pipeline().parameters.fileSyncName,'.')[sub(length(split(pipeline().parameters.fileSyncName,'.')),1)]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set description on process",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup FIle Dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "descriptionOnprocess",
							"value": {
								"value": "@concat('Process file name : ',pipeline().parameters.fileDatName,' total count ',string(length(activity('Lookup FIle Dat').output.value)),' record -> count process ',if(equals(pipeline().parameters.CREDIT_USER,'DATA_FAC_UPDATE_PAYMENT'),string(length(activity('Lookup FIle Dat').output.value)),string(sub(length(activity('Lookup FIle Dat').output.value),2))),' record.')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Move Path is Empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Move Data Dat Succes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(pipeline().parameters.moveInputPath)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Move FIle Sync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inDir": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"outDir": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"inName": {
												"value": "@pipeline().parameters.fileSyncName",
												"type": "Expression"
											},
											"outName": {
												"value": "@concat(variables('fileSyncNotExension'),'_',variables('fileProcessTime'),'.',variables('fileSyncExension'))",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Move FIle Dat",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inDir": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"outDir": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"inName": {
												"value": "@pipeline().parameters.fileDatName",
												"type": "Expression"
											},
											"outName": {
												"value": "@variables('fileNameArchive')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "update review End Process Move file sync Error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Move FIle Sync",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "update review End Process Move file dat Error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Move FIle Dat",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileDatName": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					},
					"reviewId": {
						"type": "string"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessTime": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"tempFileDatId": {
						"type": "String"
					},
					"fileDatNameNotExension": {
						"type": "String"
					},
					"fileDatExension": {
						"type": "String"
					},
					"fileSyncNotExension": {
						"type": "String"
					},
					"fileSyncExension": {
						"type": "String"
					},
					"descriptionOnprocess": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]"
			]
		}
	]
}