{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "amtbsa"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ResReviewCreditLimit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupSyncFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.sync",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ResReviewSyncFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyDataToTable",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupSyncFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@{activity('LookupSyncFile').output.firstRow.Prop_0}",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "BA_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "FLAG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "DATE",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ResReviewCreditLimitData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCResReviewTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DeleteDataFile",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyDataToTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ResReviewCreditLimitData",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "DeleteSyncFile",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteDataFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ResReviewSyncFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-19T03:16:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResReviewCreditLimitCheckSize')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupSyncFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.sync",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ResReviewSyncFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GetFileMetadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LookupSyncFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ResReviewCreditLimitDataMatadata",
								"type": "DatasetReference",
								"parameters": {
									"filleName": {
										"value": "@{activity('LookupSyncFile').output.firstRow.Prop_0}",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFileMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetFileMetadata').output.size,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyDataToTable",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@{activity('LookupSyncFile').output.firstRow.Prop_0}",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"validateDataConsistency": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"type": "String",
														"ordinal": 1
													},
													"sink": {
														"name": "BA_NO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 2
													},
													"sink": {
														"name": "FLAG",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 3
													},
													"sink": {
														"name": "DATE",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ResReviewCreditLimitData",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "CCResReviewTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "DeleteDataFile",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyDataToTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ResReviewCreditLimitData",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "DeleteSyncFile",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "DeleteDataFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ResReviewSyncFile",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-19T03:16:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ProcessFileError')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute arpu",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_CreateFileError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"FILE_TYPE": "RESPONSE_FILE_ARPU",
								"CREDIT_USER": "ARPU_DATA_FAC"
							}
						}
					},
					{
						"name": "Execute ba payment",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_CreateFileError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"FILE_TYPE": "RESPONSE_FILE_BA_PAYMENT",
								"CREDIT_USER": "BA_PAYMENT_DATA_FAC"
							}
						}
					},
					{
						"name": "Execute credit grade",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_CreateFileError",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"FILE_TYPE": "RESPONSE_FILE_CREDIT_GRADE",
								"CREDIT_USER": "CREDIT_GRADE_DATA_FAC"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ProcessFileSync')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Read File Sync",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get File size Dat",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Set For Each File Dat Sizer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileDatName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"size"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If file size equal",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get File size Dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('fileDatSize'), string(string(activity('Get File size Dat').output.size)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "insert file dat data not mapping",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.LOV_TYPE_REVIEW,''',\n\t''E'',\n\t''file name data not found/file size no mapping file result ',pipeline().parameters.fileName,''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute ProcessFileDat",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ProcessFileDat",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileDatName": {
												"value": "@variables('fileDatName')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@pipeline().parameters.FILE_TYPE",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"fileSyncName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"CC_TEMP_FILE_DETAIL": {
												"value": "@pipeline().parameters.CC_TEMP_FILE_DETAIL",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Setfor file Dat Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Read File Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatName",
							"value": {
								"value": "@split(activity('Read File Sync').output.firstRow.Prop_0,'|')[0]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set For Each File Dat Sizer",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Setfor file Dat Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatSize",
							"value": {
								"value": "@split(activity('Read FIle Sync').output.firstRow.Prop_0,'|')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "insert file dat data not mapping file not found",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Get File size Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.LOV_TYPE_REVIEW,''',\n\t''E'',\n\t''file name data not found/file size no mapping file result ',pipeline().parameters.fileName,''');')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileName": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"LOV_TYPE_REVIEW": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"CC_TEMP_FILE_DETAIL": {
						"type": "string"
					}
				},
				"variables": {
					"fileDatName": {
						"type": "String"
					},
					"fileDatSize": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_FindFileInDir')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get All FIle in Config directory",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterPath",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Filter file Sync",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get All FIle in Config directory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All FIle in Config directory').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.prefixInputFile),endswith(item().name,pipeline().parameters.fileTypeInputFile))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter file Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter file Sync').output.Value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute ProcessFileSync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ProcessFileSync",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileName": {
												"value": "@item().name",
												"type": "Expression"
											},
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@pipeline().parameters.LOV_TYPE_REVIEW",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@pipeline().parameters.FILE_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"CC_TEMP_FILE_DETAIL": {
												"value": "@pipeline().parameters.CC_TEMP_FILE_DETAIL",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"prefixInputFile": {
						"type": "string"
					},
					"fileTypeInputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"LOV_TYPE_REVIEW": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"CC_TEMP_FILE_DETAIL": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ProcessFileSync')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_UpdateArpu')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value in Clound Storage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('lovType'),''' AND c.LOV_NAME = ''',variables('lovName'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Clear Data Temp Table Detail",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE_DETAIL \n    WHERE FILE_ID IN(SELECT FILE_ID \n                        FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n                        WHERE STATUS = ''S'' \n                        AND FILE_TYPE = ''',variables('FILE_TYPE'),''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear Data Temp Table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n            WHERE STATUS = ''S'' \n            AND FILE_TYPE = ''',variables('FILE_TYPE'),'''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Send Trigger To Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute All Process",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-15.eastasia.logic.azure.com:443/workflows/56d71c5c537340e9a4eaeaa2bf077cf9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=g6M74X5kVzzFafIXxbgitAoLVnhlQjZK7ZvTgV8jBpE",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json('{\"msg\":\"start cc-review-update-payment-queue-dev\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set inputPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Configval is nul or Some Config val is Null",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "inputPath",
							"value": {
								"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val1",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileTypeInputFile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set inputPath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileTypeInputFile",
							"value": {
								"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val4",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set prefixInputFile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileTypeInputFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "prefixInputFile",
							"value": {
								"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val3",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set moveInputPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set prefixInputFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "moveInputPath",
							"value": {
								"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val7",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value in Clound Storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null)))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('lovType'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),concat('Config LOV_TYPE : ',variables('lovType'),' ,LOV_NAME : ',variables('lovName'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Execute All Process",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set moveInputPath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_FindFileInDir",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inputPath": {
									"value": "@variables('inputPath')",
									"type": "Expression"
								},
								"prefixInputFile": {
									"value": "@variables('prefixInputFile')",
									"type": "Expression"
								},
								"fileTypeInputFile": {
									"value": "@variables('fileTypeInputFile')",
									"type": "Expression"
								},
								"SCHEMA": {
									"value": "@variables('SCHEMA')",
									"type": "Expression"
								},
								"CREDIT_USER": {
									"value": "@variables('CREDIT_USER')",
									"type": "Expression"
								},
								"FILE_TYPE": {
									"value": "@variables('FILE_TYPE')",
									"type": "Expression"
								},
								"LOV_TYPE_REVIEW": {
									"value": "@variables('FILE_TYPE')",
									"type": "Expression"
								},
								"moveInputPath": {
									"value": "@variables('moveInputPath')",
									"type": "Expression"
								},
								"CC_TEMP_FILE_DETAIL": {
									"value": "@variables('TEMP_FILE_DETAIL_CREATED_BY')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_ARPU"
					},
					"FILE_TYPE": {
						"type": "String",
						"defaultValue": "REQUEST_FILE_ARPU"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DEV"
					},
					"TEMP_FILE_DETAIL_CREATED_BY": {
						"type": "String",
						"defaultValue": "CC_TEMP_FILE_DETAIL"
					},
					"moveInputPath": {
						"type": "String"
					},
					"configErrorMsg": {
						"type": "String"
					},
					"lovType": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"lovName": {
						"type": "String",
						"defaultValue": "sff_cc_arpu"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_FindFileInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_UpdateBaPayment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value in Clound Storage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('lovType'),''' AND c.LOV_NAME = ''',variables('lovName'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Clear Data Temp Table Detail",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE_DETAIL \n    WHERE FILE_ID IN(SELECT FILE_ID \n                        FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n                        WHERE STATUS = ''S'' \n                        AND FILE_TYPE = ''',variables('FILE_TYPE'),''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear Data Temp Table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n            WHERE STATUS = ''S'' \n            AND FILE_TYPE = ''',variables('FILE_TYPE'),'''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Send Trigger To Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute All Process",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-15.eastasia.logic.azure.com:443/workflows/56d71c5c537340e9a4eaeaa2bf077cf9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=g6M74X5kVzzFafIXxbgitAoLVnhlQjZK7ZvTgV8jBpE",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json('{\"msg\":\"start cc-review-update-payment-queue-dev\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set inputPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Configval is nul or Some Config val is Null",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "inputPath",
							"value": {
								"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val1",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileTypeInputFile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set inputPath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileTypeInputFile",
							"value": {
								"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val4",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set prefixInputFile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileTypeInputFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "prefixInputFile",
							"value": {
								"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val3",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set moveInputPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set prefixInputFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "moveInputPath",
							"value": {
								"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val7",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value in Clound Storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null)))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('lovType'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),concat('Config LOV_TYPE : ',variables('lovType'),' ,LOV_NAME : ',variables('lovName'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Execute All Process",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set moveInputPath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_FindFileInDir",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inputPath": {
									"value": "@variables('inputPath')",
									"type": "Expression"
								},
								"prefixInputFile": {
									"value": "@variables('prefixInputFile')",
									"type": "Expression"
								},
								"fileTypeInputFile": {
									"value": "@variables('fileTypeInputFile')",
									"type": "Expression"
								},
								"SCHEMA": {
									"value": "@variables('SCHEMA')",
									"type": "Expression"
								},
								"CREDIT_USER": {
									"value": "@variables('CREDIT_USER')",
									"type": "Expression"
								},
								"FILE_TYPE": {
									"value": "@variables('FILE_TYPE')",
									"type": "Expression"
								},
								"LOV_TYPE_REVIEW": {
									"value": "@variables('FILE_TYPE')",
									"type": "Expression"
								},
								"moveInputPath": {
									"value": "@variables('moveInputPath')",
									"type": "Expression"
								},
								"CC_TEMP_FILE_DETAIL": {
									"value": "@variables('TEMP_FILE_DETAIL_CREATED_BY')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_UPDATE_PAYMENT"
					},
					"FILE_TYPE": {
						"type": "String",
						"defaultValue": "REQUEST_FILE_UPDATE_PAYMENT"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DEV"
					},
					"TEMP_FILE_DETAIL_CREATED_BY": {
						"type": "String",
						"defaultValue": "CC_TEMP_FILE_DETAIL"
					},
					"moveInputPath": {
						"type": "String"
					},
					"configErrorMsg": {
						"type": "String"
					},
					"lovType": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"lovName": {
						"type": "String",
						"defaultValue": "sff_cc_review_cl_res"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_FindFileInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_UpdateCreditgrade')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value in Clound Storage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('lovType'),''' AND c.LOV_NAME = ''',variables('lovName'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Clear Data Temp Table Detail",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE_DETAIL \n    WHERE FILE_ID IN(SELECT FILE_ID \n                        FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n                        WHERE STATUS = ''S'' \n                        AND FILE_TYPE = ''',variables('FILE_TYPE'),''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear Data Temp Table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n            WHERE STATUS = ''S'' \n            AND FILE_TYPE = ''',variables('FILE_TYPE'),'''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Send Trigger To Logic App",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Execute All Process",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-15.eastasia.logic.azure.com:443/workflows/56d71c5c537340e9a4eaeaa2bf077cf9/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=g6M74X5kVzzFafIXxbgitAoLVnhlQjZK7ZvTgV8jBpE",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json('{\"msg\":\"start cc-review-update-payment-queue-dev\"}')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set inputPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Configval is nul or Some Config val is Null",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "inputPath",
							"value": {
								"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val1",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileTypeInputFile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set inputPath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileTypeInputFile",
							"value": {
								"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val4",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set prefixInputFile",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileTypeInputFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "prefixInputFile",
							"value": {
								"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val3",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set moveInputPath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set prefixInputFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "moveInputPath",
							"value": {
								"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val7",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value in Clound Storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null)))",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('lovType'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),concat('Config LOV_TYPE : ',variables('lovType'),' ,LOV_NAME : ',variables('lovName'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Execute All Process",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set moveInputPath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_FindFileInDir",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inputPath": {
									"value": "@variables('inputPath')",
									"type": "Expression"
								},
								"prefixInputFile": {
									"value": "@variables('prefixInputFile')",
									"type": "Expression"
								},
								"fileTypeInputFile": {
									"value": "@variables('fileTypeInputFile')",
									"type": "Expression"
								},
								"SCHEMA": {
									"value": "@variables('SCHEMA')",
									"type": "Expression"
								},
								"CREDIT_USER": {
									"value": "@variables('CREDIT_USER')",
									"type": "Expression"
								},
								"FILE_TYPE": {
									"value": "@variables('FILE_TYPE')",
									"type": "Expression"
								},
								"LOV_TYPE_REVIEW": {
									"value": "@variables('FILE_TYPE')",
									"type": "Expression"
								},
								"moveInputPath": {
									"value": "@variables('moveInputPath')",
									"type": "Expression"
								},
								"CC_TEMP_FILE_DETAIL": {
									"value": "@variables('TEMP_FILE_DETAIL_CREATED_BY')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_CREDIT_GRADE"
					},
					"FILE_TYPE": {
						"type": "String",
						"defaultValue": "REQUEST_FILE_CREDIT_GRADE"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DEV"
					},
					"TEMP_FILE_DETAIL_CREATED_BY": {
						"type": "String",
						"defaultValue": "CC_TEMP_FILE_DETAIL"
					},
					"moveInputPath": {
						"type": "String"
					},
					"configErrorMsg": {
						"type": "String"
					},
					"lovType": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"lovName": {
						"type": "String",
						"defaultValue": "sff_cc_credit_grade"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_FindFileInDir')]"
			]
		}
	]
}