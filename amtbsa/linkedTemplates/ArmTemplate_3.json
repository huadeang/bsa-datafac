{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "amtbsa"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewProcessFileSync')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each file Sync",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.fileNameList",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute CC_ReviewProcessFileSyncChildren",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewProcessFileSyncChildren",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@pipeline().parameters.LOV_TYPE_REVIEW",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@pipeline().parameters.FILE_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"FILE_UPDATE_TYPE": {
												"value": "@pipeline().parameters.FILE_UPDATE_TYPE",
												"type": "Expression"
											},
											"fileInputName": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"LOV_TYPE_REVIEW": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileNameList": {
						"type": "array"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					}
				},
				"variables": {
					"fileDatName": {
						"type": "String"
					},
					"fileDatSize": {
						"type": "String"
					},
					"reviewId": {
						"type": "String"
					},
					"fileinputName": {
						"type": "String"
					},
					"exceptionError": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewProcessFileSyncDataFactory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each file Sync",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.fileNameList",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Execute CC_ReviewProcessFileSyncChildren",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewProcessFileSyncChildrenDataFactory",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@pipeline().parameters.DATA_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"fileInputName": {
												"value": "@item().name",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@pipeline().parameters.executePipeLineName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileNameList": {
						"type": "array"
					},
					"executePipeLineName": {
						"type": "string"
					}
				},
				"variables": {
					"fileDatName": {
						"type": "String"
					},
					"fileDatSize": {
						"type": "String"
					},
					"reviewId": {
						"type": "String"
					},
					"fileinputName": {
						"type": "String"
					},
					"exceptionError": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewFindFileSyncInDir')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get All FIle in Config directory",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterPath",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If not Have file input",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Filter file Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(empty(activity('Filter file Sync').output.Value),not(activity('Get All FIle in Config directory').output.exists))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute ProcessFileSync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewProcessFileSync",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@pipeline().parameters.LOV_TYPE_REVIEW",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@pipeline().parameters.FILE_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"fileNameList": {
												"value": "@activity('Filter file Sync').output.Value",
												"type": "Expression"
											},
											"FILE_UPDATE_TYPE": {
												"value": "@pipeline().parameters.FILE_UPDATE_TYPE",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert review process file sync not have input file",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.REVIEW_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.LOV_TYPE_REVIEW,''',\n\t''S'',''File prefix : ',pipeline().parameters.prefixInputFile,' data not found in path ',pipeline().parameters.inputPath,''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter file Sync",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get All FIle in Config directory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All FIle in Config directory').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.prefixInputFile),endswith(item().name,pipeline().parameters.fileTypeInputFile))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"prefixInputFile": {
						"type": "string"
					},
					"fileTypeInputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"LOV_TYPE_REVIEW": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewProcessFileSync')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewFindFileSyncInDirDataFactory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get All FIle in Config directory",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterPath",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If not Have file input",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Filter file Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(empty(activity('Filter file Sync').output.Value),not(activity('Get All FIle in Config directory').output.exists))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute ProcessFileSync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewProcessFileSyncDataFactory",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@pipeline().parameters.DATA_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"fileNameList": {
												"value": "@activity('Filter file Sync').output.Value",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@pipeline().parameters.executePipeLineName",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert data factory when list is empty",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tFILE_PATH,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.DATA_TYPE,''',\n\t''',pipeline().parameters.inputPath,''',\n\t''S'',''File prefix : ',pipeline().parameters.prefixInputFile,'  data not found in path  ',pipeline().parameters.inputPath,''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter file Sync",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get All FIle in Config directory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All FIle in Config directory').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.prefixInputFile),endswith(item().name,pipeline().parameters.fileTypeInputFile))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"prefixInputFile": {
						"type": "string"
					},
					"fileTypeInputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"executePipeLineName": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewProcessFileSyncDataFactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewTempFileResponseFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get file Error Temp file",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT FILE_ID,FILE_TYPE,FILE_NAME,FILE_NAME_ARCHIVE,OUTPUT_PATH FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \nWHERE FILE_TYPE  LIKE ''RESPONSE_FILE%''\nORDER BY CREATED;')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "If not Have file input",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "get file Error Temp file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(activity('get file Error Temp file').output.value)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute Create file error",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewFileOutputValidate",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileErrorList": {
												"value": "@activity('get file Error Temp file').output.value",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert response file not have input file",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_RESPONSE_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tRES_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.RES_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''RESPONSE_FILE'',\n\t''S'',''Query response file data not found'');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_UAT"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "CREDIT"
					},
					"errorException": {
						"type": "String"
					},
					"RESPONST_TYPE": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ChangeCatSubCatInsertProfileChange')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear CC_PROFILE_CHANGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableCurrent",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null)))\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Pipeline FindFile indir",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewFindFileSyncInDirDataFactory",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@variables('executeDatPipeLineName')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY\n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')\n",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Clear CC_PROFILE_CHANGE",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_PROFILE_CHANGE')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DATA_FAC"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_cat_subcat_Insert_profile_change"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "CAT_SUBCAT_INSERT_PROFILE"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_INSERT_PROFILE"
					},
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"moveInputPath": {
						"type": "String"
					},
					"executeDatPipeLineName": {
						"type": "String",
						"defaultValue": "CC_ChangeCatSubcatInsertProfileChangeProcessDat"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewFindFileSyncInDirDataFactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewDataFactoryInsertBillingAccountNo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear CC_BILLING_REVIEW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config value').output),'firstRow')),\n\tor(\n\t\tor(\n\t\t\tor(\n\t\t\t\tequals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL1,'')),''),null,activity('Get Config value').output.firstRow.VAL1),null),\n\t\t\t\tequals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL3,'')),''),null,activity('Get Config value').output.firstRow.VAL3),null)\n\t\t\t),\n\t\t\tequals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL4,'')),''),null,activity('Get Config value').output.firstRow.VAL4),null)\n\t\t),\n\t\tequals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL7,'')),''),null,activity('Get Config value').output.firstRow.VAL7),null)\n\t)\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Pipeline FindFile indir",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewFindFileSyncInDirDataFactory",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@variables('executeDatPipeLineName')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL1,'')),''),null,activity('Get Config Value').output.firstRow.VAL1),null),',Input path(VAL1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL3,'')),''),null,activity('Get Config Value').output.firstRow.VAL3),null),',Prefix Input path(VAL3) ',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL4,'')),''),null,activity('Get Config Value').output.firstRow.VAL4),null),',file type Input path(VAL4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL7,'')),''),null,activity('Get Config Value').output.firstRow.VAL7),null),',Move Input path(VAL7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL1,'')),''),null,activity('Get Config Value').output.firstRow.VAL1),null),',Input path(VAL1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL3,'')),''),null,activity('Get Config Value').output.firstRow.VAL3),null),',Prefix Input path(VAL3) ',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL4,'')),''),null,activity('Get Config Value').output.firstRow.VAL4),null),',file type Input path(VAL4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL7,'')),''),null,activity('Get Config Value').output.firstRow.VAL7),null),',Move Input path(VAL7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL1,'')),''),null,activity('Get Config Value').output.firstRow.VAL1),null),',Input path(VAL1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL3,'')),''),null,activity('Get Config Value').output.firstRow.VAL3),null),',Prefix Input path(VAL3) ',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL4,'')),''),null,activity('Get Config Value').output.firstRow.VAL4),null),',file type Input path(VAL4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL7,'')),''),null,activity('Get Config Value').output.firstRow.VAL7),null),',Move Input path(VAL7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL1,'')),''),null,activity('Get Config Value').output.firstRow.VAL1),null),',Input path(VAL1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL3,'')),''),null,activity('Get Config Value').output.firstRow.VAL3),null),',Prefix Input path(VAL3) ',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL4,'')),''),null,activity('Get Config Value').output.firstRow.VAL4),null),',file type Input path(VAL4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL7,'')),''),null,activity('Get Config Value').output.firstRow.VAL7),null),',Move Input path(VAL7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Clear CC_BILLING_REVIEW",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_BILLING_REVIEW')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DATA_FAC"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_review_Insert_billing_no"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_INSERT_BA"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "REVIEW_INSERT_BA"
					},
					"executeDatPipeLineName": {
						"type": "String",
						"defaultValue": "CC_ReviewDataFactoryInsertBillingAccountNoProcessDat"
					},
					"inputPath": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"moveInputPath": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewFindFileSyncInDirDataFactory')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewUpdateArpu')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value in Clound Storage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('lovType'),''' AND c.LOV_NAME = ''',variables('lovName'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Clear Data Temp Table Detail",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE_DETAIL \n    WHERE FILE_ID IN(SELECT FILE_ID \n                        FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n                        WHERE STATUS = ''S'' \n                        AND FILE_TYPE = ''',variables('FILE_TYPE'),''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear Data Temp Table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n            WHERE STATUS = ''S'' \n            AND FILE_TYPE = ''',variables('FILE_TYPE'),'''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value in Clound Storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute All Process",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@variables('FILE_TYPE')",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@variables('REVIEW_TYPE')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"FILE_UPDATE_TYPE": {
												"value": "@variables('FILE_UPDATE_TYPE')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('REVIEW_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),concat('Config LOV_TYPE : ',variables('lovType'),' ,LOV_NAME : ',variables('lovName'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_ARPU"
					},
					"FILE_TYPE": {
						"type": "String",
						"defaultValue": "REQUEST_FILE_ARPU"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_UAT"
					},
					"moveInputPath": {
						"type": "String"
					},
					"configErrorMsg": {
						"type": "String"
					},
					"lovType": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"lovName": {
						"type": "String",
						"defaultValue": "sff_cc_arpu"
					},
					"REVIEW_TYPE": {
						"type": "String",
						"defaultValue": "sff_cc_arpu_data_fac"
					},
					"FILE_UPDATE_TYPE": {
						"type": "String",
						"defaultValue": "arpu"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewFindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewUpdateCreditgrade')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value in Clound Storage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('lovType'),''' AND c.LOV_NAME = ''',variables('lovName'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Clear Data Temp Table Detail",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE_DETAIL \n    WHERE FILE_ID IN(SELECT FILE_ID \n                        FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n                        WHERE STATUS = ''S'' \n                        AND FILE_TYPE = ''',variables('FILE_TYPE'),''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear Data Temp Table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n            WHERE STATUS = ''S'' \n            AND FILE_TYPE = ''',variables('FILE_TYPE'),'''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value in Clound Storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute All Process",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@variables('FILE_TYPE')",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@variables('REVIEW_TYPE')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"FILE_UPDATE_TYPE": {
												"value": "@variables('FILE_UPDATE_TYPE')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('REVIEW_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),concat('Config LOV_TYPE : ',variables('lovType'),' ,LOV_NAME : ',variables('lovName'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_CREDIT_GRADE"
					},
					"FILE_TYPE": {
						"type": "String",
						"defaultValue": "REQUEST_FILE_CREDIT_GRADE"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_UAT"
					},
					"moveInputPath": {
						"type": "String"
					},
					"configErrorMsg": {
						"type": "String"
					},
					"lovType": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"lovName": {
						"type": "String",
						"defaultValue": "sff_cc_credit_grade"
					},
					"REVIEW_TYPE": {
						"type": "String",
						"defaultValue": "sff_cc_credit_grade_data_fac"
					},
					"FILE_UPDATE_TYPE": {
						"type": "String",
						"defaultValue": "credit grade"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewFindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewUpdatePayment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value in Clound Storage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT * from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('lovType'),''' AND c.LOV_NAME = ''',variables('lovName'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Clear Data Temp Table Detail",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE_DETAIL \n    WHERE FILE_ID IN(SELECT FILE_ID \n                        FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n                        WHERE STATUS = ''S'' \n                        AND FILE_TYPE = ''',variables('FILE_TYPE'),''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear Data Temp Table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n            WHERE STATUS = ''S'' \n            AND FILE_TYPE = ''',variables('FILE_TYPE'),'''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value in Clound Storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null)),equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute All Process",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@variables('FILE_TYPE')",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@variables('REVIEW_TYPE')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"FILE_UPDATE_TYPE": {
												"value": "@variables('FILE_UPDATE_TYPE')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('REVIEW_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),concat('Config LOV_TYPE : ',variables('lovType'),' ,LOV_NAME : ',variables('lovName'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val7,'')),''),null,activity('Get Config Value in Clound Storage').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_UPDATE_PAYMENT"
					},
					"FILE_TYPE": {
						"type": "String",
						"defaultValue": "REQUEST_FILE_UPDATE_PAYMENT"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_UAT"
					},
					"TEMP_FILE_DETAIL_CREATED_BY": {
						"type": "String",
						"defaultValue": "CC_TEMP_FILE_DETAIL"
					},
					"moveInputPath": {
						"type": "String"
					},
					"configErrorMsg": {
						"type": "String"
					},
					"lovType": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"lovName": {
						"type": "String",
						"defaultValue": "sff_cc_review_cl_res"
					},
					"REVIEW_TYPE": {
						"type": "String",
						"defaultValue": "sff_cc_review_cl_res_data_fac"
					},
					"FILE_UPDATE_TYPE": {
						"type": "String",
						"defaultValue": "payment"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewFindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_triggerTest')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CC_ReviewTempFileResponseFile",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-06-02T02:07:00",
						"timeZone": "SE Asia Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								10
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewTempFileResponseFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CC_ReviewUpdateCreditgrade",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "CC_ReviewUpdatePayment",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "CC_ReviewUpdateArpu",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-05-20T08:39:00",
						"timeZone": "SE Asia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								11
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewUpdateCreditgrade')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewUpdatePayment')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewUpdateArpu')]"
			]
		}
	]
}