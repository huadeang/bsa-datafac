{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "amtbsa"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CC_CaCreditLimitDataFatorySendAccntIdProcesLoop')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.listRound",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CC_CaCreditLimitDataFatorySendAccntIdProcesFile",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Select All Ca Status O",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_CaCreditLimitDataFatorySendAccntIdProcesFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@pipeline().parameters.prefixOutputFile",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@pipeline().parameters.fileTypeOutputFile",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@pipeline().parameters.DATA_TYPE",
												"type": "Expression"
											},
											"count": {
												"value": "@pipeline().parameters.count",
												"type": "Expression"
											},
											"round": {
												"value": "@item()",
												"type": "Expression"
											},
											"limitPerRound": {
												"value": "@pipeline().parameters.limitPerRound",
												"type": "Expression"
											},
											"listCa": {
												"value": "@activity('Select All Ca Status O').output.value",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Select All Ca Status O",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT CA_ID FROM ',pipeline().parameters.SCHEMA,'.CC_UPDATE_CA_INFO WHERE STATUS = ''O'' ORDER BY CA_ID')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlMaster",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"count": {
						"type": "float"
					},
					"listRound": {
						"type": "array"
					},
					"limitPerRound": {
						"type": "string"
					}
				},
				"variables": {
					"offset": {
						"type": "String"
					},
					"scriptQuery": {
						"type": "String"
					},
					"processTime": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ChangeCatSubCatSendBillingAccountNoChildren')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Account List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT BILLING_ACCNT_NO  FROM ',pipeline().parameters.SCHEMA,'.CC_CHANGE_CAT_SUBCAT_INFO\nORDER BY BILLING_ACCNT_NO')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "if Account List Empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Account List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(activity('Get Account List').output.value)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute ChangeCatSubcatSendBillingProcessAccountNoList",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set changeId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ChangeCatSubcatSendBillingAccoutnNoProcessAccountNoList",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@pipeline().parameters.prefixOutputFile",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@pipeline().parameters.fileTypeOutputFile",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"CHANGE_TYPE": {
												"value": "@pipeline().parameters.CHANGE_TYPE",
												"type": "Expression"
											},
											"baList": {
												"value": "@activity('Get Account List').output",
												"type": "Expression"
											},
											"changeId": {
												"value": "@variables('changeId')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Insert CC_CHANGE_CAT_SUBCAT process",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_CHANGE_CAT_SUBCAT \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tCHANGE_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.CHANGE_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.CHANGE_TYPE,''',\n\t''P'',''Process send billing account number count ',string(activity('Get Account List').output.count),' record'');')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set changeId",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Insert CC_CHANGE_CAT_SUBCAT process",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "changeId",
										"value": {
											"value": "@string(first(first(activity('Insert CC_CHANGE_CAT_SUBCAT process').output.resultSets).rows).CHANGE_ID)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Insert CC_CHANGE_CAT_SUBCAT if Empty",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_CHANGE_CAT_SUBCAT \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tCHANGE_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.CHANGE_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.CHANGE_TYPE,''',\n\t''S'',''Query Billing account no for change cat/sub cat data not found'');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"LOV_TYPE": {
						"type": "string"
					},
					"LOV_NAME": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"CHANGE_TYPE": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					}
				},
				"variables": {
					"changeId": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryProcessFileSyncChildren')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Read File Sync",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set dataId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileinputName')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get File size Dat",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Setfor file Dat Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileDatName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"size",
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If file size equal and Not exist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get File size Dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(activity('Get File size Dat').output.exists,equals(variables('fileDatSize'), string(if(contains(activity('Get File size Dat').output,'size'),activity('Get File size Dat').output.size,0))))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set executePipeLineName error message",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "executePipeLineName",
										"value": "error message file dat size not mapping"
									}
								}
							]
						}
					},
					{
						"name": "Setfor file Dat Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set For Each File Dat Sizer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatName",
							"value": {
								"value": "@split(activity('Read File Sync').output.firstRow.Prop_0,'|')[0]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set For Each File Dat Sizer",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Read File Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatSize",
							"value": {
								"value": "@split(activity('Read FIle Sync').output.firstRow.Prop_0,'|')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set dataId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "insert data factory  process file sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "dataId",
							"value": {
								"value": "@string(first(first(activity('insert data factory  process file sync').output.resultSets).rows).DATA_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileInputName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set executePipeLineName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileinputName",
							"value": {
								"value": "@pipeline().parameters.fileInputName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "insert data factory  process file sync",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set fileInputName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tFILE_PATH,\n\tFILE_NAME_SYNC,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID\t VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.DATA_TYPE,''',\n\t''',pipeline().parameters.inputPath,''',\n\t''',pipeline().parameters.fileInputName,''',\n\t''P'',''Process file name :  ',pipeline().parameters.fileInputName,''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Switch Case Execute pipeline dat",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "If file size equal and Not exist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('executePipeLineName')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "error message file dat size not mapping",
									"activities": [
										{
											"name": "update file dat data not mapping",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY  \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t'FILE_NAME = ''',variables('fileDatName'),''',',\n\t' DESCRIPTION = ''file name data not found/file size no mapping file result ',pipeline().parameters.fileInputName,'''',\n\t' WHERE DATA_ID =',variables('dataId'),';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "CC_ReviewDataFactoryInsertBillingAccountNoProcessDat",
									"activities": [
										{
											"name": "Execute CC_ReviewInsertBillingAccountNoProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_ReviewDataFactoryInsertBillingAccountNoProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "CC_ChangeCatSubcatInsertProfileChangeProcessDat",
									"activities": [
										{
											"name": "Execute CC_ChangeCatSubCatInsertProfileChangeProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertProfileChangeProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@pipeline().parameters.fileInputName",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "CC_ChangeCatSubcatInsertBillingAccountNoProcessDat",
									"activities": [
										{
											"name": "Execute ChangeCatSubCatInsertBillingAccountNoProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertBillingChangeCatSubcatProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@pipeline().parameters.fileInputName",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "CC_DataFactoryInsertOrUpdateCreditAssignProcessDat",
									"activities": [
										{
											"name": "Execute InsertOrUpdateCreditAssignProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertOrUpdateCreditAssignProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@pipeline().parameters.fileInputName",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "CC_DataFactoryInsertOrUpdateScoreValueProcessDat",
									"activities": [
										{
											"name": "Execute InsertOrUpdateScoreValueProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertOrUpdateScoreValueProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@pipeline().parameters.fileInputName",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat",
									"activities": [
										{
											"name": "Execute InsertOrUpdateNegotiationValueProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@pipeline().parameters.fileInputName",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "CC_DataFactoryInsertUpdateCaBillingProcessDat",
									"activities": [
										{
											"name": "Execute CC_DataFactoryInsertUpdateCaBillingProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertUpdateCaBillingProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Fail Not Have Pipeline Name in data factory",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Fail Not Have Pipeline Name in data factory",
										"errorCode": "400"
									}
								}
							]
						}
					},
					{
						"name": "Set executePipeLineName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "executePipeLineName",
							"value": {
								"value": "@pipeline().parameters.executePipeLineName",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileInputName": {
						"type": "string"
					},
					"executePipeLineName": {
						"type": "string"
					}
				},
				"variables": {
					"fileDatName": {
						"type": "String"
					},
					"fileDatSize": {
						"type": "String"
					},
					"dataId": {
						"type": "String"
					},
					"fileinputName": {
						"type": "String"
					},
					"exceptionError": {
						"type": "String"
					},
					"executePipeLineName": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewDataFactorySendBilingNoProcessLoop')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.listRound",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "CC_ReviewDataFactorySendBilingNoProcessAccountNoList",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewDataFactorySendBilingNoProcesFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@pipeline().parameters.prefixOutputFile",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@pipeline().parameters.fileTypeOutputFile",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@pipeline().parameters.DATA_TYPE",
												"type": "Expression"
											},
											"count": {
												"value": "@pipeline().parameters.count",
												"type": "Expression"
											},
											"round": {
												"value": "@item()",
												"type": "Expression"
											},
											"limitPerRound": {
												"value": "@pipeline().parameters.limitPerRound",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"count": {
						"type": "float"
					},
					"limitPerRound": {
						"type": "string"
					},
					"listRound": {
						"type": "array"
					}
				},
				"variables": {
					"offset": {
						"type": "String"
					},
					"scriptQuery": {
						"type": "String"
					},
					"baScriptQuery": {
						"type": "String"
					},
					"processTime": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewFileOutputValidateChildren')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set fileId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileId",
							"value": {
								"value": "@string(if(equals(trim(coalesce(string(pipeline().parameters.fileId),'')),''),null,string(pipeline().parameters.fileId)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Some val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set fileOutputpath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(or(or(equals(variables('fileId'),string(null)),equals(variables('fileName'),string(null))),equals(variables('outputPath'),string(null))),equals(variables('fileType'),string(null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute CreateFileOutPut",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewCreateFileOutput",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"fileType": {
												"value": "@variables('fileType')",
												"type": "Expression"
											},
											"fileName": {
												"value": "@variables('fileName')",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@variables('outputPath')",
												"type": "Expression"
											},
											"fileId": {
												"value": "@variables('fileId')",
												"type": "Expression"
											},
											"fileNameArchive": {
												"value": "@variables('fileNameArchive')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set errorMsg",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tRES_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.RES_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''RESPONSE_FILE'',\n\t''E'',''Temp file Val ',if(startswith(\n\tvariables('errorMessage'),','),substring(\n\tvariables('errorMessage'),1,sub(length(\n\tvariables('errorMessage')),1)),\n\tvariables('errorMessage')),' data not found.'');')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set errorMsg",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "@concat(if(equals(variables('fileId'),string(null)),',file id',''),if(equals(variables('fileName'),string(null)),',file name',''),if(equals(variables('outputPath'),string(null)),',output path',''),if(equals(variables('fileType'),string(null)),',file type',''))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set fileOutputpath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "outputPath",
							"value": {
								"value": "@string(if(equals(trim(coalesce(pipeline().parameters.outputPath,'')),''),null,pipeline().parameters.outputPath))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@string(if(equals(trim(coalesce(pipeline().parameters.fileName,'')),''),null,pipeline().parameters.fileName))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileAchriveName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileType",
							"value": {
								"value": "@string(if(equals(trim(coalesce(pipeline().parameters.fileType,'')),''),null,pipeline().parameters.fileType))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileAchriveName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@string(if(equals(trim(coalesce(pipeline().parameters.fileNameArchive,'')),''),null,pipeline().parameters.fileNameArchive))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"CREDIT_USER": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"fileId": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"fileType": {
						"type": "string"
					},
					"fileNameArchive": {
						"type": "string"
					}
				},
				"variables": {
					"resId": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileId": {
						"type": "String"
					},
					"outputPath": {
						"type": "String"
					},
					"errorMessage": {
						"type": "String"
					},
					"fileType": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"switchCaseValue": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewProcessFileSyncChildren')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Read File Sync",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set reviewId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileinputName')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get File size Dat",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Setfor file Dat Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileDatName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"size",
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If file size equal and exist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get File size Dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(activity('Get File size Dat').output.exists,equals(variables('fileDatSize'), string(string(if(contains(activity('Get File size Dat').output,'size'),activity('Get File size Dat').output?.size,0)))))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "update file dat data not mapping",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''file name data not found/file size no mapping file result ',variables('fileinputName'),'''',\n\t' WHERE REVIEW_ID =',variables('reviewId'),';')",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute ProcessFileDat",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewTempfileProcessFileDat",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileDatName": {
												"value": "@variables('fileDatName')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@pipeline().parameters.FILE_TYPE",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"fileSyncName": {
												"value": "@variables('fileinputName')",
												"type": "Expression"
											},
											"reviewId": {
												"value": "@variables('reviewId')",
												"type": "Expression"
											},
											"FILE_UPDATE_TYPE": {
												"value": "@pipeline().parameters.FILE_UPDATE_TYPE",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "update review End Process Error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set error exception",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t'    DESCRIPTION ''',variables('exceptionError'),'''',\n\t' WHERE REVIEW_ID =''',variables('reviewId'),''';')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set error exception",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Execute ProcessFileDat",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "exceptionError",
										"value": {
											"value": "@substring(concat('Datafac Exception ',replace(string(activity('Execute ProcessFileDat')),'''','''''')),0,499)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Setfor file Dat Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set For Each File Dat Sizer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatName",
							"value": {
								"value": "@split(activity('Read File Sync').output.firstRow.Prop_0,'|')[0]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set For Each File Dat Sizer",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Read File Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatSize",
							"value": {
								"value": "@split(activity('Read FIle Sync').output.firstRow.Prop_0,'|')[1]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "insert review process file sync",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set fileInputName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.REVIEW_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.LOV_TYPE_REVIEW,''',\n\t''P'',''Process :',variables('fileinputName'),''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set reviewId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "insert review process file sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "reviewId",
							"value": {
								"value": "@string(first(first(activity('insert review process file sync').output.resultSets).rows).REVIEW_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileInputName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileinputName",
							"value": {
								"value": "@pipeline().parameters.fileInputName",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"LOV_TYPE_REVIEW": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					},
					"fileInputName": {
						"type": "string"
					}
				},
				"variables": {
					"fileDatName": {
						"type": "String"
					},
					"fileDatSize": {
						"type": "String"
					},
					"reviewId": {
						"type": "String"
					},
					"fileinputName": {
						"type": "String"
					},
					"exceptionError": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ChangeCatSubCatSendBillingAccountNo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL2,VAL5,VAL6 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config value').output),'firstRow')),or(or(equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL2,'')),''),null,activity('Get Config value').output.firstRow.VAL2),null),equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL5,'')),''),null,activity('Get Config value').output.firstRow.VAL5),null)),equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL6,'')),''),null,activity('Get Config value').output.firstRow.VAL6),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute CC_ChangeCatSubCatSendBillingAccountNoChildren",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ChangeCatSubCatSendBillingAccountNoChildren",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"LOV_TYPE": {
												"value": "@variables('LOV_TYPE')",
												"type": "Expression"
											},
											"LOV_NAME": {
												"value": "@variables('LOV_NAME')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"CHANGE_TYPE": {
												"value": "@variables('CHANGE_TYPE')",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@variables('outputPath')",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@variables('prefixOutputFile')",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@variables('fileTypeOutputFile')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_CHANGE_CAT_SUBCAT \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tCHANGE_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('CHANGE_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_send_chnage_cat_sub_cat"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DEV"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "CC_CAT_SUB_CAT_SEND_BA"
					},
					"CHANGE_TYPE": {
						"type": "String",
						"defaultValue": "CHANGE_CAT_SUB_CAT_SEND_BA"
					},
					"outputPath": {
						"type": "String"
					},
					"prefixOutputFile": {
						"type": "String"
					},
					"fileTypeOutputFile": {
						"type": "String"
					},
					"changeId": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ChangeCatSubCatSendBillingAccountNoChildren')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryProcessFileSync')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each file Sync",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.fileNameList",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 20,
							"activities": [
								{
									"name": "Execute CC_ReviewProcessFileSyncChildren",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryProcessFileSyncChildren",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@pipeline().parameters.DATA_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"fileInputName": {
												"value": "@item().name",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@pipeline().parameters.executePipeLineName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileNameList": {
						"type": "array"
					},
					"executePipeLineName": {
						"type": "string"
					}
				},
				"variables": {
					"fileDatName": {
						"type": "String"
					},
					"fileDatSize": {
						"type": "String"
					},
					"reviewId": {
						"type": "String"
					},
					"fileinputName": {
						"type": "String"
					},
					"exceptionError": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryProcessFileSyncChildren')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactorySendFileProcessCrossway')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SendFileProcessCrossway",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.pipeLineProcessFileName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "CC_ReviewDataFactorySendBilingNoProcesFile",
									"activities": [
										{
											"name": "CC_ReviewDataFactorySendBilingNoProcessAccountNoList",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_ReviewDataFactorySendBilingNoProcessLoop",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"outputPath": {
														"value": "@pipeline().parameters.outputPath",
														"type": "Expression"
													},
													"prefixOutputFile": {
														"value": "@pipeline().parameters.prefixOutputFile",
														"type": "Expression"
													},
													"fileTypeOutputFile": {
														"value": "@pipeline().parameters.fileTypeOutputFile",
														"type": "Expression"
													},
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"count": {
														"value": "@pipeline().parameters.count",
														"type": "Expression"
													},
													"limitPerRound": {
														"value": "@pipeline().parameters.limitPerRound",
														"type": "Expression"
													},
													"listRound": {
														"value": "@pipeline().parameters.listRound",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "CC_CaCreditLimitDataFatorySendAccntIdProcesFile",
									"activities": [
										{
											"name": "CC_CaCreditLimitDataFatorySendAccntIdProcesFile",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_CaCreditLimitDataFatorySendAccntIdProcesLoop",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"outputPath": {
														"value": "@pipeline().parameters.outputPath",
														"type": "Expression"
													},
													"prefixOutputFile": {
														"value": "@pipeline().parameters.prefixOutputFile",
														"type": "Expression"
													},
													"fileTypeOutputFile": {
														"value": "@pipeline().parameters.fileTypeOutputFile",
														"type": "Expression"
													},
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"count": {
														"value": "@pipeline().parameters.count",
														"type": "Expression"
													},
													"listRound": {
														"value": "@pipeline().parameters.listRound",
														"type": "Expression"
													},
													"limitPerRound": {
														"value": "@pipeline().parameters.limitPerRound",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"count": {
						"type": "float"
					},
					"pipeLineProcessFileName": {
						"type": "string"
					},
					"limitPerRound": {
						"type": "string"
					},
					"listRound": {
						"type": "array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewDataFactorySendBilingNoProcessLoop')]",
				"[concat(variables('factoryId'), '/pipelines/CC_CaCreditLimitDataFatorySendAccntIdProcesLoop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewFileOutputValidate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach file error",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.fileErrorList",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute CC_ReviewFileOutputValidateChildren",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewFileOutputValidateChildren",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"fileName": {
												"value": "@item().FILE_NAME",
												"type": "Expression"
											},
											"fileId": {
												"value": "@item().FILE_ID",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@item().OUTPUT_PATH",
												"type": "Expression"
											},
											"fileType": {
												"value": "@item().FILE_TYPE",
												"type": "Expression"
											},
											"fileNameArchive": {
												"value": "@item().FILE_NAME_ARCHIVE",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileErrorList": {
						"type": "array"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					}
				},
				"variables": {
					"resId": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileId": {
						"type": "String"
					},
					"outputPath": {
						"type": "String"
					},
					"errorMessage": {
						"type": "String"
					},
					"fileType": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"switchCaseValue": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewFileOutputValidateChildren')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewProcessFileSync')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each file Sync",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.fileNameList",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "Execute CC_ReviewProcessFileSyncChildren",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewProcessFileSyncChildren",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@pipeline().parameters.LOV_TYPE_REVIEW",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@pipeline().parameters.FILE_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"FILE_UPDATE_TYPE": {
												"value": "@pipeline().parameters.FILE_UPDATE_TYPE",
												"type": "Expression"
											},
											"fileInputName": {
												"value": "@item().name",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"LOV_TYPE_REVIEW": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileNameList": {
						"type": "array"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					}
				},
				"variables": {
					"fileDatName": {
						"type": "String"
					},
					"fileDatSize": {
						"type": "String"
					},
					"reviewId": {
						"type": "String"
					},
					"fileinputName": {
						"type": "String"
					},
					"exceptionError": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewProcessFileSyncChildren')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryFindFileSyncInDir')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get All FIle in Config directory",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterPath",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If not Have file input",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Filter file Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(empty(activity('Filter file Sync').output.Value),not(activity('Get All FIle in Config directory').output.exists))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute ProcessFileSync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryProcessFileSync",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@pipeline().parameters.DATA_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"fileNameList": {
												"value": "@activity('Filter file Sync').output.Value",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@pipeline().parameters.executePipeLineName",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert data factory when list is empty",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tFILE_PATH,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.DATA_TYPE,''',\n\t''',pipeline().parameters.inputPath,''',\n\t''S'',''File prefix : ',pipeline().parameters.prefixInputFile,'  data not found in path  ',pipeline().parameters.inputPath,''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter file Sync",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get All FIle in Config directory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All FIle in Config directory').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.prefixInputFile),endswith(item().name,pipeline().parameters.fileTypeInputFile))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"prefixInputFile": {
						"type": "string"
					},
					"fileTypeInputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"executePipeLineName": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryProcessFileSync')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactorySendFileProcessCount')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get COUNT",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.ScriptCount",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "If Billing Account List is empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get COUNT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get COUNT').output.firstRow.COUNT,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Get limit",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT CAST(ISNULL(NULLIF(LOV_NAME ,''''),50000) AS NUMERIC(22,0)) AS LIMIT FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT WHERE LOV_TYPE = ''WRITE_FILE_MAX_RECORD'' AND ACTIVE_FLG = ''Y''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlMaster",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Get Count Round",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set limitPerRound",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT\n    IIF(ROUND(',activity('Get COUNT').output.firstRow.COUNT,' /(',variables('limitPerRound'),'), 0, 1)>0,\n\tROUND(',activity('Get COUNT').output.firstRow.COUNT,' /(',variables('limitPerRound'),'), 0, 1)+\n\t(IIF(',activity('Get COUNT').output.firstRow.COUNT,'%(',variables('limitPerRound'),') > 0,1,0)),1) AS COUNT_ROUND;')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlMaster",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Set limitPerRound",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get limit",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "limitPerRound",
										"value": {
											"value": "@string(activity('Get limit').output.firstRow.LIMIT)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CC_DataFactorySendFileProcessCrossway",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Count Round",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactorySendFileProcessCrossway",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@pipeline().parameters.prefixOutputFile",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@pipeline().parameters.fileTypeOutputFile",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@pipeline().parameters.DATA_TYPE",
												"type": "Expression"
											},
											"count": {
												"value": "@activity('Get COUNT').output.firstRow.COUNT",
												"type": "Expression"
											},
											"pipeLineProcessFileName": {
												"value": "@pipeline().parameters.pipeLineProcessFileName",
												"type": "Expression"
											},
											"limitPerRound": {
												"value": "@variables('limitPerRound')",
												"type": "Expression"
											},
											"listRound": {
												"value": "@range(1,int(activity('Get Count Round').output.firstRow.COUNT_ROUND) )",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert when Billing Account List is empty",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.DATA_TYPE,''',\n\t''S'',''',pipeline().parameters.messageWhenCountZero,''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"ScriptCount": {
						"type": "string"
					},
					"messageWhenCountZero": {
						"type": "string"
					},
					"pipeLineProcessFileName": {
						"type": "string"
					}
				},
				"variables": {
					"fileName": {
						"type": "String"
					},
					"fileSyncName": {
						"type": "String"
					},
					"pocessTime": {
						"type": "String"
					},
					"countBa": {
						"type": "String"
					},
					"limitPerRound": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactorySendFileProcessCrossway')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewFindFileSyncInDir')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get All FIle in Config directory",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterPath",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If not Have file input",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Filter file Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(empty(activity('Filter file Sync').output.Value),not(activity('Get All FIle in Config directory').output.exists))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute ProcessFileSync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewProcessFileSync",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@pipeline().parameters.LOV_TYPE_REVIEW",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@pipeline().parameters.FILE_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"fileNameList": {
												"value": "@activity('Filter file Sync').output.Value",
												"type": "Expression"
											},
											"FILE_UPDATE_TYPE": {
												"value": "@pipeline().parameters.FILE_UPDATE_TYPE",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert review process file sync not have input file",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.REVIEW_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.LOV_TYPE_REVIEW,''',\n\t''S'',''File prefix : ',pipeline().parameters.prefixInputFile,' data not found in path ',pipeline().parameters.inputPath,''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter file Sync",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get All FIle in Config directory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All FIle in Config directory').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.prefixInputFile),endswith(item().name,pipeline().parameters.fileTypeInputFile))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"prefixInputFile": {
						"type": "string"
					},
					"fileTypeInputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"LOV_TYPE_REVIEW": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewProcessFileSync')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewTempFileResponseFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get file Error Temp file",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT FILE_ID,FILE_TYPE,FILE_NAME,FILE_NAME_ARCHIVE,OUTPUT_PATH FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \nWHERE FILE_TYPE  LIKE ''RESPONSE_FILE%''\nORDER BY CREATED;')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "If not Have file input",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "get file Error Temp file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(activity('get file Error Temp file').output.value)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute Create file error",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewFileOutputValidate",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileErrorList": {
												"value": "@activity('get file Error Temp file').output.value",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert response file not have input file",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_RESPONSE_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tRES_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.RES_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''RESPONSE_FILE'',\n\t''S'',''Query response file data not found'');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_UAT"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "CREDIT"
					},
					"errorException": {
						"type": "String"
					},
					"RESPONST_TYPE": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewFileOutputValidate')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_CaCreditLimitDataFatorySendAccntId')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL2,VAL5,VAL6 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config value').output),'firstRow')),or(or(equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL2,'')),''),null,activity('Get Config value').output.firstRow.VAL2),null),equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL5,'')),''),null,activity('Get Config value').output.firstRow.VAL5),null)),equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL6,'')),''),null,activity('Get Config value').output.firstRow.VAL6),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set outputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "outputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.VAL2",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixOutputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set outputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixOutputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.VAL5",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeOutputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixOutputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeOutputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.VAL6",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute CC_ReviewSendBilingNo",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set fileTypeOutputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactorySendFileProcessCount",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@variables('outputPath')",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@variables('prefixOutputFile')",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@variables('fileTypeOutputFile')",
												"type": "Expression"
											},
											"ScriptCount": {
												"value": "@concat('SELECT COUNT(T.LINE) AS COUNT FROM (SELECT ACCNT_ID AS LINE FROM ',variables('SCHEMA'),'.CC_UPDATE_CA_INFO WHERE STATUS = ''O'') T;')",
												"type": "Expression"
											},
											"messageWhenCountZero": "Query Customer account id for send to sff data not found",
											"pipeLineProcessFileName": {
												"value": "@variables('pipeLineProcessFileName')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_UAT"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "sff_cc_ca_accnt_id_req"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_SEND_CA"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "CA_CL_SEND_CA"
					},
					"outputPath": {
						"type": "String"
					},
					"prefixOutputFile": {
						"type": "String"
					},
					"fileTypeOutputFile": {
						"type": "String"
					},
					"pipeLineProcessFileName": {
						"type": "String",
						"defaultValue": "CC_CaCreditLimitDataFatorySendAccntIdProcesFile"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactorySendFileProcessCount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertBillingChangeCatSubCat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data CC_BILLING_CAT_SUBCAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableCurrent",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Pipeline FindFile indir",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@variables('executeDatPipeLineName')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert data factory  process file sync",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Execute Pipeline FindFile indir",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tFILE_PATH,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID\t VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''',variables('inputPath'),''',\n\t''E'',''',substring(concat('Exception Pipeline FindFile indir :  ',replace(activity('Execute Pipeline FindFile indir').Error.Message,'''','\"')),0,499),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY\n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Clear Data CC_BILLING_CAT_SUBCAT",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_BILLING_CAT_SUBCAT')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DATA_FAC"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_cat_subcat_Insert_billing_no"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "CAT_SUBCAT_INSERT_BA"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_INSERT_BA"
					},
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"moveInputPath": {
						"type": "String"
					},
					"executeDatPipeLineName": {
						"type": "String",
						"defaultValue": "CC_ChangeCatSubcatInsertBillingAccountNoProcessDat"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryFindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateCreditAssign')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableCurrent",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Pipeline FindFile indir",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@variables('executeDatPipeLineName')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY\n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DATA_FAC"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_credit_assign"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "INSERT_UPDATE_CREDIT_ASSIGN"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_INSERT_UPDATE_CREDIT_ASSIGN"
					},
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"moveInputPath": {
						"type": "String"
					},
					"executeDatPipeLineName": {
						"type": "String",
						"defaultValue": "CC_DataFactoryInsertOrUpdateCreditAssignProcessDat"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryFindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateNegotiationValue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableCurrent",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Pipeline FindFile indir",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@variables('executeDatPipeLineName')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY\n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DATA_FAC"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_nego_value"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "INSERT_OR_UPDATE__NEGO_VALUE"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_NEGO_VALUE"
					},
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"moveInputPath": {
						"type": "String"
					},
					"executeDatPipeLineName": {
						"type": "String",
						"defaultValue": "CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryFindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateScoreValue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableCurrent",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Pipeline FindFile indir",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@variables('executeDatPipeLineName')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY\n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DATA_FAC"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_score_value"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "INSERT_UPDATE_SCORE_VALUE"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_INSERT_UPDATE_SCORE_VALUE"
					},
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"moveInputPath": {
						"type": "String"
					},
					"executeDatPipeLineName": {
						"type": "String",
						"defaultValue": "CC_DataFactoryInsertOrUpdateScoreValueProcessDat"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryFindFileSyncInDir')]"
			]
		}
	]
}