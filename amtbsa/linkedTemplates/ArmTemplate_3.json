{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "amtbsa"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CC_TEMPLATEMOVE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Write File_copy1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "CREATED_BY",
										"value": {
											"value": "@pipeline().parameters.CREDIT_USER",
											"type": "Expression"
										}
									},
									{
										"name": "CREATED",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									},
									{
										"name": "LAST_UPD_BY",
										"value": {
											"value": "@pipeline().parameters.CREDIT_USER",
											"type": "Expression"
										}
									},
									{
										"name": "LAST_UPD",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"sqlWriterStoredProcedureName": "[[CREDIT_DEV].[insertOrUpdateBillingInfo]",
								"sqlWriterTableType": "CREDIT_DEV.CC_BILLING_INFO",
								"storedProcedureTableTypeParameterName": "CC_BILLING_INFO",
								"storedProcedureParameters": {
									"accntId": {
										"type": "String"
									},
									"accntNo": {
										"type": "String"
									},
									"arpu": {
										"type": "Decimal"
									},
									"creditGrade": {
										"type": "Decimal"
									},
									"current_dt": {
										"type": "DateTime"
									},
									"user": {
										"type": "String"
									}
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "CC_LocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
									"fileName": "TEST_TEMP.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "CREDIT_DEV",
									"Table": "CC_BILLING_INFO"
								}
							}
						]
					},
					{
						"name": "Write File_copy1_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"ordinal": 1
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"ordinal": 2
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"ordinal": 3
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "CC_LocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
									"fileName": "CSR_ACCNT_ARPU_20220525_112235.dat"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_LocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
									"fileName": "TEST_TEMP.csv"
								}
							}
						]
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Copy data1_copy2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(10,37)",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Copy data1_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "FileServerWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true
									},
									"inputs": [
										{
											"referenceName": "CC_LocalFileMasterSplitPipe",
											"type": "DatasetReference",
											"parameters": {
												"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
												"fileName": "CSR_ACCNT_ARPU_20220525_112235_01.dat"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CC_LocalFileMasterSplitPipe",
											"type": "DatasetReference",
											"parameters": {
												"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
												"fileName": {
													"value": "@concat('CSR_ACCNT_ARPU_20220525_112235_',item(),'.dat')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy data1_copy1_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "FileServerWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true
									},
									"inputs": [
										{
											"referenceName": "CC_LocalFileMasterSplitPipe",
											"type": "DatasetReference",
											"parameters": {
												"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
												"fileName": "CSR_ACCNT_ARPU_20220525_112235_01.sync"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CC_LocalFileMasterSplitPipe",
											"type": "DatasetReference",
											"parameters": {
												"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
												"fileName": {
													"value": "@concat('CSR_ACCNT_ARPU_20220525_112235_',item(),'.sync')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Copy data1_copy2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM CREDIT_DATA_FAC.CC_DATA_FACTORY_NEGOTIATION_VALUE WHERE DATA_ID = 396 AND PROCESS_TYPE LIKE '02%';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"REF_ROW_ID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage3",
										"type": "LinkedServiceReference"
									},
									"path": "credit-control/logs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ROW_ID",
											"type": "String"
										},
										"sink": {
											"name": "REF_ROW_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CREATED",
											"type": "String"
										},
										"sink": {
											"name": "CREATED",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CREATED_BY",
											"type": "String"
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LAST_UPD",
											"type": "String"
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "LAST_UPD_BY",
											"type": "String"
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "REQ_ID",
											"type": "String"
										},
										"sink": {
											"name": "REQ_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ACCNT_ID",
											"type": "String"
										},
										"sink": {
											"name": "ACCNT_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BILLING_ACCNT_ID",
											"type": "String"
										},
										"sink": {
											"name": "BILLING_ACCNT_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NEGO_CREDIT_LIMIT",
											"type": "String"
										},
										"sink": {
											"name": "NEGO_CREDIT_LIMIT",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "AR_BALANCE",
											"type": "String"
										},
										"sink": {
											"name": "AR_BALANCE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "AVAILABLE_FOR_MONTHLY",
											"type": "String"
										},
										"sink": {
											"name": "AVAILABLE_FOR_MONTHLY",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "PRICE_MAIN_PRO",
											"type": "String"
										},
										"sink": {
											"name": "PRICE_MAIN_PRO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "MULTIPLIER",
											"type": "String"
										},
										"sink": {
											"name": "MULTIPLIER",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "BA_SCORE_RANGE",
											"type": "String"
										},
										"sink": {
											"name": "BA_SCORE_RANGE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CL_BEFORE_NEGO",
											"type": "String"
										},
										"sink": {
											"name": "CL_BEFORE_NEGO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "REASON_BEF_NEGO",
											"type": "String"
										},
										"sink": {
											"name": "REASON_BEF_NEGO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CUSTOMER_REQUEST_FLG",
											"type": "String"
										},
										"sink": {
											"name": "CUSTOMER_REQUEST_FLG",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CUS_REQ_BALANCE",
											"type": "String"
										},
										"sink": {
											"name": "CUS_REQ_BALANCE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "NEGO_STATUS",
											"type": "String"
										},
										"sink": {
											"name": "NEGO_STATUS",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "REASON_CODE",
											"type": "String"
										},
										"sink": {
											"name": "REASON_CODE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CHANNEL",
											"type": "String"
										},
										"sink": {
											"name": "CHANNEL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CL_BEFORE_NEGO_PERM",
											"type": "String"
										},
										"sink": {
											"name": "CL_BEFORE_NEGO_PERM",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "CL_BEFORE_NEGO_TEMP",
											"type": "String"
										},
										"sink": {
											"name": "CL_BEFORE_NEGO_TEMP",
											"type": "Decimal"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "CREDIT_DATA_FAC",
									"Table": "CC_NEGOTIATION_VALUE"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string",
						"defaultValue": "CREDIT_UAT"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string",
						"defaultValue": "UPDATE_ARPU"
					},
					"inputPath": {
						"type": "string",
						"defaultValue": "C:\\export\\home\\oper\\sffinput\\sff_cc_credit_grade"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string",
						"defaultValue": "CCS_ACCNT_CGRADE_TEST.dat"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					},
					"tableToUpsert": {
						"type": "string",
						"defaultValue": "CC_BILLING_INFO"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyBillingFileToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyBillingActivity",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@activity('Lookup1').output.firstRow.val3",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREATED",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILL_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILL_NAME",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "INVOICING_COMPANY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "INVOICING_COMPANY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "REGISTER_DT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "REGISTER_DT",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "ARPU",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ARPU",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "CREDIT_GRADE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREDIT_GRADE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 5
										}
									},
									{
										"source": {
											"name": "DEBT_NEGO_FLG",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEBT_NEGO_FLG",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DemoBillingCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTestBillingTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "CopyBillingActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://www.google.com/search?q=success",
							"connectVia": {
								"referenceName": "SelfHostIntegration",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Web2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "CopyBillingActivity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://www.google.com/search?q=failed",
							"connectVia": {
								"referenceName": "SelfHostIntegration",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from CREDIT.CC_CURRENT c where c.LOV_TYPE= 'CC_MONITOR_MASTER' and c.LOV_NAME = 'sff_cc_review_cl_res' and c.ACTIVE_FLG ='Y';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportReviewBilling')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportFileToCCBilling",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"ROW_ID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREATED",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILL_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILL_NAME",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "INVOICING_COMPANY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "INVOICING_COMPANY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "REGISTER_DT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "REGISTER_DT",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "ARPU",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ARPU",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "CREDIT_GRADE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREDIT_GRADE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 5
										}
									},
									{
										"source": {
											"name": "DEBT_NEGO_FLG",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEBT_NEGO_FLG",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCBillingFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TestCCBilling",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResReviewCreditLimit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupSyncFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.sync",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ResReviewSyncFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyDataToTable",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupSyncFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@{activity('LookupSyncFile').output.firstRow.Prop_0}",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "BA_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "FLAG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "DATE",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ResReviewCreditLimitData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCResReviewTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DeleteDataFile",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyDataToTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ResReviewCreditLimitData",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "DeleteSyncFile",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteDataFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ResReviewSyncFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-19T03:16:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResReviewCreditLimitCheckSize')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupSyncFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.sync",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ResReviewSyncFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GetFileMetadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LookupSyncFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ResReviewCreditLimitDataMatadata",
								"type": "DatasetReference",
								"parameters": {
									"filleName": {
										"value": "@{activity('LookupSyncFile').output.firstRow.Prop_0}",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFileMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetFileMetadata').output.size,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyDataToTable",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@{activity('LookupSyncFile').output.firstRow.Prop_0}",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"validateDataConsistency": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"type": "String",
														"ordinal": 1
													},
													"sink": {
														"name": "BA_NO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 2
													},
													"sink": {
														"name": "FLAG",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 3
													},
													"sink": {
														"name": "DATE",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ResReviewCreditLimitData",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "CCResReviewTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "DeleteDataFile",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyDataToTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ResReviewCreditLimitData",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "DeleteSyncFile",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "DeleteDataFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ResReviewSyncFile",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-19T03:16:10Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "AzureBlobStorage3",
								"type": "LinkedServiceReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage3",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     fileName as string",
						"}",
						"source(output(",
						"          LINE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'NONE',",
						"     query: (concat('SELECT CONCAT(\\'01|\\', \\'20220720_163205\\') AS LINE UNION ALL SELECT T.LINE FROM (SELECT CONCAT(\\'02|\\', ACCNT_ID) AS LINE FROM CREDIT_UAT.CC_UPDATE_CA_INFO WHERE STATUS = \\'P\\' ORDER BY CA_ID ASC OFFSET 0 ROWS FETCH NEXT 50000 ROWS ONLY) T UNION ALL SELECT CONCAT(\\'09|\\' , CONVERT(varchar(255), COUNT(T2.LINE))) AS LINE FROM ( SELECT CONCAT(\\'02|\\', ACCNT_ID) AS LINE FROM CREDIT_UAT.CC_UPDATE_CA_INFO WHERE STATUS = \\'P\\' ORDER BY CA_ID ASC OFFSET 0 ROWS FETCH NEXT 50000 ROWS ONLY) T2')),",
						"     format: 'query',",
						"     partitionBy('hash', 1)) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'credit-control',",
						"     folderPath: 'review/input',",
						"     rowDelimiter: '',",
						"     columnDelimiter: '',",
						"     escapeChar: '',",
						"     quoteChar: '',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['TEST1.dat'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ChangeCatSubcatDataFactoryInsertProfileChangeProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactory Exception :',replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),0,if(less(length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499),length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499)),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DATA_ID",
										"value": {
											"value": "@pipeline().parameters.dataId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "credit-control/logs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_ID",
											"type": "String"
										},
										"sink": {
											"name": "DATA_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "STATUS_DT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "EFFECTIVE_DT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "REMARK",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "PROFILE_CHG_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "NEW_ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "NEW_ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "OLD_ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "OLD_ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CC_LocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_DATA_FACTORY_PROFILE_CHANGE"
								}
							}
						]
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_PROFILE_CHANGE (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ROW_ID AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_PROFILE_CHANGE WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_PROFILE_CHANGE\n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ROW_ID = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE to CC_PROFILE_CHANGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(add(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,1)),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,1)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE to CC_PROFILE_CHANGE",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('MERGE to CC_PROFILE_CHANGE').Error),'''','\"')),0,if(greater(length(string(activity('MERGE to CC_PROFILE_CHANGE').Error)),499 ),499,length(string(activity('MERGE to CC_PROFILE_CHANGE').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "MERGE to CC_PROFILE_CHANGE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_PROFILE_CHANGE(ROW_ID ,\n\tCREATED ,\n\tCREATED_BY ,\n\tLAST_UPD ,\n\tLAST_UPD_BY ,\n\tACCNT_ID ,\n\tSTATUS_CD ,\n\tSTATUS_DT,\n\tEFFECTIVE_DT,\n\tREMARK ,\n\tPROFILE_CHG_NO ,\n\tNEW_ACCNT_CATEGORY,\n\tNEW_ACCNT_SUB_CATEGORY,\n\tOLD_ACCNT_CATEGORY,\n\tOLD_ACCNT_SUB_CATEGORY,\n\tTYPE )\nSELECT ROW_ID ,\n\tCREATED ,\n\tCREATED_BY ,\n\tLAST_UPD ,\n\tLAST_UPD_BY ,\n\tACCNT_ID ,\n\tSTATUS_CD ,\n\tSTATUS_DT ,\n\tEFFECTIVE_DT ,\n\tREMARK ,\n\tPROFILE_CHG_NO ,\n\tNEW_ACCNT_CATEGORY ,\n\tNEW_ACCNT_SUB_CATEGORY ,\n\tOLD_ACCNT_CATEGORY ,\n\tOLD_ACCNT_SUB_CATEGORY ,\n\tTYPE \nFROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_PROFILE_CHANGE WHERE DATA_ID = ',pipeline().parameters.dataId,'  AND PROCESS_TYPE =''02'' ORDER BY DATA_PROFILE_ID ASC OFFSET 0 ROWS;')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertBillingChangeCatSubcatProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_CAT_SUBCAT (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ROW_ID AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_CAT_SUBCAT WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_CAT_SUBCAT \n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ROW_ID = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Merge CC_BILLING_CAT_SUBCAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(add(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,1)),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,1)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Merge CC_BILLING_CAT_SUBCAT",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_BILLING_CAT_SUBCAT(ROW_ID,CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,ACCNT_NO,ACCNT_CATEGORY,ACCNT_SUB_CATEGORY,BILL_CYCLE,PAYMENT_METHOD,\nMASTER_ACCNT_ID,STATUS_CD,BILLING_STATUS_CD,REGISTER_DT,FBB_FLAG,SUPPEND_FLAG,COUNT_MOBILE,SUM_MAIN_PRO)\nSELECT ROW_ID,CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,ACCNT_NO,ACCNT_CATEGORY,ACCNT_SUB_CATEGORY,BILL_CYCLE,PAYMENT_METHOD,\nMASTER_ACCNT_ID,STATUS_CD,BILLING_STATUS_CD,REGISTER_DT,FBB_FLAG,SUPPEND_FLAG,COUNT_MOBILE,SUM_MAIN_PRO\nFROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_CAT_SUBCAT WHERE DATA_ID = ',pipeline().parameters.dataId,'  AND PROCESS_TYPE =''02'' ORDER BY DATA_BILLING_ID ASC OFFSET 0 ROWS;')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Merge CC_BILLING_CAT_SUBCAT",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('Merge CC_BILLING_CAT_SUBCAT').Error),'''','\"')),0,if(greater(length(string(activity('Merge CC_BILLING_CAT_SUBCAT').Error)),499 ),499,length(string(activity('Merge CC_BILLING_CAT_SUBCAT').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DATA_ID",
										"value": {
											"value": "@pipeline().parameters.dataId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_ID",
											"type": "String"
										},
										"sink": {
											"name": "DATA_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "REGISTER_DT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "FBB_FLAG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "SUPPEND_FLAG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "COUNT_MOBILE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 19
										},
										"sink": {
											"name": "SUM_MAIN_PRO",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CC_LocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_DATA_FACTORY_BILLING_CAT_SUBCAT"
								}
							}
						]
					},
					{
						"name": "Update CC_DATA_FACTORY Catch_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('Copy data to CC_TEMP_FILE_DETAIL').Error),'''','\"')),0,if(greater(length(string(activity('Copy data to CC_TEMP_FILE_DETAIL').Error)),499 ),499,length(string(activity('Copy data to CC_TEMP_FILE_DETAIL').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateCreditAssignProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Copy data to CC_DATA_FACTORY_CREDIT_ASSIGN",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DATA_ID",
										"value": {
											"value": "@pipeline().parameters.dataId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "credit-control/logs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_ID",
											"type": "String"
										},
										"sink": {
											"name": "DATA_ID",
											"type": "Int64"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "CREATED",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "BILLING_ACCOUNT_NUM",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "LIMIT_MNY",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "GNV_LIMIT_MNY",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "THRESHOLD_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "REQUEST_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "ACTION_TYPE",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "ACTION_DTM",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "REASON_CODE",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "REASON_SUBCODE",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "LAST_UPDATE_BY",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "LAST_UPDATE_DTM",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "ASSIGN_NO",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 19
										},
										"sink": {
											"name": "TEMP_EXPIRE_DAT",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 20
										},
										"sink": {
											"name": "SEQ_NO",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 21
										},
										"sink": {
											"name": "CREDIT_GRADE",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 22
										},
										"sink": {
											"name": "ARPU",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 23
										},
										"sink": {
											"name": "MIN_REVIEW",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 24
										},
										"sink": {
											"name": "SUM_MAIN",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 25
										},
										"sink": {
											"name": "NEXT_BILL",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 26
										},
										"sink": {
											"name": "NEXT_BILL_DATE",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 27
										},
										"sink": {
											"name": "PHX_ROW_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 28
										},
										"sink": {
											"name": "PHX_OPERATION",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "CC_LocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_DATA_FACTORY_CREDIT_ASSIGN"
								}
							}
						]
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CREDIT_ASSIGN (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_DATA_FACTORY_CREDIT_ASSIGN",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ROW_ID AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CREDIT_ASSIGN WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CREDIT_ASSIGN\n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ROW_ID = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Insert into CC_DATA_FACTORY_HIST SQL9",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST(CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,DATA_ID,STATUS,DESCRIPTION,ERROR_MSG )\nSELECT TEMP.CREATED,TEMP.CREATED_BY,TEMP.LAST_UPD,TEMP.LAST_UPD_BY,TEMP.DATA_ID,TEMP.STATUS,TEMP.DESCRIPTION,TEMP.ERROR_MSG\nFROM (SELECT CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''') AS CREATED ,''DATA_FAC_INSERT_ASSIGN'' AS CREATED_BY ,CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''') AS LAST_UPD ,''DATA_FAC_INSERT_ASSIGN'' AS LAST_UPD_BY ,A.DATA_ID,''E'' AS STATUS\n,(CONCAT(A.PROCESS_TYPE,''|'',A.ROW_ID,''|'',A.CREATED,''|'',A.CREATED_BY,''|'',A.LAST_UPD,''|'',A.LAST_UPD_BY,''|''\n ,A.BILLING_ACCOUNT_NUM,''|'',A.LIMIT_MNY,''|'',A.GNV_LIMIT_MNY,''|'',A.THRESHOLD_ID,''|'',A.REQUEST_ID,''|''\n ,A.ACTION_TYPE,''|'',A.ACTION_DTM,''|'',A.REASON_CODE,''|'',A.REASON_SUBCODE,''|'',A.LAST_UPDATE_BY,''|'',A.LAST_UPDATE_DTM,''|''\n ,A.ASSIGN_NO,''|'',A.TEMP_EXPIRE_DAT,''|'',A.SEQ_NO,''|'',A.CREDIT_GRADE,''|'',A.ARPU,''|'',A.MIN_REVIEW,''|'',A.SUM_MAIN,''|''\n ,A.NEXT_BILL,''|'',A.NEXT_BILL_DATE,''|'',A.PHX_ROW_ID,''|'', A.PHX_OPERATION)) AS DESCRIPTION\n,''PHX_ROW_ID Data not found'' AS ERROR_MSG,CA.ROW_ID AS REF_ID \nFROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CREDIT_ASSIGN A  \nLEFT JOIN ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN CA ON CA.ROW_ID = A.PHX_ROW_ID \nWHERE A.DATA_ID = ',pipeline().parameters.dataId,' AND A.PROCESS_TYPE =''02'' AND NULLIF(A.PHX_ROW_ID,'''') IS NOT NULL AND A.PHX_OPERATION = ''Delete''\nORDER BY A.DATA_ASSIGN_ID ASC OFFSET 0 ROWS)TEMP WHERE NULLIF(TEMP.REF_ID,'''') IS NULL\n')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Insert into CC_DATA_FACTORY_HIST SQL12",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert into CC_DATA_FACTORY_HIST SQL9",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST(CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,DATA_ID,STATUS,DESCRIPTION,ERROR_MSG )\nSELECT TEMP.CREATED,TEMP.CREATED_BY,TEMP.LAST_UPD,TEMP.LAST_UPD_BY,TEMP.DATA_ID,TEMP.STATUS,TEMP.DESCRIPTION,TEMP.ERROR_MSG\nFROM (SELECT CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''') AS CREATED ,''DATA_FAC_INSERT_ASSIGN'' AS CREATED_BY ,CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''') AS LAST_UPD ,''DATA_FAC_INSERT_ASSIGN'' AS LAST_UPD_BY ,A.DATA_ID,''E'' AS STATUS\n,(CONCAT(A.PROCESS_TYPE,''|'',A.ROW_ID,''|'',A.CREATED,''|'',A.CREATED_BY,''|'',A.LAST_UPD,''|'',A.LAST_UPD_BY,''|''\n ,A.BILLING_ACCOUNT_NUM,''|'',A.LIMIT_MNY,''|'',A.GNV_LIMIT_MNY,''|'',A.THRESHOLD_ID,''|'',A.REQUEST_ID,''|''\n ,A.ACTION_TYPE,''|'',A.ACTION_DTM,''|'',A.REASON_CODE,''|'',A.REASON_SUBCODE,''|'',A.LAST_UPDATE_BY,''|'',A.LAST_UPDATE_DTM,''|''\n ,A.ASSIGN_NO,''|'',A.TEMP_EXPIRE_DAT,''|'',A.SEQ_NO,''|'',A.CREDIT_GRADE,''|'',A.ARPU,''|'',A.MIN_REVIEW,''|'',A.SUM_MAIN,''|''\n ,A.NEXT_BILL,''|'',A.NEXT_BILL_DATE,''|'',A.PHX_ROW_ID,''|'', A.PHX_OPERATION)) AS DESCRIPTION\n,''ROW_ID Data not found'' AS ERROR_MSG,CA.ROW_ID AS REF_ID \nFROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CREDIT_ASSIGN A  \nLEFT JOIN ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN CA ON CA.REF_ROW_ID = A.ROW_ID \nWHERE A.DATA_ID = ',pipeline().parameters.dataId,' AND A.PROCESS_TYPE =''02'' AND NULLIF(A.PHX_ROW_ID,'''') IS NULL AND A.PHX_OPERATION = ''Delete'' \nORDER BY A.DATA_ASSIGN_ID ASC OFFSET 0 ROWS)TEMP WHERE NULLIF(TEMP.REF_ID,'''') IS NULL\n')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Insert into CC_DATA_FACTORY_HIST SQL7",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert into CC_DATA_FACTORY_HIST SQL12",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST(CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,DATA_ID,STATUS,DESCRIPTION,ERROR_MSG )\nSELECT TEMP.CREATED,TEMP.CREATED_BY,TEMP.LAST_UPD,TEMP.LAST_UPD_BY,TEMP.DATA_ID,TEMP.STATUS,TEMP.DESCRIPTION,TEMP.ERROR_MSG\nFROM (SELECT CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''') AS CREATED ,''DATA_FAC_INSERT_ASSIGN'' AS CREATED_BY ,CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''') AS LAST_UPD ,''DATA_FAC_INSERT_ASSIGN'' AS LAST_UPD_BY ,A.DATA_ID,''E'' AS STATUS\n,(CONCAT(A.PROCESS_TYPE,''|'',A.ROW_ID,''|'',A.CREATED,''|'',A.CREATED_BY,''|'',A.LAST_UPD,''|'',A.LAST_UPD_BY,''|''\n ,A.BILLING_ACCOUNT_NUM,''|'',A.LIMIT_MNY,''|'',A.GNV_LIMIT_MNY,''|'',A.THRESHOLD_ID,''|'',A.REQUEST_ID,''|''\n ,A.ACTION_TYPE,''|'',A.ACTION_DTM,''|'',A.REASON_CODE,''|'',A.REASON_SUBCODE,''|'',A.LAST_UPDATE_BY,''|'',A.LAST_UPDATE_DTM,''|''\n ,A.ASSIGN_NO,''|'',A.TEMP_EXPIRE_DAT,''|'',A.SEQ_NO,''|'',A.CREDIT_GRADE,''|'',A.ARPU,''|'',A.MIN_REVIEW,''|'',A.SUM_MAIN,''|''\n ,A.NEXT_BILL,''|'',A.NEXT_BILL_DATE,''|'',A.PHX_ROW_ID,''|'', A.PHX_OPERATION)) AS DESCRIPTION\n,''PHX_ROW_ID Data not found'' AS ERROR_MSG,CA.ROW_ID AS REF_ID \nFROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CREDIT_ASSIGN A  \nLEFT JOIN ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN CA ON CA.ROW_ID = A.PHX_ROW_ID \nWHERE A.DATA_ID = ',pipeline().parameters.dataId,' AND A.PROCESS_TYPE =''02'' AND NULLIF(A.PHX_ROW_ID,'''') IS NOT NULL AND NULLIF(A.PHX_OPERATION ,'''') IS NULL\nORDER BY A.DATA_ASSIGN_ID ASC OFFSET 0 ROWS)TEMP WHERE NULLIF(TEMP.REF_ID,'''') IS NULL')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Insert into CC_CREDIT_ASSIGN_AT SQL10",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert into CC_DATA_FACTORY_HIST SQL7",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN_AT(CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,\nBATCH_CREATED,BATCH_CREATED_BY,ASSIGN_ROW_ID,ASSIGN_REF_ROW_ID,BILLING_ACCOUNT_NUM,LIMIT_MNY,\nGNV_LIMIT_MNY,THRESHOLD_ID,REQUEST_ID,ACTION_TYPE,ACTION_DTM,REASON_CODE,REASON_SUBCODE,LAST_UPDATE_BY,LAST_UPDATE_DTM,\nASSIGN_NO,TEMP_EXPIRE_DAT,SEQ_NO,CREDIT_GRADE,ARPU,MIN_REVIEW,SUM_MAIN,NEXT_BILL_DATE)\nSELECT A.CREATED,A.CREATED_BY,A.LAST_UPD,A.LAST_UPD_BY,\nCONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''') AS BATCH_LAST_UPD ,''DATA_FAC_INSERT_ASSIGN'' AS BATCH_LAST_UPD_BY,CA.ROW_ID,A.ROW_ID,A.BILLING_ACCOUNT_NUM,A.LIMIT_MNY,\nA.GNV_LIMIT_MNY,A.THRESHOLD_ID,A.REQUEST_ID,A.ACTION_TYPE,A.ACTION_DTM,A.REASON_CODE,A.REASON_SUBCODE,A.LAST_UPDATE_BY,A.LAST_UPDATE_DTM,\nA.ASSIGN_NO,A.TEMP_EXPIRE_DAT,A.SEQ_NO,A.CREDIT_GRADE,A.ARPU,A.MIN_REVIEW,A.SUM_MAIN,A.NEXT_BILL_DATE\nFROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CREDIT_ASSIGN A  \nINNER JOIN ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN CA ON CA.ROW_ID = A.PHX_ROW_ID \nWHERE A.DATA_ID = ',pipeline().parameters.dataId,' AND A.PROCESS_TYPE =''02'' AND NULLIF(A.PHX_ROW_ID,'''') IS NOT NULL AND A.PHX_OPERATION = ''Delete''\nORDER BY A.DATA_ASSIGN_ID ASC OFFSET 0 ROWS')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Insert into CC_CREDIT_ASSIGN_AT SQL13",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert into CC_CREDIT_ASSIGN_AT SQL10",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN_AT(CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,\nBATCH_CREATED,BATCH_CREATED_BY,ASSIGN_ROW_ID,ASSIGN_REF_ROW_ID,BILLING_ACCOUNT_NUM,LIMIT_MNY,\nGNV_LIMIT_MNY,THRESHOLD_ID,REQUEST_ID,ACTION_TYPE,ACTION_DTM,REASON_CODE,REASON_SUBCODE,LAST_UPDATE_BY,LAST_UPDATE_DTM,\nASSIGN_NO,TEMP_EXPIRE_DAT,SEQ_NO,CREDIT_GRADE,ARPU,MIN_REVIEW,SUM_MAIN,NEXT_BILL_DATE)\nSELECT A.CREATED,A.CREATED_BY,A.LAST_UPD,A.LAST_UPD_BY,\nCONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''') AS BATCH_LAST_UPD ,''DATA_FAC_INSERT_ASSIGN'' AS BATCH_LAST_UPD_BY,CA.ROW_ID,A.ROW_ID,A.BILLING_ACCOUNT_NUM,A.LIMIT_MNY,\nA.GNV_LIMIT_MNY,A.THRESHOLD_ID,A.REQUEST_ID,A.ACTION_TYPE,A.ACTION_DTM,A.REASON_CODE,A.REASON_SUBCODE,A.LAST_UPDATE_BY,A.LAST_UPDATE_DTM,\nA.ASSIGN_NO,A.TEMP_EXPIRE_DAT,A.SEQ_NO,A.CREDIT_GRADE,A.ARPU,A.MIN_REVIEW,A.SUM_MAIN,A.NEXT_BILL_DATE\nFROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CREDIT_ASSIGN A  \nINNER JOIN ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN CA ON CA.REF_ROW_ID = A.ROW_ID \nWHERE A.DATA_ID = ',pipeline().parameters.dataId,' AND A.PROCESS_TYPE =''02'' AND NULLIF(A.PHX_ROW_ID,'''') IS NULL AND A.PHX_OPERATION = ''Delete''\nORDER BY A.DATA_ASSIGN_ID ASC OFFSET 0 ROWS')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "MERGE Update CC_CREDIT_ASSIGN SQL6",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert into CC_CREDIT_ASSIGN_AT SQL13",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('WITH ASSIGN AS (SELECT * FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CREDIT_ASSIGN WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE =''02'' AND NULLIF(PHX_ROW_ID,'''') IS NOT NULL AND NULLIF(PHX_OPERATION ,'''') IS NULL ORDER BY DATA_ASSIGN_ID ASC OFFSET 0 ROWS)\nMERGE ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN AS TARGET\nUSING ASSIGN AS SOURCE\nON (TARGET.ROW_ID = SOURCE.PHX_ROW_ID)\nWHEN MATCHED\nTHEN \nUPDATE\nSET\nTARGET.REF_ROW_ID = SOURCE.ROW_ID,\nTARGET.CREATED = SOURCE.CREATED,\nTARGET.CREATED_BY = SOURCE.CREATED_BY,\nTARGET.LAST_UPD = SOURCE.LAST_UPD,\nTARGET.LAST_UPD_BY = SOURCE.LAST_UPD_BY,\nTARGET.BILLING_ACCOUNT_NUM = SOURCE.BILLING_ACCOUNT_NUM,\nTARGET.LIMIT_MNY = SOURCE.LIMIT_MNY,\nTARGET.GNV_LIMIT_MNY = SOURCE.GNV_LIMIT_MNY,\nTARGET.THRESHOLD_ID = SOURCE.THRESHOLD_ID,\nTARGET.REQUEST_ID = SOURCE.REQUEST_ID,\nTARGET.ACTION_TYPE = SOURCE.ACTION_TYPE,\nTARGET.ACTION_DTM = SOURCE.ACTION_DTM,\nTARGET.REASON_CODE = SOURCE.REASON_CODE,\nTARGET.REASON_SUBCODE = SOURCE.REASON_SUBCODE,\nTARGET.LAST_UPDATE_BY = SOURCE.LAST_UPDATE_BY,\nTARGET.LAST_UPDATE_DTM = SOURCE.LAST_UPDATE_DTM,\nTARGET.ASSIGN_NO = SOURCE.ASSIGN_NO,\nTARGET.TEMP_EXPIRE_DAT = SOURCE.TEMP_EXPIRE_DAT,\nTARGET.SEQ_NO = SOURCE.SEQ_NO,\nTARGET.CREDIT_GRADE = SOURCE.CREDIT_GRADE,\nTARGET.ARPU = SOURCE.ARPU,\nTARGET.MIN_REVIEW = SOURCE.MIN_REVIEW,\nTARGET.SUM_MAIN = SOURCE.SUM_MAIN,\nTARGET.NEXT_BILL_DATE = SOURCE.NEXT_BILL_DATE;\n')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "MERGE Update or Insert CC_CREDIT_ASSIGN SQL8",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE Update CC_CREDIT_ASSIGN SQL6",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('WITH ASSIGN AS (SELECT * FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CREDIT_ASSIGN WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE =''02'' AND NULLIF(PHX_ROW_ID,'''') IS NULL AND NULLIF(PHX_OPERATION ,'''') IS NULL ORDER BY DATA_ASSIGN_ID ASC OFFSET 0 ROWS)\nMERGE ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN AS TARGET\nUSING ASSIGN AS SOURCE\nON (TARGET.REF_ROW_ID = SOURCE.ROW_ID)\nWHEN MATCHED\nTHEN \nUPDATE\nSET\nTARGET.REF_ROW_ID = SOURCE.ROW_ID,\nTARGET.CREATED = SOURCE.CREATED,\nTARGET.CREATED_BY = SOURCE.CREATED_BY,\nTARGET.LAST_UPD = SOURCE.LAST_UPD,\nTARGET.LAST_UPD_BY = SOURCE.LAST_UPD_BY,\nTARGET.BILLING_ACCOUNT_NUM = SOURCE.BILLING_ACCOUNT_NUM,\nTARGET.LIMIT_MNY = SOURCE.LIMIT_MNY,\nTARGET.GNV_LIMIT_MNY = SOURCE.GNV_LIMIT_MNY,\nTARGET.THRESHOLD_ID = SOURCE.THRESHOLD_ID,\nTARGET.REQUEST_ID = SOURCE.REQUEST_ID,\nTARGET.ACTION_TYPE = SOURCE.ACTION_TYPE,\nTARGET.ACTION_DTM = SOURCE.ACTION_DTM,\nTARGET.REASON_CODE = SOURCE.REASON_CODE,\nTARGET.REASON_SUBCODE = SOURCE.REASON_SUBCODE,\nTARGET.LAST_UPDATE_BY = SOURCE.LAST_UPDATE_BY,\nTARGET.LAST_UPDATE_DTM = SOURCE.LAST_UPDATE_DTM,\nTARGET.ASSIGN_NO = SOURCE.ASSIGN_NO,\nTARGET.TEMP_EXPIRE_DAT = SOURCE.TEMP_EXPIRE_DAT,\nTARGET.SEQ_NO = SOURCE.SEQ_NO,\nTARGET.CREDIT_GRADE = SOURCE.CREDIT_GRADE,\nTARGET.ARPU = SOURCE.ARPU,\nTARGET.MIN_REVIEW = SOURCE.MIN_REVIEW,\nTARGET.SUM_MAIN = SOURCE.SUM_MAIN,\nTARGET.NEXT_BILL_DATE = SOURCE.NEXT_BILL_DATE\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (REF_ROW_ID,CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,BILLING_ACCOUNT_NUM,LIMIT_MNY,\nGNV_LIMIT_MNY,THRESHOLD_ID,REQUEST_ID,ACTION_TYPE,ACTION_DTM,REASON_CODE,REASON_SUBCODE,LAST_UPDATE_BY,\nLAST_UPDATE_DTM,ASSIGN_NO,TEMP_EXPIRE_DAT,SEQ_NO,CREDIT_GRADE,ARPU,MIN_REVIEW,SUM_MAIN,NEXT_BILL_DATE) \nVALUES (SOURCE.ROW_ID ,\n SOURCE.CREATED ,\n SOURCE.CREATED_BY,\n SOURCE.LAST_UPD ,\n SOURCE.LAST_UPD_BY,\n SOURCE.BILLING_ACCOUNT_NUM,\n SOURCE.LIMIT_MNY,\n SOURCE.GNV_LIMIT_MNY,\n SOURCE.THRESHOLD_ID,\n SOURCE.REQUEST_ID,\n SOURCE.ACTION_TYPE,\n SOURCE.ACTION_DTM,\n SOURCE.REASON_CODE,\n SOURCE.REASON_SUBCODE,\n SOURCE.LAST_UPDATE_BY,\n SOURCE.LAST_UPDATE_DTM,\n SOURCE.ASSIGN_NO,\n SOURCE.TEMP_EXPIRE_DAT,\n SOURCE.SEQ_NO,\n SOURCE.CREDIT_GRADE,\n SOURCE.ARPU,\n SOURCE.MIN_REVIEW,\n SOURCE.SUM_MAIN,\n SOURCE.NEXT_BILL_DATE);\n')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "DELETE CC_CREDIT_ASSIGN SQL11",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE Update or Insert CC_CREDIT_ASSIGN SQL8",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN WHERE ROW_ID IN(SELECT CA.ROW_ID FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CREDIT_ASSIGN A  \nINNER JOIN ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN CA ON CA.ROW_ID = A.PHX_ROW_ID \nWHERE A.DATA_ID = ',pipeline().parameters.dataId,' AND A.PROCESS_TYPE =''02'' AND NULLIF(A.PHX_ROW_ID,'''') IS NOT NULL AND A.PHX_OPERATION = ''Delete'' )\n')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "DELETE CC_CREDIT_ASSIGN SQL14",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DELETE CC_CREDIT_ASSIGN SQL11",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN WHERE ROW_ID IN(SELECT CA.ROW_ID FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CREDIT_ASSIGN A  \nINNER JOIN ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN CA ON CA.REF_ROW_ID = A.ROW_ID \nWHERE A.DATA_ID = ',pipeline().parameters.dataId,' AND A.PROCESS_TYPE =''02'' AND NULLIF(A.PHX_ROW_ID,'''') IS NULL AND A.PHX_OPERATION = ''Delete'' )\n')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DELETE CC_CREDIT_ASSIGN SQL14",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('DELETE CC_CREDIT_ASSIGN SQL14').Error),'''','\"')),0,if(greater(length(string(activity('DELETE CC_CREDIT_ASSIGN SQL14').Error)),499 ),499,length(string(activity('DELETE CC_CREDIT_ASSIGN SQL14').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST_copy3",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DELETE CC_CREDIT_ASSIGN SQL11",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('DELETE CC_CREDIT_ASSIGN SQL11').Error),'''','\"')),0,if(greater(length(string(activity('DELETE CC_CREDIT_ASSIGN SQL11').Error)),499 ),499,length(string(activity('DELETE CC_CREDIT_ASSIGN SQL11').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST_copy4",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE Update or Insert CC_CREDIT_ASSIGN SQL8",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('MERGE Update or Insert CC_CREDIT_ASSIGN SQL8').Error),'''','\"')),0,if(greater(length(string(activity('MERGE Update or Insert CC_CREDIT_ASSIGN SQL8').Error)),499 ),499,length(string(activity('MERGE Update or Insert CC_CREDIT_ASSIGN SQL8').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Exception",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert into CC_DATA_FACTORY_HIST SQL9",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('Insert into CC_DATA_FACTORY_HIST SQL9').Error),'''','\"')),0,if(greater(length(string(activity('Insert into CC_DATA_FACTORY_HIST SQL9').Error)),499 ),499,length(string(activity('Insert into CC_DATA_FACTORY_HIST SQL9').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Exception_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert into CC_DATA_FACTORY_HIST SQL12",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('Insert into CC_DATA_FACTORY_HIST SQL12').Error),'''','\"')),0,if(greater(length(string(activity('Insert into CC_DATA_FACTORY_HIST SQL12').Error)),499 ),499,length(string(activity('Insert into CC_DATA_FACTORY_HIST SQL12').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Exception_copy2",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert into CC_DATA_FACTORY_HIST SQL7",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('Insert into CC_DATA_FACTORY_HIST SQL7').Error),'''','\"')),0,if(greater(length(string(activity('Insert into CC_DATA_FACTORY_HIST SQL7').Error)),499 ),499,length(string(activity('Insert into CC_DATA_FACTORY_HIST SQL7').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Exception_copy3",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert into CC_CREDIT_ASSIGN_AT SQL10",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('Insert into CC_CREDIT_ASSIGN_AT SQL10').Error),'''','\"')),0,if(greater(length(string(activity('Insert into CC_CREDIT_ASSIGN_AT SQL10').Error)),499 ),499,length(string(activity('Insert into CC_CREDIT_ASSIGN_AT SQL10').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Exception_copy4",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert into CC_CREDIT_ASSIGN_AT SQL13",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('Insert into CC_CREDIT_ASSIGN_AT SQL13').Error),'''','\"')),0,if(greater(length(string(activity('Insert into CC_CREDIT_ASSIGN_AT SQL13').Error)),499 ),499,length(string(activity('Insert into CC_CREDIT_ASSIGN_AT SQL13').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Exception_copy5",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE Update CC_CREDIT_ASSIGN SQL6",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('MERGE Update CC_CREDIT_ASSIGN SQL6').Error),'''','\"')),0,if(greater(length(string(activity('MERGE Update CC_CREDIT_ASSIGN SQL6').Error)),499 ),499,length(string(activity('MERGE Update CC_CREDIT_ASSIGN SQL6').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Success_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DELETE CC_CREDIT_ASSIGN SQL14",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(add(activity('Copy data to CC_DATA_FACTORY_CREDIT_ASSIGN').output.rowsRead,1)),' record -> count process ',string(sub(activity('Copy data to CC_DATA_FACTORY_CREDIT_ASSIGN').output.rowsRead,1)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_DATA_FACTORY_CREDIT_ASSIGN",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('Copy data to CC_DATA_FACTORY_CREDIT_ASSIGN').Error),'''','\"')),0,if(greater(length(string(activity('Copy data to CC_DATA_FACTORY_CREDIT_ASSIGN').Error)),499 ),499,length(string(activity('Copy data to CC_DATA_FACTORY_CREDIT_ASSIGN').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update CC_DATA_FACTORY Success_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Datafactory Exception : ',substring(concat('Datafactory Exception :',replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),0,if(less(length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499),length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499)),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_NEGOTIATION_VALUE (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ROW_ID AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_NEGOTIATION_VALUE WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_NEGOTIATION_VALUE \n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ROW_ID = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Merge ca To CC_NEGOTIATION_VALUE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(add(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,1)),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,1)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DATA_ID",
										"value": {
											"value": "@pipeline().parameters.dataId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_ID",
											"type": "String"
										},
										"sink": {
											"name": "DATA_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "REQ_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "BILLING_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "NEGO_CREDIT_LIMIT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "AR_BALANCE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "AVAILABLE_FOR_MONTHLY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "PRICE_MAIN_PRO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "MULTIPLIER",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "BA_SCORE_RANGE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "CL_BEFORE_NEGO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "REASON_BEF_NEGO",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "CUSTOMER_REQUEST_FLG",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 19
										},
										"sink": {
											"name": "CUS_REQ_BALANCE",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 20
										},
										"sink": {
											"name": "NEGO_STATUS",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 21
										},
										"sink": {
											"name": "REASON_CODE",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 22
										},
										"sink": {
											"name": "CHANNEL",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"ordinal": 23
										},
										"sink": {
											"name": "CL_BEFORE_NEGO_PERM",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 24
										},
										"sink": {
											"name": "CL_BEFORE_NEGO_TEMP",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CC_LocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_DATA_FACTORY_NEGOTIATION_VALUE"
								}
							}
						]
					},
					{
						"name": "Merge ca To CC_NEGOTIATION_VALUE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('WITH NEGO AS (SELECT * FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_NEGOTIATION_VALUE WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE LIKE ''02%'' ORDER BY DATA_NEGO_ID ASC OFFSET 0 ROWS)\nMERGE ',pipeline().parameters.SCHEMA,'.CC_NEGOTIATION_VALUE AS TARGET\nUSING NEGO AS SOURCE\nON (TARGET.ACCNT_ID = SOURCE.ACCNT_ID)\nWHEN MATCHED AND TARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID \nTHEN \nUPDATE\nSET\nTARGET.REF_ROW_ID = SOURCE.ROW_ID,\nTARGET.CREATED = SOURCE.CREATED,\nTARGET.CREATED_BY = SOURCE.CREATED_BY,\nTARGET.LAST_UPD = SOURCE.LAST_UPD,\nTARGET.LAST_UPD_BY = SOURCE.LAST_UPD_BY,\nTARGET.REQ_ID = SOURCE.REQ_ID,\nTARGET.ACCNT_ID = SOURCE.ACCNT_ID,\nTARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID,\nTARGET.NEGO_CREDIT_LIMIT = SOURCE.NEGO_CREDIT_LIMIT,\nTARGET.AR_BALANCE = SOURCE.AR_BALANCE,\nTARGET.AVAILABLE_FOR_MONTHLY = SOURCE.AVAILABLE_FOR_MONTHLY,\nTARGET.PRICE_MAIN_PRO = SOURCE.PRICE_MAIN_PRO,\nTARGET.MULTIPLIER = SOURCE.MULTIPLIER,\nTARGET.BA_SCORE_RANGE = SOURCE.BA_SCORE_RANGE,\nTARGET.CL_BEFORE_NEGO = SOURCE.CL_BEFORE_NEGO,\nTARGET.REASON_BEF_NEGO = SOURCE.REASON_BEF_NEGO,\nTARGET.CUSTOMER_REQUEST_FLG = SOURCE.CUSTOMER_REQUEST_FLG,\nTARGET.CUS_REQ_BALANCE = SOURCE.CUS_REQ_BALANCE,\nTARGET.NEGO_STATUS = SOURCE.NEGO_STATUS,\nTARGET.REASON_CODE = SOURCE.REASON_CODE,\nTARGET.CHANNEL = SOURCE.CHANNEL,\nTARGET.CL_BEFORE_NEGO_PERM = SOURCE.CL_BEFORE_NEGO_PERM,\nTARGET.CL_BEFORE_NEGO_TEMP = SOURCE.CL_BEFORE_NEGO_TEMP\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (REF_ROW_ID,\nCREATED,\nCREATED_BY,\nLAST_UPD,\nLAST_UPD_BY,\nREQ_ID,\nACCNT_ID,\nBILLING_ACCNT_ID,\nNEGO_CREDIT_LIMIT,\nAR_BALANCE,\nAVAILABLE_FOR_MONTHLY,\nPRICE_MAIN_PRO,\nMULTIPLIER,\nBA_SCORE_RANGE,\nCL_BEFORE_NEGO,\nREASON_BEF_NEGO,\nCUSTOMER_REQUEST_FLG,\nCUS_REQ_BALANCE,\nNEGO_STATUS,\nREASON_CODE,\nCHANNEL,\nCL_BEFORE_NEGO_PERM,CL_BEFORE_NEGO_TEMP ) VALUES (SOURCE.ROW_ID,\nSOURCE.CREATED,\nSOURCE.CREATED_BY,\nSOURCE.LAST_UPD,\nSOURCE.LAST_UPD_BY,\nSOURCE.REQ_ID,\nSOURCE.ACCNT_ID,\nSOURCE.BILLING_ACCNT_ID,\nSOURCE.NEGO_CREDIT_LIMIT,\nSOURCE.AR_BALANCE,\nSOURCE.AVAILABLE_FOR_MONTHLY,\nSOURCE.PRICE_MAIN_PRO,\nSOURCE.MULTIPLIER,\nSOURCE.BA_SCORE_RANGE,\nSOURCE.CL_BEFORE_NEGO,\nSOURCE.REASON_BEF_NEGO,\nSOURCE.CUSTOMER_REQUEST_FLG,\nSOURCE.CUS_REQ_BALANCE,\nSOURCE.NEGO_STATUS,\nSOURCE.REASON_CODE,\nSOURCE.CHANNEL,\nSOURCE.CL_BEFORE_NEGO_PERM,\nSOURCE.CL_BEFORE_NEGO_TEMP);')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Merge ca To CC_NEGOTIATION_VALUE",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('Merge ca To CC_NEGOTIATION_VALUE').Error),'''','\"')),0,if(greater(length(string(activity('Merge ca To CC_NEGOTIATION_VALUE').Error)),499 ),499,length(string(activity('Merge ca To CC_NEGOTIATION_VALUE').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateScoreValueProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Exception",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',activity('Copy data to CC_TEMP_FILE_DETAIL').Error),0,if(greater(length(activity('Copy data to CC_TEMP_FILE_DETAIL').Error),499),499,length(activity('Copy data to CC_TEMP_FILE_DETAIL').Error))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DATA_ID",
										"value": {
											"value": "@pipeline().parameters.dataId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "credit-control/logs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_ID",
											"type": "String"
										},
										"sink": {
											"name": "DATA_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "BILLING_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "CL_LEVEL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "SCORE_RANGE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "CL_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "CL_CHANGE_REASON",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "OUTCOME_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "OUTCOME_REASON",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "CREDIT_LIMIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "PERM_CREDIT_LIMIT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "TEMP_CREDIT_LIMIT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 19
										},
										"sink": {
											"name": "PREV_CREDIT_LIMIT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 20
										},
										"sink": {
											"name": "PREV_SCORE_RANGE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 21
										},
										"sink": {
											"name": "ACTUAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 22
										},
										"sink": {
											"name": "ACTUAL_PERM",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 23
										},
										"sink": {
											"name": "BILLING_CREDIT_LIMIT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 24
										},
										"sink": {
											"name": "BILLING_THRESHOLD_SET_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 25
										},
										"sink": {
											"name": "FBB_FLAG",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 26
										},
										"sink": {
											"name": "LAST_REVIEW_DAT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 27
										},
										"sink": {
											"name": "MIN_REVIEW",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 28
										},
										"sink": {
											"name": "AVAILABLE_CREDIT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 29
										},
										"sink": {
											"name": "PAYMENT_FLG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 30
										},
										"sink": {
											"name": "BA_REGISTER_DT",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CC_LocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_DATA_FACTORY_SCORE_VALUE"
								}
							}
						]
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_SCORE_VALUE (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ROW_ID AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_SCORE_VALUE WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_SCORE_VALUE\n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ROW_ID = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Success_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Merge ca To cc_scorevalue",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Merge Ba To cc_scorevalue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(add(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,1)),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,1)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Merge Ba To cc_scorevalue",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('WITH SCORE AS (SELECT * FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_SCORE_VALUE WHERE DATA_ID = ',pipeline().parameters.dataId,' AND CL_LEVEL = ''BA'' AND PROCESS_TYPE LIKE ''02%'')\nMERGE ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE AS TARGET\nUSING SCORE AS SOURCE\nON (TARGET.ACCNT_ID = SOURCE.ACCNT_ID)\nWHEN MATCHED AND TARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID \nTHEN \nUPDATE\nSET\n TARGET.REF_ROW_ID = SOURCE.ROW_ID ,\n TARGET.CREATED = SOURCE.CREATED ,\n TARGET.CREATED_BY = SOURCE. CREATED_BY,\n TARGET.LAST_UPD = SOURCE.LAST_UPD ,\n TARGET.LAST_UPD_BY = SOURCE.LAST_UPD_BY,\n TARGET.ACCNT_ID = SOURCE.ACCNT_ID ,\n TARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID,\n TARGET.ACCNT_NO = SOURCE.ACCNT_NO ,\n TARGET.CL_LEVEL = SOURCE.CL_LEVEL ,\n TARGET.SCORE_RANGE = SOURCE.SCORE_RANGE,\n TARGET.CL_TYPE = SOURCE.CL_TYPE ,\n TARGET.CL_CHANGE_REASON = SOURCE.CL_CHANGE_REASON,\n TARGET.OUTCOME_CD = SOURCE.OUTCOME_CD,\n TARGET.OUTCOME_REASON = SOURCE.OUTCOME_REASON,\n TARGET.CREDIT_LIMIT = SOURCE.CREDIT_LIMIT,\n TARGET.PERM_CREDIT_LIMIT = SOURCE.PERM_CREDIT_LIMIT,\n TARGET.TEMP_CREDIT_LIMIT = SOURCE.TEMP_CREDIT_LIMIT,\n TARGET.PREV_CREDIT_LIMIT = SOURCE.PREV_CREDIT_LIMIT,\n TARGET.PREV_SCORE_RANGE = SOURCE.PREV_SCORE_RANGE,\n TARGET.ACTUAL = SOURCE.ACTUAL,\n TARGET.ACTUAL_PERM = SOURCE.ACTUAL_PERM,\n TARGET.BILLING_CREDIT_LIMIT = SOURCE.BILLING_CREDIT_LIMIT ,\n TARGET.BILLING_THRESHOLD_SET_ID = SOURCE.BILLING_THRESHOLD_SET_ID ,\n TARGET.FBB_FLAG = SOURCE.FBB_FLAG ,\n TARGET.LAST_REVIEW_DAT = SOURCE.LAST_REVIEW_DAT ,\n TARGET.MIN_REVIEW = SOURCE.MIN_REVIEW ,\n TARGET.AVAILABLE_CREDIT = SOURCE.AVAILABLE_CREDIT ,\n TARGET.PAYMENT_FLG = SOURCE.PAYMENT_FLG ,\n TARGET.BA_REGISTER_DT = SOURCE.BA_REGISTER_DT\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (REF_ROW_ID ,\n CREATED ,\n CREATED_BY ,\n LAST_UPD ,\n LAST_UPD_BY ,\n ACCNT_ID ,\n BILLING_ACCNT_ID ,\n ACCNT_NO ,\n CL_LEVEL ,\n SCORE_RANGE ,\n CL_TYPE ,\n CL_CHANGE_REASON ,\n OUTCOME_CD ,\n OUTCOME_REASON ,\n CREDIT_LIMIT ,\n PERM_CREDIT_LIMIT ,\n TEMP_CREDIT_LIMIT ,\n PREV_CREDIT_LIMIT ,\n PREV_SCORE_RANGE ,\n ACTUAL ,\n ACTUAL_PERM ,\n BILLING_CREDIT_LIMIT ,\n BILLING_THRESHOLD_SET_ID ,\n FBB_FLAG ,\n LAST_REVIEW_DAT ,\n MIN_REVIEW ,\n AVAILABLE_CREDIT ,\n PAYMENT_FLG ,\n BA_REGISTER_DT ) VALUES (SOURCE.ROW_ID ,\n SOURCE.CREATED ,\n SOURCE. CREATED_BY,\n SOURCE.LAST_UPD ,\n SOURCE.LAST_UPD_BY,\n SOURCE.ACCNT_ID ,\n SOURCE.BILLING_ACCNT_ID,\n SOURCE.ACCNT_NO ,\n SOURCE.CL_LEVEL ,\n SOURCE.SCORE_RANGE,\n SOURCE.CL_TYPE ,\n SOURCE.CL_CHANGE_REASON,\n SOURCE.OUTCOME_CD,\n SOURCE.OUTCOME_REASON,\n SOURCE.CREDIT_LIMIT,\n SOURCE.PERM_CREDIT_LIMIT,\n SOURCE.TEMP_CREDIT_LIMIT,\n SOURCE.PREV_CREDIT_LIMIT,\n SOURCE.PREV_SCORE_RANGE,\n SOURCE.ACTUAL,\n SOURCE.ACTUAL_PERM,\n SOURCE.BILLING_CREDIT_LIMIT ,\n SOURCE.BILLING_THRESHOLD_SET_ID ,\n SOURCE.FBB_FLAG ,\n SOURCE.LAST_REVIEW_DAT ,\n SOURCE.MIN_REVIEW ,\n SOURCE.AVAILABLE_CREDIT ,\n SOURCE.PAYMENT_FLG ,\n SOURCE.BA_REGISTER_DT);')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Merge ca To cc_scorevalue",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('WITH SCORE AS (SELECT * FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_SCORE_VALUE WHERE DATA_ID = ',pipeline().parameters.dataId,' AND CL_LEVEL = ''CA'' AND PROCESS_TYPE LIKE ''02%'' ORDER BY DATA_SCORE_ID ASC OFFSET 0 ROWS)\nMERGE ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE AS TARGET\nUSING SCORE AS SOURCE\nON (TARGET.ACCNT_ID = SOURCE.ACCNT_ID)\nWHEN MATCHED \nTHEN \nUPDATE\nSET\n TARGET.REF_ROW_ID = SOURCE.ROW_ID ,\n TARGET.CREATED = SOURCE.CREATED ,\n TARGET.CREATED_BY = SOURCE. CREATED_BY,\n TARGET.LAST_UPD = SOURCE.LAST_UPD ,\n TARGET.LAST_UPD_BY = SOURCE.LAST_UPD_BY,\n TARGET.ACCNT_ID = SOURCE.ACCNT_ID ,\n TARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID,\n TARGET.ACCNT_NO = SOURCE.ACCNT_NO ,\n TARGET.CL_LEVEL = SOURCE.CL_LEVEL ,\n TARGET.SCORE_RANGE = SOURCE.SCORE_RANGE,\n TARGET.CL_TYPE = SOURCE.CL_TYPE ,\n TARGET.CL_CHANGE_REASON = SOURCE.CL_CHANGE_REASON,\n TARGET.OUTCOME_CD = SOURCE.OUTCOME_CD,\n TARGET.OUTCOME_REASON = SOURCE.OUTCOME_REASON,\n TARGET.CREDIT_LIMIT = SOURCE.CREDIT_LIMIT,\n TARGET.PERM_CREDIT_LIMIT = SOURCE.PERM_CREDIT_LIMIT,\n TARGET.TEMP_CREDIT_LIMIT = SOURCE.TEMP_CREDIT_LIMIT,\n TARGET.PREV_CREDIT_LIMIT = SOURCE.PREV_CREDIT_LIMIT,\n TARGET.PREV_SCORE_RANGE = SOURCE.PREV_SCORE_RANGE,\n TARGET.ACTUAL = SOURCE.ACTUAL,\n TARGET.ACTUAL_PERM = SOURCE.ACTUAL_PERM,\n TARGET.BILLING_CREDIT_LIMIT = SOURCE.BILLING_CREDIT_LIMIT ,\n TARGET.BILLING_THRESHOLD_SET_ID = SOURCE.BILLING_THRESHOLD_SET_ID ,\n TARGET.FBB_FLAG = SOURCE.FBB_FLAG ,\n TARGET.LAST_REVIEW_DAT = SOURCE.LAST_REVIEW_DAT ,\n TARGET.MIN_REVIEW = SOURCE.MIN_REVIEW ,\n TARGET.AVAILABLE_CREDIT = SOURCE.AVAILABLE_CREDIT ,\n TARGET.PAYMENT_FLG = SOURCE.PAYMENT_FLG ,\n TARGET.BA_REGISTER_DT = SOURCE.BA_REGISTER_DT\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (REF_ROW_ID ,\n CREATED ,\n CREATED_BY ,\n LAST_UPD ,\n LAST_UPD_BY ,\n ACCNT_ID ,\n BILLING_ACCNT_ID ,\n ACCNT_NO ,\n CL_LEVEL ,\n SCORE_RANGE ,\n CL_TYPE ,\n CL_CHANGE_REASON ,\n OUTCOME_CD ,\n OUTCOME_REASON ,\n CREDIT_LIMIT ,\n PERM_CREDIT_LIMIT ,\n TEMP_CREDIT_LIMIT ,\n PREV_CREDIT_LIMIT ,\n PREV_SCORE_RANGE ,\n ACTUAL ,\n ACTUAL_PERM ,\n BILLING_CREDIT_LIMIT ,\n BILLING_THRESHOLD_SET_ID ,\n FBB_FLAG ,\n LAST_REVIEW_DAT ,\n MIN_REVIEW ,\n AVAILABLE_CREDIT ,\n PAYMENT_FLG ,\n BA_REGISTER_DT ) VALUES (SOURCE.ROW_ID ,\n SOURCE.CREATED ,\n SOURCE. CREATED_BY,\n SOURCE.LAST_UPD ,\n SOURCE.LAST_UPD_BY,\n SOURCE.ACCNT_ID ,\n SOURCE.BILLING_ACCNT_ID,\n SOURCE.ACCNT_NO ,\n SOURCE.CL_LEVEL ,\n SOURCE.SCORE_RANGE,\n SOURCE.CL_TYPE ,\n SOURCE.CL_CHANGE_REASON,\n SOURCE.OUTCOME_CD,\n SOURCE.OUTCOME_REASON,\n SOURCE.CREDIT_LIMIT,\n SOURCE.PERM_CREDIT_LIMIT,\n SOURCE.TEMP_CREDIT_LIMIT,\n SOURCE.PREV_CREDIT_LIMIT,\n SOURCE.PREV_SCORE_RANGE,\n SOURCE.ACTUAL,\n SOURCE.ACTUAL_PERM,\n SOURCE.BILLING_CREDIT_LIMIT ,\n SOURCE.BILLING_THRESHOLD_SET_ID ,\n SOURCE.FBB_FLAG ,\n SOURCE.LAST_REVIEW_DAT ,\n SOURCE.MIN_REVIEW ,\n SOURCE.AVAILABLE_CREDIT ,\n SOURCE.PAYMENT_FLG ,\n SOURCE.BA_REGISTER_DT);')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Exception_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Merge ca To cc_scorevalue",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',activity('Merge ca To cc_scorevalue').Error),0,if(greater(length(activity('Merge ca To cc_scorevalue').Error),499),499,length(activity('Merge ca To cc_scorevalue').Error))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Exception_copy1_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Merge Ba To cc_scorevalue",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',activity('Merge Ba To cc_scorevalue').Error),0,if(greater(length(activity('Merge Ba To cc_scorevalue').Error),499),499,length(activity('Merge Ba To cc_scorevalue').Error))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertUpdateCaBillingProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CA_BILLING (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT CREATED AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CA_BILLING WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CA_BILLING \n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,CREATED = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Merge CC_CA_BILLING",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(add(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,1)),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,1)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Merge CC_CA_BILLING",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_UPDATE_CA_BILLING(CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,ACCNT_ID,BILLING_ACCNT_ID,STATUS_CD,DATA_ID,STATUS)\nSELECT CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,ACCNT_ID,BILLING_ACCNT_ID,BILLING_STATUS_CD,DATA_ID,''S'' AS STATUS\nFROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_CA_BILLING WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE =''02'' ORDER BY DATA_CA_ID ASC OFFSET 0 ROWS;')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Merge CC_CA_BILLING",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('Merge CC_CA_BILLING').Error),'''','\"')),0,if(greater(length(string(activity('Merge CC_CA_BILLING').Error)),499 ),499,length(string(activity('Merge CC_CA_BILLING').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DATA_ID",
										"value": {
											"value": "@pipeline().parameters.dataId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_ID",
											"type": "String"
										},
										"sink": {
											"name": "DATA_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "BILLING_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CC_LocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_DATA_FACTORY_CA_BILLING"
								}
							}
						]
					},
					{
						"name": "Update CC_DATA_FACTORY Catch_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('Copy data to CC_TEMP_FILE_DETAIL').Error),'''','\"')),0,if(greater(length(string(activity('Copy data to CC_TEMP_FILE_DETAIL').Error)),499 ),499,length(string(activity('Copy data to CC_TEMP_FILE_DETAIL').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_MoveFile_From_Clound')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get Move file info",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT SYNC_FLG,MOVE_PATH ,MOVE_BACKUP_PATH ,FILE_NAME ,FILE_NAME_SYNC  FROM ',variables('SCHEMA'),'.CC_RESPONSE_FILE crf WHERE RES_ID = ',pipeline().parameters.resId,' AND STATUS = ''O'';')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "If get info not found or move path is null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "get Move file info",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('get Move file info').output),'firstRow')),equals(if(equals(trim(coalesce(activity('get Move file info').output.firstRow.MOVE_PATH,'')),''),null,activity('get Move file info').output.firstRow.MOVE_PATH),null))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "insert CC_DATA_FACTORY onprocess",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''O'',''Process move file resId ',pipeline().parameters.resId,''');')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set dataId",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "insert CC_DATA_FACTORY onprocess",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "dataId",
										"value": {
											"value": "@string(first(first(activity('insert CC_DATA_FACTORY onprocess').output.resultSets).rows).DATA_ID)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileNameSync",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set dataId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileNameSync",
										"value": {
											"value": "@if(empty(activity('get Move file info').output.firstRow.FILE_NAME_SYNC),'',replace(activity('get Move file info').output.firstRow.FILE_NAME_SYNC,variables('rootfolder'),''))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileNameSyncOnly",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileNameSync",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileNameSyncOnly",
										"value": {
											"value": "@if(empty(variables('fileNameSync')),'',split(variables('fileNameSync'),'/')[sub(length(split(variables('fileNameSync'),'/')),1)])",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileName",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set dataId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@if(empty(activity('get Move file info').output.firstRow.FILE_NAME),'',replace(activity('get Move file info').output.firstRow.FILE_NAME,variables('rootfolder'),''))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileNameDatOnly",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileNameDatOnly",
										"value": {
											"value": "@if(empty(variables('fileName')),null,split(variables('fileName'),'/')[sub(length(split(variables('fileName'),'/')),1)])",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set syncFlg",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set dataId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "syncFlg",
										"value": {
											"value": "@if(equals(activity('get Move file info').output.firstRow.SYNC_FLG,null),'',activity('get Move file info').output.firstRow.SYNC_FLG)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveBackUpPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set dataId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveBackUpPath",
										"value": {
											"value": "@if(equals(activity('get Move file info').output.firstRow.MOVE_BACKUP_PATH,null),'',activity('get Move file info').output.firstRow.MOVE_BACKUP_PATH)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set movePath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set dataId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "movePath",
										"value": {
											"value": "@if(equals(activity('get Move file info').output.firstRow.MOVE_PATH,null),'',activity('get Move file info').output.firstRow.MOVE_PATH)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "validate sync flg",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set syncFlg",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set moveBackUpPath",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set movePath",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set fileNameDatOnly",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set fileNameSyncOnly",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "@if(and(equals(variables('syncFlg'),'Y'),or(empty(variables('fileName')),empty(variables('fileNameSync')))),'Sync flg is active but fileName or fileNameSync is empty',if(and(not(equals(variables('syncFlg'),'Y')),empty(variables('fileName'))),'Sync flg is inactive but fileName is empty',''))",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set errorQueryDataNotFound",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": "errorQueryDataNotFound"
									}
								}
							]
						}
					},
					{
						"name": "Switch case movefile",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "If get info not found or move path is null",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(not(empty(variables('errorMessage'))),if(equals(variables('errorMessage'),'errorQueryDataNotFound'),variables('errorMessage'),'error'),if(equals(variables('syncFlg'),'Y'),'SyncFlg','NotSyncFlg'))",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "error",
									"activities": [
										{
											"name": "Update Data fac process",
											"description": "",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',variables('CREDIT_USER'),''',\n\tFILE_NAME = ',concat('''',variables('fileName'),''''),',\n\tFILE_NAME_SYNC = ',concat('''',variables('fileNameSync'),''''),',\n\tFILE_PATH = ''',variables('movePath'),''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',variables('errorMessage'),'''\n\tWHERE DATA_ID =',variables('dataId'),';')",
															"type": "Expression"
														}
													}
												]
											}
										},
										{
											"name": "Update response file process",
											"description": "",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',variables('SCHEMA'),'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',variables('CREDIT_USER'),''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',variables('errorMessage'),'''\n\tWHERE RES_ID =',pipeline().parameters.resId,';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "SyncFlg",
									"activities": [
										{
											"name": "CC_MoveFile_From_Clound_HaveSync",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_MoveFile_From_Clound_HaveSync",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"fileName": {
														"value": "@variables('fileName')",
														"type": "Expression"
													},
													"fileNameSync": {
														"value": "@variables('fileNameSync')",
														"type": "Expression"
													},
													"MovePath": {
														"value": "@variables('movePath')",
														"type": "Expression"
													},
													"MoveBackupPath": {
														"value": "@variables('moveBackUpPath')",
														"type": "Expression"
													},
													"fileNameOnly": {
														"value": "@variables('fileNameDatOnly')",
														"type": "Expression"
													},
													"fileNameSyncOnly": {
														"value": "@variables('fileNameSyncOnly')",
														"type": "Expression"
													},
													"SCHEMA": {
														"value": "@variables('SCHEMA')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@variables('CREDIT_USER')",
														"type": "Expression"
													},
													"resId": {
														"value": "@pipeline().parameters.resId",
														"type": "Expression"
													},
													"rootFolder": {
														"value": "@variables('rootfolder')",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "NotSyncFlg",
									"activities": [
										{
											"name": "CC_MoveFile_From_Clound_NotHaveSync",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_MoveFile_From_Clound_NotHaveSync",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"fileName": {
														"value": "@variables('fileName')",
														"type": "Expression"
													},
													"MovePath": {
														"value": "@variables('movePath')",
														"type": "Expression"
													},
													"MoveBackupPath": {
														"value": "@variables('moveBackUpPath')",
														"type": "Expression"
													},
													"fileNameOnly": {
														"value": "@variables('fileNameDatOnly')",
														"type": "Expression"
													},
													"SCHEMA": {
														"value": "@variables('SCHEMA')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@variables('CREDIT_USER')",
														"type": "Expression"
													},
													"resId": {
														"value": "@pipeline().parameters.resId",
														"type": "Expression"
													},
													"rootFolder": {
														"value": "@variables('rootfolder')",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "errorQueryDataNotFound",
									"activities": [
										{
											"name": "insert CC_DATA_FACTORY Error data not found",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''Query Data not found resId ',pipeline().parameters.resId,''');')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "insert CC_DATA_FACTORY exception",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Switch case movefile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',substring(concat('Data factory Exception :',replace(string(activity('Switch case movefile').Error),'''','\"')),0,if(less(length(replace(string(activity('Switch case movefile').Error),'''','\"')),499),length(replace(string(activity('Switch case movefile').Error),'''','\"')),499)),''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update response file error",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Switch case movefile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',variables('SCHEMA'),'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',variables('CREDIT_USER'),''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',substring(concat('Data factory Exception :',replace(string(activity('Switch case movefile').Error),'''','\"')),0,if(less(length(replace(string(activity('Switch case movefile').Error),'''','\"')),499),length(replace(string(activity('Switch case movefile').Error),'''','\"')),499)),'''\n\tWHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"resId": {
						"type": "string"
					}
				},
				"variables": {
					"syncFlg": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileNameSync": {
						"type": "String"
					},
					"movePath": {
						"type": "String"
					},
					"moveBackUpPath": {
						"type": "String"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_UAT"
					},
					"fileNameDatOnly": {
						"type": "String"
					},
					"fileNameSyncOnly": {
						"type": "String"
					},
					"rootfolder": {
						"type": "String",
						"defaultValue": "/bsaaksfileshare"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATAFAC_MOVE_FILE"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "MOVE_FILE"
					},
					"errorMessage": {
						"type": "String"
					},
					"dataId": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewCreateFileOutput')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "insert response file onprocess",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tRES_TYPE,\n\tSTATUS,\n\tFILE_NAME) OUTPUT INSERTED.RES_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.fileType,''',\n\t''O'',''',pipeline().parameters.fileName,''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set resId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "insert response file onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "resId",
							"value": {
								"value": "@string(first(first(activity('insert response file onprocess').output.resultSets).rows).RES_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup file detail",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set resId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT COALESCE(FILE_LINE+''|''+ERROR_MSG ,FILE_LINE) AS errorLine, STATUS AS status \n        FROM CREDIT_DEV.CC_TEMP_FILE_DETAIL \n        WHERE FILE_ID = ',pipeline().parameters.fileId,' ORDER BY FILE_DTL_ID;')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "If not Have Archive",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup file detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.fileNameArchive,string(null) )",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute createFileAndNotFileArchive",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewCreateFileOutputAndArchive",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"fileType": {
												"value": "@pipeline().parameters.fileType",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"fileId": {
												"value": "@pipeline().parameters.fileId",
												"type": "Expression"
											},
											"fileNameArchive": {
												"value": "@pipeline().parameters.fileNameArchive",
												"type": "Expression"
											},
											"countRecord": {
												"value": "@activity('Lookup file detail').output.count",
												"type": "Expression"
											},
											"resId": {
												"value": "@variables('resId')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert response file ExceptionError",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set error exception_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',variables('exceptionMessage'),'''  WHERE RES_ID =',variables('resId'),'')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set error exception_copy1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Execute createFileAndNotFileArchive",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "exceptionMessage",
										"value": {
											"value": "@substring(concat('Datafactory Exception :',replace(activity('Execute createFileAndNotFileArchive').Error.Message,'''','\"')),0,if(less(length(replace(activity('Execute createFileAndNotFileArchive').Error.Message,'''','\"')),499),length(replace(activity('Execute createFileAndNotFileArchive').Error.Message,'''','\"')),499))",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute createFileAndNotArchive",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewCreateFileOutputNotArchive",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"fileType": {
												"value": "@pipeline().parameters.fileType",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"fileId": {
												"value": "@pipeline().parameters.fileId",
												"type": "Expression"
											},
											"countRecord": {
												"value": "@activity('Lookup file detail').output.count",
												"type": "Expression"
											},
											"resId": {
												"value": "@variables('resId')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert response file ExceptionError 1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set error exception",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',variables('exceptionMessage'),'''  WHERE RES_ID =',variables('resId'),'')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set error exception",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Execute createFileAndNotArchive",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "exceptionMessage",
										"value": {
											"value": "@substring(concat('Datafac Exception ',replace(string(activity('Execute createFileAndNotArchive')),'''','''''')),0,499)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"fileType": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"fileId": {
						"type": "string"
					},
					"fileNameArchive": {
						"type": "string"
					}
				},
				"variables": {
					"resId": {
						"type": "String"
					},
					"switchCaseVal": {
						"type": "String"
					},
					"exceptionMessage": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewDataFacInsertBillingProfileProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update CC_DATA_FACTORY Success_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactory Exception :',replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),0,if(less(length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499),length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499)),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DATA_ID",
										"value": {
											"value": "@pipeline().parameters.dataId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DATA_ID",
											"type": "String"
										},
										"sink": {
											"name": "DATA_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "REGISTER_DT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "FBB_FLAG",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "POST_PAID_FLAG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "COUNT_SME_MOBILE",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CC_LocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_DATA_FACTORY_BILLING_REVIEW"
								}
							}
						]
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_REVIEW (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ROW_ID AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_REVIEW WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_REVIEW \n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ROW_ID = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE to CC_BILLING_REVIEW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,2)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE to CC_BILLING_REVIEW",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('MERGE to CC_BILLING_REVIEW').Error),'''','\"')),0,if(greater(length(string(activity('MERGE to CC_BILLING_REVIEW').Error)),499 ),499,length(string(activity('MERGE to CC_BILLING_REVIEW').Error)))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "MERGE to CC_BILLING_REVIEW",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_BILLING_REVIEW (ROW_ID ,\n\tCREATED ,\n\tCREATED_BY ,\n\tLAST_UPD ,\n\tLAST_UPD_BY ,\n\tACCNT_NO ,\n\tACCNT_CATEGORY ,\n\tACCNT_SUB_CATEGORY ,\n\tBILL_CYCLE ,\n\tPAYMENT_METHOD ,\n\tMASTER_ACCNT_ID ,\n\tSTATUS_CD ,\n\tBILLING_STATUS_CD ,\n\tREGISTER_DT ,\n\tFBB_FLAG ,\n\tCOUNT_SME_MOBILE,\n\tPOST_PAID_FLAG)\nSELECT ROW_ID ,\n\tCREATED ,\n\tCREATED_BY ,\n\tLAST_UPD ,\n\tLAST_UPD_BY ,\n\tACCNT_NO ,\n\tACCNT_CATEGORY ,\n\tACCNT_SUB_CATEGORY ,\n\tBILL_CYCLE ,\n\tPAYMENT_METHOD ,\n\tMASTER_ACCNT_ID ,\n\tSTATUS_CD ,\n\tBILLING_STATUS_CD ,\n\tREGISTER_DT ,\n\tFBB_FLAG ,\n\tCOUNT_SME_MOBILE ,\n\tPOST_PAID_FLAG \nFROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_REVIEW WHERE DATA_ID = ',pipeline().parameters.dataId,'  AND PROCESS_TYPE =''02'' ORDER BY DATA_BILLING_ID ASC OFFSET 0 ROWS;')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					},
					"fileDatNameNotExension": {
						"type": "String"
					},
					"fileDatExension": {
						"type": "String"
					},
					"fileSyncNotExension": {
						"type": "String"
					},
					"fileSyncExension": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewUpdateArpuProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "FILE_ID",
										"value": {
											"value": "@variables('tempFileDatId')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 2000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FILE_ID",
											"type": "String"
										},
										"sink": {
											"name": "FILE_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "BILLING_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "ARPU",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "ARPU_DT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "REMARK",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false,
									"dateTimeFormat": "yyyyMMdd"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CC_LocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_TEMP_FILE_ARPU"
								}
							}
						]
					},
					{
						"name": "Insert CC_TEMP_FILE_DAT",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set fileNameArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tFILE_TYPE,\n\tFILE_NAME,\n\tFILE_NAME_ARCHIVE,\n\tFILE_PROCESS_TIME,\n\tSTATUS) OUTPUT INSERTED.FILE_ID  \n\tVALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.FILE_TYPE,''',\n\t''',pipeline().parameters.fileDatName,''',\n\t''',variables('fileNameArchive'),''',\n\t''',variables('fileProcessTime'),''',\n\t''O'');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set temp file dat Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Insert CC_TEMP_FILE_DAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "tempFileDatId",
							"value": {
								"value": "@string(first(first(activity('Insert CC_TEMP_FILE_DAT').output.resultSets).rows).FILE_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Move Data Dat Succes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE\n\t',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''S''',\n\t', DESCRIPTION = ''Insert data on file update ',pipeline().parameters.FILE_UPDATE_TYPE,' complete''',\n\t' WHERE FILE_ID =',variables('tempFileDatId'),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Move Data Dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE\n\t',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E''',\n\t''', DESCRIPTION = ''', substring(concat('Datafactory Exception :',replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),0,if(less(length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499),length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499)),'''',\n\t' WHERE FILE_ID =',variables('tempFileDatId'),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set fileProcessTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "update file dat onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileProcessTime",
							"value": {
								"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','North Asia Standard Time'),'yyyyMMddHHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileNameArchive",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileProcessTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@concat(variables('fileDatNameNotExension'),'_',variables('fileProcessTime'),'.',variables('fileDatExension'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "update file dat onprocess",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set description on process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''P'',',\n\t' DESCRIPTION = ''',variables('descriptionOnprocess'),'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Lookup FIle Dat",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set fileDatExension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "update review End Process Success",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "send web service to arpu",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''S''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update review End Process Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move Data Dat Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''',substring(concat('Datafactory Exception :',replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),0,if(less(length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499),length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499)),'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set fileDatNameNotExtension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileSyncExension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatNameNotExension",
							"value": {
								"value": "@if(greater(length(split(pipeline().parameters.fileDatName,'.')),2),join(take(split(pipeline().parameters.fileDatName,'.'),sub(length(split(pipeline().parameters.fileDatName,'.')),1)),'.'),split(pipeline().parameters.fileDatName,'.')[0])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileDatExension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileDatNameNotExtension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatExension",
							"value": {
								"value": "@split(pipeline().parameters.fileDatName,'.')[sub(length(split(pipeline().parameters.fileDatName,'.')),1)]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileSyncNameNotExtension",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileSyncNotExension",
							"value": {
								"value": "@if(greater(length(split(pipeline().parameters.fileSyncName,'.')),2),join(take(split(pipeline().parameters.fileSyncName,'.'),sub(length(split(pipeline().parameters.fileSyncName,'.')),1)),'.'),split(pipeline().parameters.fileSyncName,'.')[0])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileSyncExension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileSyncNameNotExtension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileSyncExension",
							"value": {
								"value": "@split(pipeline().parameters.fileSyncName,'.')[sub(length(split(pipeline().parameters.fileSyncName,'.')),1)]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set description on process",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup FIle Dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "descriptionOnprocess",
							"value": {
								"value": "@concat('Process file name : ',pipeline().parameters.fileDatName,' total count ',string(length(activity('Lookup FIle Dat').output.value)),' record -> count process ',if(equals(pipeline().parameters.CREDIT_USER,'DATA_FAC_UPDATE_PAYMENT'),string(length(activity('Lookup FIle Dat').output.value)),string(sub(length(activity('Lookup FIle Dat').output.value),2))),' record.')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Move Path is Empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "send web service to arpu",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(pipeline().parameters.moveInputPath)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Move FIle Sync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inDir": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"outDir": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"inName": {
												"value": "@pipeline().parameters.fileSyncName",
												"type": "Expression"
											},
											"outName": {
												"value": "@concat(variables('fileSyncNotExension'),'_',variables('fileProcessTime'),'.',variables('fileSyncExension'))",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Move FIle Dat",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inDir": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"outDir": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"inName": {
												"value": "@pipeline().parameters.fileDatName",
												"type": "Expression"
											},
											"outName": {
												"value": "@variables('fileNameArchive')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "update review End Process Move file sync Error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Move FIle Sync",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "update review End Process Move file dat Error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Move FIle Dat",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_ARPU (FILE_ID,PROCESS_TYPE) VALUES (',variables('tempFileDatId'),',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set temp file dat Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ACCNT_NO AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_ARPU WHERE FILE_ID = ',variables('tempFileDatId'),' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_ARPU \n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ACCNT_NO = NULL \n    WHERE FILE_ID = ',variables('tempFileDatId'),' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "send web service to arpu",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Move Data Dat Succes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-16.eastasia.logic.azure.com:443/workflows/3a1cd86eb4d9406a8a81ca18d5376c93/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=2R7osFR4YvR04fVwoRHMG2KKRWyfO3MOEL1vnC_M9E0",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(concat('{\n  \"process\" : \"UPDATE_ARPU\",\n  \"fileId\" : ',variables('tempFileDatId'),'\n }'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileDatName": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					},
					"reviewId": {
						"type": "string"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessTime": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"tempFileDatId": {
						"type": "String"
					},
					"fileDatNameNotExension": {
						"type": "String"
					},
					"fileDatExension": {
						"type": "String"
					},
					"fileSyncNotExension": {
						"type": "String"
					},
					"fileSyncExension": {
						"type": "String"
					},
					"descriptionOnprocess": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewUpdateCreditgradeProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "FILE_ID",
										"value": {
											"value": "@variables('tempFileDatId')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 2000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FILE_ID",
											"type": "String"
										},
										"sink": {
											"name": "FILE_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "BILLING_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREDIT_GRADE",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false,
									"dateTimeFormat": "yyyyMMdd"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CC_LocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_TEMP_FILE_CREDIT_GRADE"
								}
							}
						]
					},
					{
						"name": "Insert CC_TEMP_FILE_DAT",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set fileNameArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tFILE_TYPE,\n\tFILE_NAME,\n\tFILE_NAME_ARCHIVE,\n\tFILE_PROCESS_TIME,\n\tSTATUS) OUTPUT INSERTED.FILE_ID  \n\tVALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.FILE_TYPE,''',\n\t''',pipeline().parameters.fileDatName,''',\n\t''',variables('fileNameArchive'),''',\n\t''',variables('fileProcessTime'),''',\n\t''O'');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set temp file dat Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Insert CC_TEMP_FILE_DAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "tempFileDatId",
							"value": {
								"value": "@string(first(first(activity('Insert CC_TEMP_FILE_DAT').output.resultSets).rows).FILE_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Move Data Dat Succes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE\n\t',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''S''',\n\t', DESCRIPTION = ''Insert data on file update ',pipeline().parameters.FILE_UPDATE_TYPE,' complete''',\n\t' WHERE FILE_ID =',variables('tempFileDatId'),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Move Data Dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE\n\t',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E''',\n\t''', DESCRIPTION = ''', substring(concat('Datafactory Exception :',replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),0,if(less(length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499),length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499)),'''',\n\t' WHERE FILE_ID =',variables('tempFileDatId'),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set fileProcessTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "update file dat onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileProcessTime",
							"value": {
								"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','North Asia Standard Time'),'yyyyMMddHHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileNameArchive",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileProcessTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@concat(variables('fileDatNameNotExension'),'_',variables('fileProcessTime'),'.',variables('fileDatExension'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "update file dat onprocess",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set description on process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''P'',',\n\t' DESCRIPTION = ''',variables('descriptionOnprocess'),'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Lookup FIle Dat",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set fileDatExension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "update review End Process Success",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "send web service to credit grade",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''S''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update review End Process Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move Data Dat Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''',substring(concat('Datafactory Exception :',replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),0,if(less(length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499),length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499)),'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set fileDatNameNotExtension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileSyncExension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatNameNotExension",
							"value": {
								"value": "@if(greater(length(split(pipeline().parameters.fileDatName,'.')),2),join(take(split(pipeline().parameters.fileDatName,'.'),sub(length(split(pipeline().parameters.fileDatName,'.')),1)),'.'),split(pipeline().parameters.fileDatName,'.')[0])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileDatExension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileDatNameNotExtension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatExension",
							"value": {
								"value": "@split(pipeline().parameters.fileDatName,'.')[sub(length(split(pipeline().parameters.fileDatName,'.')),1)]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileSyncNameNotExtension",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileSyncNotExension",
							"value": {
								"value": "@if(greater(length(split(pipeline().parameters.fileSyncName,'.')),2),join(take(split(pipeline().parameters.fileSyncName,'.'),sub(length(split(pipeline().parameters.fileSyncName,'.')),1)),'.'),split(pipeline().parameters.fileSyncName,'.')[0])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileSyncExension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileSyncNameNotExtension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileSyncExension",
							"value": {
								"value": "@split(pipeline().parameters.fileSyncName,'.')[sub(length(split(pipeline().parameters.fileSyncName,'.')),1)]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set description on process",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup FIle Dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "descriptionOnprocess",
							"value": {
								"value": "@concat('Process file name : ',pipeline().parameters.fileDatName,' total count ',string(length(activity('Lookup FIle Dat').output.value)),' record -> count process ',if(equals(pipeline().parameters.CREDIT_USER,'DATA_FAC_UPDATE_PAYMENT'),string(length(activity('Lookup FIle Dat').output.value)),string(sub(length(activity('Lookup FIle Dat').output.value),2))),' record.')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Move Path is Empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "send web service to credit grade",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(pipeline().parameters.moveInputPath)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Move FIle Sync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inDir": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"outDir": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"inName": {
												"value": "@pipeline().parameters.fileSyncName",
												"type": "Expression"
											},
											"outName": {
												"value": "@concat(variables('fileSyncNotExension'),'_',variables('fileProcessTime'),'.',variables('fileSyncExension'))",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Move FIle Dat",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inDir": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"outDir": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"inName": {
												"value": "@pipeline().parameters.fileDatName",
												"type": "Expression"
											},
											"outName": {
												"value": "@variables('fileNameArchive')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "update review End Process Move file sync Error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Move FIle Sync",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "update review End Process Move file dat Error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Move FIle Dat",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_CREDIT_GRADE (FILE_ID,PROCESS_TYPE) VALUES (',variables('tempFileDatId'),',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set temp file dat Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ACCNT_NO AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_CREDIT_GRADE WHERE FILE_ID = ',variables('tempFileDatId'),' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_CREDIT_GRADE\n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ACCNT_NO = NULL \n    WHERE FILE_ID = ',variables('tempFileDatId'),' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "send web service to credit grade",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Move Data Dat Succes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-06.eastasia.logic.azure.com:443/workflows/5cc4635f51c64074b381e1e2a473e093/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=hJpsPG9ZkXe6kKDNc0FBa-R4be0grEHIGVF-DpRgFF4",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(concat('{\n  \"process\" : \"UPDATE_CREDIT_GRADE\",\n  \"fileId\" : ',variables('tempFileDatId'),'\n }'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileDatName": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					},
					"reviewId": {
						"type": "string"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessTime": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"tempFileDatId": {
						"type": "String"
					},
					"fileDatNameNotExension": {
						"type": "String"
					},
					"fileDatExension": {
						"type": "String"
					},
					"fileSyncNotExension": {
						"type": "String"
					},
					"fileSyncExension": {
						"type": "String"
					},
					"descriptionOnprocess": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewUpdatePaymentProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set temp file dat Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "FILE_ID",
										"value": {
											"value": "@variables('tempFileDatId')",
											"type": "Expression"
										}
									},
									{
										"name": "STATUS",
										"value": "S"
									},
									{
										"name": "PROCESS_TYPE",
										"value": "02"
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 2000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FILE_ID",
											"type": "String"
										},
										"sink": {
											"name": "FILE_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"name": "PROCESS_TYPE",
											"type": "String"
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "PAYMENT_FLG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "PAYMENT_DATE",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CC_LocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_TEMP_FILE_PAYMENT_FLG"
								}
							}
						]
					},
					{
						"name": "Insert CC_TEMP_FILE_DAT",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set fileNameArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tFILE_TYPE,\n\tFILE_NAME,\n\tFILE_NAME_ARCHIVE,\n\tFILE_PROCESS_TIME,\n\tSTATUS) OUTPUT INSERTED.FILE_ID  \n\tVALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.FILE_TYPE,''',\n\t''',pipeline().parameters.fileDatName,''',\n\t''',variables('fileNameArchive'),''',\n\t''',variables('fileProcessTime'),''',\n\t''O'');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set temp file dat Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Insert CC_TEMP_FILE_DAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "tempFileDatId",
							"value": {
								"value": "@string(first(first(activity('Insert CC_TEMP_FILE_DAT').output.resultSets).rows).FILE_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Move Data Dat Succes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE\n\t',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''S''',\n\t', DESCRIPTION = ''Insert data on file update ',pipeline().parameters.FILE_UPDATE_TYPE,' complete''',\n\t' WHERE FILE_ID =',variables('tempFileDatId'),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Move Data Dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE\n\t',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E''',\n\t''', DESCRIPTION = ''', substring(concat('Datafactory Exception :',replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),0,if(less(length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499),length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499)),'''',\n\t' WHERE FILE_ID =',variables('tempFileDatId'),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set fileProcessTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "update file dat onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileProcessTime",
							"value": {
								"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','North Asia Standard Time'),'yyyyMMddHHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileNameArchive",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileProcessTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@concat(variables('fileDatNameNotExension'),'_',variables('fileProcessTime'),'.',variables('fileDatExension'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "update file dat onprocess",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set description on process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''P'',',\n\t' DESCRIPTION = ''',variables('descriptionOnprocess'),'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Lookup FIle Dat",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set fileDatExension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "update review End Process Success",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Send Trigger Update Payment",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''S''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update review End Process Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move Data Dat Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''',substring(concat('Datafactory Exception :',replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),0,if(less(length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499),length(replace(activity('Copy data to CC_TEMP_FILE_DETAIL').Error.Message,'''','\"')),499)),'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set fileDatNameNotExtension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileSyncExension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatNameNotExension",
							"value": {
								"value": "@if(greater(length(split(pipeline().parameters.fileDatName,'.')),2),join(take(split(pipeline().parameters.fileDatName,'.'),sub(length(split(pipeline().parameters.fileDatName,'.')),1)),'.'),split(pipeline().parameters.fileDatName,'.')[0])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileDatExension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileDatNameNotExtension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatExension",
							"value": {
								"value": "@split(pipeline().parameters.fileDatName,'.')[sub(length(split(pipeline().parameters.fileDatName,'.')),1)]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileSyncNameNotExtension",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileSyncNotExension",
							"value": {
								"value": "@if(greater(length(split(pipeline().parameters.fileSyncName,'.')),2),join(take(split(pipeline().parameters.fileSyncName,'.'),sub(length(split(pipeline().parameters.fileSyncName,'.')),1)),'.'),split(pipeline().parameters.fileSyncName,'.')[0])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileSyncExension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileSyncNameNotExtension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileSyncExension",
							"value": {
								"value": "@split(pipeline().parameters.fileSyncName,'.')[sub(length(split(pipeline().parameters.fileSyncName,'.')),1)]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set description on process",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup FIle Dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "descriptionOnprocess",
							"value": {
								"value": "@concat('Process file name : ',pipeline().parameters.fileDatName,' total count ',string(length(activity('Lookup FIle Dat').output.value)),' record -> count process ',if(equals(pipeline().parameters.CREDIT_USER,'DATA_FAC_UPDATE_PAYMENT'),string(length(activity('Lookup FIle Dat').output.value)),string(sub(length(activity('Lookup FIle Dat').output.value),2))),' record.')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Move Path is Empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Send Trigger Update Payment",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(pipeline().parameters.moveInputPath)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Move FIle Sync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inDir": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"outDir": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"inName": {
												"value": "@pipeline().parameters.fileSyncName",
												"type": "Expression"
											},
											"outName": {
												"value": "@concat(variables('fileSyncNotExension'),'_',variables('fileProcessTime'),'.',variables('fileSyncExension'))",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Move FIle Dat",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inDir": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"outDir": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"inName": {
												"value": "@pipeline().parameters.fileDatName",
												"type": "Expression"
											},
											"outName": {
												"value": "@variables('fileNameArchive')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "update review End Process Move file sync Error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Move FIle Sync",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "update review End Process Move file dat Error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Move FIle Dat",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Send Trigger Update Payment",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Move Data Dat Succes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-02.eastasia.logic.azure.com:443/workflows/9e968264b8fb478496e07b9a7e85db56/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=wGerrTmlPl4OUgqDTUMozuMdGflz20vZLimuQ-d4k3w",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "@json(concat('{\n  \"process\" : \"UPDATE_PAYMENT_FLAG\",\n  \"fileId\" : ',variables('tempFileDatId'),'\n }'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileDatName": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					},
					"reviewId": {
						"type": "string"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessTime": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"tempFileDatId": {
						"type": "String"
					},
					"fileDatNameNotExension": {
						"type": "String"
					},
					"fileDatExension": {
						"type": "String"
					},
					"fileSyncNotExension": {
						"type": "String"
					},
					"fileSyncExension": {
						"type": "String"
					},
					"descriptionOnprocess": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryProcessFileSyncChildren')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Read File Sync",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set dataId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileinputName')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get File size Dat",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Setfor file Dat Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CC_LocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileDatName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"size",
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If file size equal and exist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get File size Dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(activity('Get File size Dat').output.exists,equals(variables('fileDatSize'), string(if(contains(activity('Get File size Dat').output,'size'),activity('Get File size Dat').output.size,0))))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set executePipeLineName error message",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "executePipeLineName",
										"value": "error message file dat size not mapping"
									}
								}
							]
						}
					},
					{
						"name": "Setfor file Dat Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set For each file dat size",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatName",
							"value": {
								"value": "@trim(string(split(activity('Read File Sync').output.firstRow.Prop_0,'|')[0]))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set For each file dat size",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Read File Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatSize",
							"value": {
								"value": "@trim(split(activity('Read FIle Sync').output.firstRow.Prop_0,'|')[1])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set dataId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "insert data factory  process file sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "dataId",
							"value": {
								"value": "@string(first(first(activity('insert data factory  process file sync').output.resultSets).rows).DATA_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileInputName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set executePipeLineName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileinputName",
							"value": {
								"value": "@pipeline().parameters.fileInputName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "insert data factory  process file sync",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set fileInputName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tFILE_PATH,\n\tFILE_NAME_SYNC,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID\t VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.DATA_TYPE,''',\n\t''',pipeline().parameters.inputPath,''',\n\t''',pipeline().parameters.fileInputName,''',\n\t''P'',''Process file name :  ',pipeline().parameters.fileInputName,''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Switch Case Execute pipeline dat",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "If file size equal and exist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('executePipeLineName')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "error message file dat size not mapping",
									"activities": [
										{
											"name": "update file dat data not mapping",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY  \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t'FILE_NAME = ''',variables('fileDatName'),''',',\n\t' DESCRIPTION = ''file name data not found/file size no mapping file result ',pipeline().parameters.fileInputName,'''',\n\t' WHERE DATA_ID =',variables('dataId'),';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "CC_ReviewDataFacInsertBillingProfileProcessDat",
									"activities": [
										{
											"name": "Execute CC_ReviewDataFacInsertBillingProfileProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_ReviewDataFacInsertBillingProfileProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Exception  CC_ReviewInsertBillingProfileProcessDat",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Execute CC_ReviewDataFacInsertBillingProfileProcessDat",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY  \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t'FILE_NAME = ''',variables('fileDatName'),''',',\n\t' DESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('Execute CC_ReviewDataFacInsertBillingProfileProcessDat').Error),'''','\"')),0,if(greater(length(string(activity('Execute CC_ReviewDataFacInsertBillingProfileProcessDat').Error)),499 ),499,length(string(activity('Execute CC_ReviewDataFacInsertBillingProfileProcessDat').Error)))),'''',\n\t' WHERE DATA_ID =',variables('dataId'),';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "CC_ChangeCatSubcatInsertBillingAccountNoProcessDat",
									"activities": [
										{
											"name": "CC_DataFactoryInsertBillingChangeCatSubcatProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertBillingChangeCatSubcatProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Exception CC_InsertBillingChangeCatSubcatProcessDat",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "CC_DataFactoryInsertBillingChangeCatSubcatProcessDat",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY  \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t'FILE_NAME = ''',variables('fileDatName'),''',',\n\t' DESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('CC_DataFactoryInsertBillingChangeCatSubcatProcessDat').Error),'''','\"')),0,if(greater(length(string(activity('CC_DataFactoryInsertBillingChangeCatSubcatProcessDat').Error)),499 ),499,length(string(activity('CC_DataFactoryInsertBillingChangeCatSubcatProcessDat').Error)))),'''',\n\t' WHERE DATA_ID =',variables('dataId'),';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "CC_ChangeCatSubcatDataFactoryInsertProfileChangeProcessDat",
									"activities": [
										{
											"name": "CC_DataFactoryInsertProfileChangeProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_ChangeCatSubcatDataFactoryInsertProfileChangeProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Exception CC_DataFactoryInsertProfileChangeProcessDat",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "CC_DataFactoryInsertProfileChangeProcessDat",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY  \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t'FILE_NAME = ''',variables('fileDatName'),''',',\n\t' DESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('CC_DataFactoryInsertProfileChangeProcessDat').Error),'''','\"')),0,if(greater(length(string(activity('CC_DataFactoryInsertProfileChangeProcessDat').Error)),499 ),499,length(string(activity('CC_DataFactoryInsertProfileChangeProcessDat').Error)))),'''',\n\t' WHERE DATA_ID =',variables('dataId'),';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat",
									"activities": [
										{
											"name": "CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Exception CC_InsertOrUpdateNegotiationValueProcessDat",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY  \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t'FILE_NAME = ''',variables('fileDatName'),''',',\n\t' DESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat').Error),'''','\"')),0,if(greater(length(string(activity('CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat').Error)),499 ),499,length(string(activity('CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat').Error)))),'''',\n\t' WHERE DATA_ID =',variables('dataId'),';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "CC_DataFactoryInsertOrUpdateScoreValueProcessDat",
									"activities": [
										{
											"name": "CC_DataFactoryInsertOrUpdateScoreValueProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertOrUpdateScoreValueProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Exception CC_InsertOrUpdateScoreValueProcessDat",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "CC_DataFactoryInsertOrUpdateScoreValueProcessDat",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY  \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t'FILE_NAME = ''',variables('fileDatName'),''',',\n\t' DESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('CC_DataFactoryInsertOrUpdateScoreValueProcessDat').Error),'''','\"')),0,if(greater(length(string(activity('CC_DataFactoryInsertOrUpdateScoreValueProcessDat').Error)),499 ),499,length(string(activity('CC_DataFactoryInsertOrUpdateScoreValueProcessDat').Error)))),'''',\n\t' WHERE DATA_ID =',variables('dataId'),';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "CC_DataFactoryInsertOrUpdateCreditAssignProcessDat",
									"activities": [
										{
											"name": "CC_DataFactoryInsertOrUpdateCreditAssignProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertOrUpdateCreditAssignProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Exception CC_DataFactoryInsertOrUpdateCreditAssign",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "CC_DataFactoryInsertOrUpdateCreditAssignProcessDat",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY  \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t'FILE_NAME = ''',variables('fileDatName'),''',',\n\t' DESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('CC_DataFactoryInsertOrUpdateCreditAssignProcessDat').Error),'''','\"')),0,if(greater(length(string(activity('CC_DataFactoryInsertOrUpdateCreditAssignProcessDat').Error)),499 ),499,length(string(activity('CC_DataFactoryInsertOrUpdateCreditAssignProcessDat').Error)))),'''',\n\t' WHERE DATA_ID =',variables('dataId'),';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "CC_DataFactoryInsertUpdateCaBillingProcessDat",
									"activities": [
										{
											"name": "CC_DataFactoryInsertUpdateCaBillingProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertUpdateCaBillingProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "Exception CC_DataFactoryInsertUpdateCaBillingProcessDat",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "CC_DataFactoryInsertUpdateCaBillingProcessDat",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY  \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t'FILE_NAME = ''',variables('fileDatName'),''',',\n\t' DESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('CC_DataFactoryInsertUpdateCaBillingProcessDat').Error),'''','\"')),0,if(greater(length(string(activity('CC_DataFactoryInsertUpdateCaBillingProcessDat').Error)),499 ),499,length(string(activity('CC_DataFactoryInsertUpdateCaBillingProcessDat').Error)))),'''',\n\t' WHERE DATA_ID =',variables('dataId'),';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Fail Not Have Pipeline Name in data factory",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Fail Not Have Pipeline Name in data factory",
										"errorCode": "400"
									}
								}
							]
						}
					},
					{
						"name": "Set executePipeLineName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "executePipeLineName",
							"value": {
								"value": "@pipeline().parameters.executePipeLineName",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileInputName": {
						"type": "string"
					},
					"executePipeLineName": {
						"type": "string"
					}
				},
				"variables": {
					"fileDatName": {
						"type": "String"
					},
					"fileDatSize": {
						"type": "String"
					},
					"dataId": {
						"type": "String"
					},
					"fileinputName": {
						"type": "String"
					},
					"exceptionError": {
						"type": "String"
					},
					"executePipeLineName": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewDataFacInsertBillingProfileProcessDat')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryInsertBillingChangeCatSubcatProcessDat')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ChangeCatSubcatDataFactoryInsertProfileChangeProcessDat')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryInsertOrUpdateScoreValueProcessDat')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryInsertOrUpdateCreditAssignProcessDat')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryInsertUpdateCaBillingProcessDat')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewFileOutputValidateChildren')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set fileId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileId",
							"value": {
								"value": "@string(if(equals(trim(coalesce(string(pipeline().parameters.fileId),'')),''),null,string(pipeline().parameters.fileId)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Some val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set fileOutputpath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(or(or(equals(variables('fileId'),string(null)),equals(variables('fileName'),string(null))),equals(variables('outputPath'),string(null))),equals(variables('fileType'),string(null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute CreateFileOutPut",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewCreateFileOutput",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"fileType": {
												"value": "@variables('fileType')",
												"type": "Expression"
											},
											"fileName": {
												"value": "@variables('fileName')",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@variables('outputPath')",
												"type": "Expression"
											},
											"fileId": {
												"value": "@variables('fileId')",
												"type": "Expression"
											},
											"fileNameArchive": {
												"value": "@variables('fileNameArchive')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set errorMsg",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tRES_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.RES_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''RESPONSE_FILE'',\n\t''E'',''Temp file Val ',if(startswith(\n\tvariables('errorMessage'),','),substring(\n\tvariables('errorMessage'),1,sub(length(\n\tvariables('errorMessage')),1)),\n\tvariables('errorMessage')),' data not found.'');')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set errorMsg",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "@concat(if(equals(variables('fileId'),string(null)),',file id',''),if(equals(variables('fileName'),string(null)),',file name',''),if(equals(variables('outputPath'),string(null)),',output path',''),if(equals(variables('fileType'),string(null)),',file type',''))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set fileOutputpath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "outputPath",
							"value": {
								"value": "@string(if(equals(trim(coalesce(pipeline().parameters.outputPath,'')),''),null,pipeline().parameters.outputPath))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@string(if(equals(trim(coalesce(pipeline().parameters.fileName,'')),''),null,pipeline().parameters.fileName))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileAchriveName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileType",
							"value": {
								"value": "@string(if(equals(trim(coalesce(pipeline().parameters.fileType,'')),''),null,pipeline().parameters.fileType))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileAchriveName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@string(if(equals(trim(coalesce(pipeline().parameters.fileNameArchive,'')),''),null,pipeline().parameters.fileNameArchive))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"CREDIT_USER": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"fileId": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"fileType": {
						"type": "string"
					},
					"fileNameArchive": {
						"type": "string"
					}
				},
				"variables": {
					"resId": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileId": {
						"type": "String"
					},
					"outputPath": {
						"type": "String"
					},
					"errorMessage": {
						"type": "String"
					},
					"fileType": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"switchCaseValue": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewCreateFileOutput')]"
			]
		}
	]
}