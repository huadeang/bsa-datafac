{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "amtbsa"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureBlobStorage2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage2'"
		},
		"AzureBlobStorage3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage3'"
		},
		"AzureBlobStorage4_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage4'"
		},
		"AzureSqlBillingDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlBillingDatabase'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"GableEsavingDevAutoIR_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'GableEsavingDevAutoIR'"
		},
		"LocalFileServer_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LocalFileServer'"
		},
		"AzureKeyVault1_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://aksvault01.vault.azure.net/"
		},
		"DemoBillingFileServer_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\credit-control\\review"
		},
		"DemoBillingFileServer_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "sangad"
		},
		"LocalFileServer_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\credit-control"
		},
		"LocalFileServer_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "sangad"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/CC_CaCreditLimitDataFatorySendAccntId')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL2,VAL5,VAL6 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set Script Update",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config value').output),'firstRow')),or(or(equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL2,'')),''),null,activity('Get Config value').output.firstRow.VAL2),null),equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL5,'')),''),null,activity('Get Config value').output.firstRow.VAL5),null)),equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL6,'')),''),null,activity('Get Config value').output.firstRow.VAL6),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set outputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "outputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.VAL2",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixOutputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set outputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixOutputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.VAL5",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeOutputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixOutputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeOutputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.VAL6",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute CC_ReviewSendBilingNo",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Update Info Status From O To P",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactorySendFileProcessCount",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@variables('outputPath')",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@variables('prefixOutputFile')",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@variables('fileTypeOutputFile')",
												"type": "Expression"
											},
											"ScriptCount": {
												"value": "@concat('SELECT COUNT(T.LINE) AS COUNT FROM (SELECT ACCNT_ID AS LINE FROM ',variables('SCHEMA'),'.CC_UPDATE_CA_INFO \nWHERE STATUS = ''P'') T;')",
												"type": "Expression"
											},
											"messageWhenCountZero": "Query Customer account id for send to sff data not found",
											"pipeLineProcessFileName": {
												"value": "@variables('pipeLineProcessFileName')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Update Info Status From O To P",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set fileTypeOutputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@variables('scriptUpdate')",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Get MAX_ROW AND RUN_PER_TIME_FLAG",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT CAST(NULLIF(VAL1,'''') AS NUMERIC(22,7)) AS MAX_ROW,VAL2 AS RUN_PER_TIME_FLAG\nFROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE = ''CC_MAX_ROW'' AND c.LOV_NAME = ''RUN_GEN_CA_CL_ROW'' AND c.ACTIVE_FLG = ''Y'' ;')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set MaxRow",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get MAX_ROW AND RUN_PER_TIME_FLAG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "maxRow",
							"value": {
								"value": "@if(not(contains(string(activity('Get MAX_ROW AND RUN_PER_TIME_FLAG').output),'firstRow')),'',if(empty(string(activity('Get MAX_ROW AND RUN_PER_TIME_FLAG').output.firstRow.MAX_ROW)),'',string(activity('Get MAX_ROW AND RUN_PER_TIME_FLAG').output.firstRow.MAX_ROW)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set RunPerTimeFlag",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get MAX_ROW AND RUN_PER_TIME_FLAG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RunPerTimeFlag",
							"value": {
								"value": "@if(not(contains(string(activity('Get MAX_ROW AND RUN_PER_TIME_FLAG').output),'firstRow')),'',if(empty(activity('Get MAX_ROW AND RUN_PER_TIME_FLAG').output.firstRow.RUN_PER_TIME_FLAG),'',string(activity('Get MAX_ROW AND RUN_PER_TIME_FLAG').output.firstRow.RUN_PER_TIME_FLAG)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Script Update",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set RunPerTimeFlag",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set MaxRow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "scriptUpdate",
							"value": {
								"value": "@concat('UPDATE INFO \nSET INFO.STATUS = ''P''\nFROM (SELECT ',if(and(\n                    and(not(empty(variables('maxRow')))\n                        ,not(equals(variables('maxRow'),'0'))\n                        )\n                    ,equals(variables('RunPerTimeFlag'), 'Y')\n                    )\n,concat(' TOP ',variables('maxRow'))\n,''),' CA_ID FROM ',variables('SCHEMA'),'.CC_UPDATE_CA_INFO WHERE STATUS = ''O'' ORDER BY CA_ID) UP\nINNER JOIN ',variables('SCHEMA'),'.CC_UPDATE_CA_INFO INFO\nON UP.CA_ID = INFO.CA_ID')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_UAT"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "sff_cc_ca_accnt_id_req"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_SEND_CA"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "CA_CL_SEND_CA"
					},
					"outputPath": {
						"type": "String"
					},
					"prefixOutputFile": {
						"type": "String"
					},
					"fileTypeOutputFile": {
						"type": "String"
					},
					"pipeLineProcessFileName": {
						"type": "String",
						"defaultValue": "CC_CaCreditLimitDataFatorySendAccntIdProcesFile"
					},
					"maxRow": {
						"type": "String"
					},
					"RunPerTimeFlag": {
						"type": "String"
					},
					"scriptUpdate": {
						"type": "String"
					},
					"test": {
						"type": "Boolean"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactorySendFileProcessCount')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_CaCreditLimitDataFatorySendAccntIdProcesFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "insert CC_DATA_FACTORY onprocess",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set script Query Select",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.DATA_TYPE,''',\n\t''P'',''Process review send account id count ',if(greaterOrEquals(sub(pipeline().parameters.count,int(variables('offset'))),float(pipeline().parameters.limitPerRound)),pipeline().parameters.limitPerRound,sub(pipeline().parameters.count,int(variables('offset')))),''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update End Process",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CC_CreateFileAndArchive",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',substring(concat('CC_ReviewDataFactorySendBilingNoProcessAccountNoList Exception :',replace(activity('CC_CreateFileAndArchive').Error.Message,'''','\"')),0,if(less(length(replace(activity('CC_CreateFileAndArchive').Error.Message,'''','\"')),499),length(replace(activity('CC_CreateFileAndArchive').Error.Message,'''','\"')),499)),''' WHERE DATA_ID =',string(first(first(activity('insert CC_DATA_FACTORY onprocess').output.resultSets).rows).DATA_ID),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update End Process Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CC_CreateFileAndArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tFILE_NAME = ',concat('''',variables('fileName'),''''),',\n\tFILE_NAME_SYNC = ',concat('''',variables('fileNameArchive'),''''),',\n\tFILE_PATH = ''',pipeline().parameters.outputPath,''',\n\tSTATUS = ''S'',\n\tDESCRIPTION = ''',concat('Create File : ',variables('fileName'),' success'),''' WHERE DATA_ID =',string(first(first(activity('insert CC_DATA_FACTORY onprocess').output.resultSets).rows).DATA_ID),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set offset",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "offset",
							"value": {
								"value": "@string(mul(sub(pipeline().parameters.round,1),int(pipeline().parameters.limitPerRound)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CC_CreateFileAndArchive",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set fileName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set fileNameArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set script Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_CreateFileAndArchive",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"fileName": {
									"value": "@variables('fileName')",
									"type": "Expression"
								},
								"outputPath": {
									"value": "@pipeline().parameters.outputPath",
									"type": "Expression"
								},
								"scriptQuery": {
									"value": "@variables('scriptQuery')",
									"type": "Expression"
								},
								"fileArchiveName": {
									"value": "@variables('fileNameArchive')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set processTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "insert CC_DATA_FACTORY onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "processTime",
							"value": {
								"value": "@formatDateTime(convertTimeZone(addminutes(utcnow(),pipeline().parameters.round),'UTC','North Asia Standard Time'),'yyyyMMdd_HHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileNameArchive",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.sync')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.',pipeline().parameters.fileTypeOutputFile)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set script Query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "scriptQuery",
							"value": {
								"value": "@concat('SELECT\n\t''01|'' + ''',variables('processTime'),''' AS LINE  \n    UNION ALL \n    SELECT T.LINE FROM (',variables('scriptQuerySelect'),') T\n    UNION ALL \n    SELECT ''09|'' + CONVERT(varchar(255),COUNT(T2.LINE)) AS LINE FROM (',variables('scriptQuerySelect'),') T2; ')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set script Query Select",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set offset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "scriptQuerySelect",
							"value": {
								"value": "@concat('SELECT ''02|''+ ACCNT_ID AS LINE FROM ',pipeline().parameters.SCHEMA,'.CC_UPDATE_CA_INFO \nWHERE STATUS = ''P'' \nORDER BY CA_ID ASC OFFSET ',variables('offset'),' ROWS FETCH NEXT ',string(int(pipeline().parameters.limitPerRound)),' ROWS ONLY')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"count": {
						"type": "float"
					},
					"round": {
						"type": "int"
					},
					"limitPerRound": {
						"type": "string"
					}
				},
				"variables": {
					"offset": {
						"type": "String"
					},
					"scriptQuery": {
						"type": "String"
					},
					"processTime": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"scriptQuerySelect": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_CreateFileAndArchive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_CaCreditLimitDataFatorySendAccntIdProcesLoop')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.listRound",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "CC_CaCreditLimitDataFatorySendAccntIdProcesFile",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_CaCreditLimitDataFatorySendAccntIdProcesFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@pipeline().parameters.prefixOutputFile",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@pipeline().parameters.fileTypeOutputFile",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@pipeline().parameters.DATA_TYPE",
												"type": "Expression"
											},
											"count": {
												"value": "@pipeline().parameters.count",
												"type": "Expression"
											},
											"round": {
												"value": "@item()",
												"type": "Expression"
											},
											"limitPerRound": {
												"value": "@pipeline().parameters.limitPerRound",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"count": {
						"type": "float"
					},
					"listRound": {
						"type": "array"
					},
					"limitPerRound": {
						"type": "string"
					}
				},
				"variables": {
					"offset": {
						"type": "String"
					},
					"scriptQuery": {
						"type": "String"
					},
					"processTime": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_CaCreditLimitDataFatorySendAccntIdProcesFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ChangeCatSubCatSendBillingAccountNo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL2,VAL5,VAL6 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config value').output),'firstRow')),or(or(equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL2,'')),''),null,activity('Get Config value').output.firstRow.VAL2),null),equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL5,'')),''),null,activity('Get Config value').output.firstRow.VAL5),null)),equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL6,'')),''),null,activity('Get Config value').output.firstRow.VAL6),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute CC_ChangeCatSubCatSendBillingAccountNoChildren",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ChangeCatSubCatSendBillingAccountNoChildren",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"LOV_TYPE": {
												"value": "@variables('LOV_TYPE')",
												"type": "Expression"
											},
											"LOV_NAME": {
												"value": "@variables('LOV_NAME')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"CHANGE_TYPE": {
												"value": "@variables('CHANGE_TYPE')",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@variables('outputPath')",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@variables('prefixOutputFile')",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@variables('fileTypeOutputFile')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_CHANGE_CAT_SUBCAT \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tCHANGE_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('CHANGE_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_send_chnage_cat_sub_cat"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DEV"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "CC_CAT_SUB_CAT_SEND_BA"
					},
					"CHANGE_TYPE": {
						"type": "String",
						"defaultValue": "CHANGE_CAT_SUB_CAT_SEND_BA"
					},
					"outputPath": {
						"type": "String"
					},
					"prefixOutputFile": {
						"type": "String"
					},
					"fileTypeOutputFile": {
						"type": "String"
					},
					"changeId": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ChangeCatSubCatSendBillingAccountNoChildren')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ChangeCatSubCatSendBillingAccountNoChildren')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Account List",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT BILLING_ACCNT_NO  FROM ',pipeline().parameters.SCHEMA,'.CC_CHANGE_CAT_SUBCAT_INFO\nORDER BY BILLING_ACCNT_NO')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "if Account List Empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Account List",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(activity('Get Account List').output.value)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute ChangeCatSubcatSendBillingProcessAccountNoList",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set changeId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ChangeCatSubcatSendBillingAccoutnNoProcessAccountNoList",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@pipeline().parameters.prefixOutputFile",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@pipeline().parameters.fileTypeOutputFile",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"CHANGE_TYPE": {
												"value": "@pipeline().parameters.CHANGE_TYPE",
												"type": "Expression"
											},
											"baList": {
												"value": "@activity('Get Account List').output",
												"type": "Expression"
											},
											"changeId": {
												"value": "@variables('changeId')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Insert CC_CHANGE_CAT_SUBCAT process",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_CHANGE_CAT_SUBCAT \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tCHANGE_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.CHANGE_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.CHANGE_TYPE,''',\n\t''P'',''Process send billing account number count ',string(activity('Get Account List').output.count),' record'');')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set changeId",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Insert CC_CHANGE_CAT_SUBCAT process",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "changeId",
										"value": {
											"value": "@string(first(first(activity('Insert CC_CHANGE_CAT_SUBCAT process').output.resultSets).rows).CHANGE_ID)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Insert CC_CHANGE_CAT_SUBCAT if Empty",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_CHANGE_CAT_SUBCAT \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tCHANGE_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.CHANGE_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.CHANGE_TYPE,''',\n\t''S'',''Query Billing account no for change cat/sub cat data not found'');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"LOV_TYPE": {
						"type": "string"
					},
					"LOV_NAME": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"CHANGE_TYPE": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					}
				},
				"variables": {
					"changeId": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ChangeCatSubcatSendBillingAccoutnNoProcessAccountNoList')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ChangeCatSubcatDataFactoryInsertProfileChange')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear CC_PROFILE_CHANGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableCurrent",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null)))\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Pipeline FindFile indir",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@variables('executeDatPipeLineName')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY\n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')\n",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Clear CC_PROFILE_CHANGE",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_PROFILE_CHANGE')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DATA_FAC"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_cat_subcat_Insert_profile_change"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "CAT_SUBCAT_INSERT_PROFILE"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_INSERT_PROFILE"
					},
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"moveInputPath": {
						"type": "String"
					},
					"executeDatPipeLineName": {
						"type": "String",
						"defaultValue": "CC_ChangeCatSubcatDataFactoryInsertProfileChangeProcessDat"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCurrent')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryFindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ChangeCatSubcatDataFactoryInsertProfileChangeProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',activity('Copy data to CC_TEMP_FILE_DETAIL').Error),0,499),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DATA_ID",
										"value": {
											"value": "@pipeline().parameters.dataId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "credit-control/logs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_ID",
											"type": "String"
										},
										"sink": {
											"name": "DATA_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "STATUS_DT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "EFFECTIVE_DT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "REMARK",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "PROFILE_CHG_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "NEW_ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "NEW_ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "OLD_ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "OLD_ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCLocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_DATA_FACTORY_PROFILE_CHANGE"
								}
							}
						]
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_PROFILE_CHANGE (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ROW_ID AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_PROFILE_CHANGE WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_PROFILE_CHANGE\n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ROW_ID = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE to CC_PROFILE_CHANGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,2)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE to CC_PROFILE_CHANGE",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('MERGE to CC_PROFILE_CHANGE').Error),'''','\"')),0,499),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "MERGE to CC_PROFILE_CHANGE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_PROFILE_CHANGE(ROW_ID ,\n\tCREATED ,\n\tCREATED_BY ,\n\tLAST_UPD ,\n\tLAST_UPD_BY ,\n\tACCNT_ID ,\n\tSTATUS_CD ,\n\tSTATUS_DT,\n\tEFFECTIVE_DT,\n\tREMARK ,\n\tPROFILE_CHG_NO ,\n\tNEW_ACCNT_CATEGORY,\n\tNEW_ACCNT_SUB_CATEGORY,\n\tOLD_ACCNT_CATEGORY,\n\tOLD_ACCNT_SUB_CATEGORY)\nSELECT ROW_ID ,\n\tCREATED ,\n\tCREATED_BY ,\n\tLAST_UPD ,\n\tLAST_UPD_BY ,\n\tACCNT_ID ,\n\tSTATUS_CD ,\n\tSTATUS_DT ,\n\tEFFECTIVE_DT ,\n\tREMARK ,\n\tPROFILE_CHG_NO ,\n\tNEW_ACCNT_CATEGORY ,\n\tNEW_ACCNT_SUB_CATEGORY ,\n\tOLD_ACCNT_CATEGORY ,\n\tOLD_ACCNT_SUB_CATEGORY\nFROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_PROFILE_CHANGE WHERE DATA_ID = ',pipeline().parameters.dataId,'  AND PROCESS_TYPE =''02'' ORDER BY DATA_BILLING_ID ASC OFFSET 0 ROWS;')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterSplitPipe')]",
				"[concat(variables('factoryId'), '/datasets/CC_TableDynamic')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ChangeCatSubcatSendBillingAccoutnNoProcessAccountNoList')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set countRound",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set offset first round",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "countRound",
							"value": {
								"value": "@string(if(equals(length(split(string(div(length(pipeline().parameters.baList),float(variables('limitPerRound')))),'.')),2),add(div(length(pipeline().parameters.baList),int(variables('limitPerRound'))),1),div(length(pipeline().parameters.baList),int(variables('limitPerRound')))))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set tempCountList",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set countRound",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "tempCountList",
							"value": {
								"value": "@take(pipeline().parameters.baList,int(variables('countRound')))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set tempCountList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('tempCountList')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set script Query",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "scriptQuery",
										"value": {
											"value": "@concat('SELECT BILLING_ACCNT_NO  FROM ',pipeline().parameters.SCHEMA,'.CC_CHANGE_CAT_SUBCAT_INFO \nGROUP BY BILLING_ACCNT_NO ORDER BY BILLING_ACCNT_NO OFFSET ',variables('offset'),' ROWS FETCH NEXT ',variables('limitPerRound'),' ROWS ONLY;')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Insert to change cat subcat Hist",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set new offset",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"additionalColumns": [
												{
													"name": "CREATED",
													"value": {
														"value": "@convertTimeZone(utcnow(),'UTC','North Asia Standard Time')",
														"type": "Expression"
													}
												},
												{
													"name": "CREATED_BY",
													"value": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													}
												},
												{
													"name": "LAST_UPD",
													"value": {
														"value": "@convertTimeZone(utcnow(),'UTC','North Asia Standard Time')",
														"type": "Expression"
													}
												},
												{
													"name": "LAST_UPD_BY",
													"value": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													}
												},
												{
													"name": "STATUS",
													"value": ""
												},
												{
													"name": "CHANGE_ID",
													"value": {
														"value": "@pipeline().parameters.changeId",
														"type": "Expression"
													}
												}
											],
											"sqlReaderQuery": {
												"value": "@variables('scriptQuery')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "CREATED"
													},
													"sink": {
														"name": "CREATED",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "CREATED_BY"
													},
													"sink": {
														"name": "CREATED_BY",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "LAST_UPD"
													},
													"sink": {
														"name": "LAST_UPD",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "LAST_UPD_BY"
													},
													"sink": {
														"name": "LAST_UPD_BY",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CHANGE_ID"
													},
													"sink": {
														"name": "CHANGE_ID",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "BILLING_ACCNT_NO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "BILLING_ACCNT_NO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "STATUS"
													},
													"sink": {
														"name": "STATUS",
														"type": "String",
														"physicalType": "char"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AzureSqlMaster",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "CC_DatasetChangeCatSubcatHistUAT",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set new offset",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set script Query",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "offset",
										"value": {
											"value": "@string(mul(int(variables('round')),int(variables('limitPerRound'))))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set processTime",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Insert to change cat subcat Hist",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "processTime",
										"value": {
											"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','North Asia Standard Time'),'yyyyMMdd_HHmmss')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute CC_CreateFileAndArchive",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set fileNameArchive",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set fileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_CreateFileAndArchive",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"scriptQuery": {
												"value": "@variables('scriptQuery')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Set fileNameArchive",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set processTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileNameArchive",
										"value": {
											"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.sync')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileName",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set processTime",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileName",
										"value": {
											"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.',pipeline().parameters.fileTypeOutputFile)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Have Error Record",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Execute CC_CreateFileAndArchive",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "haveError",
										"value": {
											"value": "@bool(true)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set offset first round",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set round",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "offset",
							"value": "0"
						}
					},
					{
						"name": "Set round",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "round",
							"value": "1"
						}
					},
					{
						"name": "Update End Process",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_CHANGE_CAT_SUBCAT \n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tCHANGE_TYPE = ''',pipeline().parameters.CHANGE_TYPE,''',\n\tSTATUS = ''',if(variables('haveError'),'E','S'),''',\n\tDESCRIPTION =''Create FileError''\n\tWHERE CHANGE_ID = ',pipeline().parameters.changeId)",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"CHANGE_TYPE": {
						"type": "string"
					},
					"baList": {
						"type": "array"
					},
					"changeId": {
						"type": "string"
					}
				},
				"variables": {
					"tempCountList": {
						"type": "Array"
					},
					"countRound": {
						"type": "String"
					},
					"limitPerRound": {
						"type": "String"
					},
					"offset": {
						"type": "String"
					},
					"scriptQuery": {
						"type": "String"
					},
					"round": {
						"type": "String"
					},
					"processTime": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"haveError": {
						"type": "Boolean"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/datasets/CC_DatasetChangeCatSubcatHistUAT')]",
				"[concat(variables('factoryId'), '/pipelines/CC_CreateFileAndArchive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_CreateFileAndArchive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "create file output",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.scriptQuery",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "LINE",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileToWrite",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get Metadata file created",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "create file output",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists",
								"size",
								"columnCount"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "create file output archive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Metadata file created",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "COLUMN",
										"value": {
											"value": "@coalesce(activity('Get Metadata file created').output?.size,'0')",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": " SELECT 'ONE'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "COLUMN"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileToWrite",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileArchiveName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Fail to create file",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "create file output",
								"dependencyConditions": [
									"Failed"
								]
							},
							{
								"activity": "create file output archive",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "Fail to create file",
							"errorCode": "500"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileName": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"scriptQuery": {
						"type": "string"
					},
					"fileArchiveName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileToWrite')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_CreateFileAndArchiveHaveDatName')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "create file output",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.scriptQuery",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "LINE",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileToWrite",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Get Metadata file created",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "create file output",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists",
								"size",
								"columnCount"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "create file output archive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Metadata file created",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "COLUMN",
										"value": {
											"value": "@concat(pipeline().parameters.fileName,'|',coalesce(activity('Get Metadata file created').output?.size,'0'))",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": " SELECT 'ONE'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "COLUMN"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileToWrite",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileNameArchive",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileName": {
						"type": "string"
					},
					"fileNameArchive": {
						"type": "string"
					},
					"scriptQuery": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileToWrite')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryFindFileSyncInDir')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get All FIle in Config directory",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterPath",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If not Have file input",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Filter file Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(empty(activity('Filter file Sync').output.Value),not(activity('Get All FIle in Config directory').output.exists))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute ProcessFileSync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryProcessFileSync",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@pipeline().parameters.DATA_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"fileNameList": {
												"value": "@activity('Filter file Sync').output.Value",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@pipeline().parameters.executePipeLineName",
												"type": "Expression"
											},
											"oldDataIdList": {
												"value": "@pipeline().parameters.oldDataIdList",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert data factory when list is empty",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tFILE_PATH,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.DATA_TYPE,''',\n\t''',pipeline().parameters.inputPath,''',\n\t''S'',''File prefix : ',pipeline().parameters.prefixInputFile,'  data not found in path  ',pipeline().parameters.inputPath,''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter file Sync",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get All FIle in Config directory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All FIle in Config directory').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.prefixInputFile),endswith(item().name,pipeline().parameters.fileTypeInputFile))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"prefixInputFile": {
						"type": "string"
					},
					"fileTypeInputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"executePipeLineName": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"oldDataIdList": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterPath')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryProcessFileSync')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertBillingChangeCatSubCat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data CC_BILLING_CAT_SUBCAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableCurrent",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Pipeline FindFile indir",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@variables('executeDatPipeLineName')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert data factory  process file sync",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Execute Pipeline FindFile indir",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tFILE_PATH,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID\t VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''',variables('inputPath'),''',\n\t''E'',''',substring(concat('Exception Pipeline FindFile indir :  ',replace(activity('Execute Pipeline FindFile indir').Error.Message,'''','\"')),0,499),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY\n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Clear Data CC_BILLING_CAT_SUBCAT",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_BILLING_CAT_SUBCAT')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DATA_FAC"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_cat_subcat_insert_billing_profile"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "CAT_SUBCAT_INSERT_BA"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_INSERT_BA"
					},
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"moveInputPath": {
						"type": "String"
					},
					"executeDatPipeLineName": {
						"type": "String",
						"defaultValue": "CC_ChangeCatSubcatInsertBillingAccountNoProcessDat"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCurrent')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryFindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertBillingChangeCatSubcatProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update CC_DATA_FACTORY Success_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,2)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_CAT_SUBCAT (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ROW_ID AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_CAT_SUBCAT WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_CAT_SUBCAT \n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ROW_ID = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Merge ca To CC_BILLING_CAT_SUBCAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,2)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DATA_ID",
										"value": {
											"value": "@pipeline().parameters.dataId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_ID"
										},
										"sink": {
											"name": "DATA_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ROW_ID",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "CREATED",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREATED_BY",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "LAST_UPD",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "ACCNT_NO",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "ACCNT_CATEGORY",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "ACCNT_SUB_CATEGORY",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "BILL_CYCLE",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "PAYMENT_METHOD",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "MASTER_ACCNT_ID",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "STATUS_CD",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "BILLING_STATUS_CD",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "REGISTER_DT",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "FBB_FLAG",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "SUPPEND_FLAG",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 19
										},
										"sink": {
											"name": "COUNT_MOBILE",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"ordinal": 20
										},
										"sink": {
											"name": "SUM_MAIN_PRO"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCLocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_DATA_FACTORY_BILLING_CAT_SUBCAT"
								}
							}
						]
					},
					{
						"name": "Merge ca To CC_BILLING_CAT_SUBCAT",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO CREDIT_DATA_FAC.CC_BILLING_CAT_SUBCAT(ROW_ID,CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,ACCNT_NO,ACCNT_CATEGORY,ACCNT_SUB_CATEGORY,BILL_CYCLE,PAYMENT_METHOD,\nMASTER_ACCNT_ID,STATUS_CD,BILLING_STATUS_CD,REGISTER_DT,FBB_FLAG,SUPPEND_FLAG,COUNT_MOBILE,SUM_MAIN_PRO)\nSELECT ROW_ID,CREATED,CREATED_BY,LAST_UPD,LAST_UPD_BY,ACCNT_NO,ACCNT_CATEGORY,ACCNT_SUB_CATEGORY,BILL_CYCLE,PAYMENT_METHOD,\nMASTER_ACCNT_ID,STATUS_CD,BILLING_STATUS_CD,REGISTER_DT,FBB_FLAG,SUPPEND_FLAG,COUNT_MOBILE,SUM_MAIN_PRO\nFROM CREDIT_DATA_FAC.CC_DATA_FACTORY_BILLING_CAT_SUBCAT WHERE DATA_ID = ',pipeline().parameters.dataId,'  AND PROCESS_TYPE =''02'' ORDER BY DATA_BILLING_ID ASC OFFSET 0 ROWS;')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterSplitPipe')]",
				"[concat(variables('factoryId'), '/datasets/CC_TableDynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateCreditAssign')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableCurrent",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Pipeline FindFile indir",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@variables('executeDatPipeLineName')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY\n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DATA_FAC"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_credit_assign"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "INSERT_UPDATE_CREDIT_ASSIGN"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_INSERT_UPDATE_CREDIT_ASSIGN"
					},
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"moveInputPath": {
						"type": "String"
					},
					"executeDatPipeLineName": {
						"type": "String",
						"defaultValue": "CC_DataFactoryInsertOrUpdateCreditAssignProcessDat"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCurrent')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryFindFileSyncInDir')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateCreditAssignProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup File dat",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter Start With 02",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup File dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup File dat').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().Prop_0,'02')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Start With 02",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Start With 02').output.Value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Get Exiting RefRowId",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT ''Y'' from ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN WHERE REF_ROW_ID = ''',split(item().Prop_0,'|')[1],'''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlTableCurrent",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Script Insert or Update Table CC_CREDIT_ASSIGN",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Get Exiting RefRowId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@if(not(contains(string(activity('Get Exiting RefRowId').output),'firstRow'))\n,concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN \n    (REF_ROW_ID,\n\tCREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tBILLING_ACCOUNT_NUM,\n\tLIMIT_MNY,\n\tGNV_LIMIT_MNY,\n\tTHRESHOLD_ID,\n\tREQUEST_ID,\n\tACTION_TYPE,\n\tACTION_DTM,\n\tREASON_CODE,\n\tREASON_SUBCODE,\n\tLAST_UPDATE_BY,\n\tLAST_UPDATE_DTM,\n\tASSIGN_NO,\n\tTEMP_EXPIRE_DAT,\n\tSEQ_NO,\n\tCREDIT_GRADE,\n\tARPU,\n\tMIN_REVIEW,\n\tSUM_MAIN,\n\tNEXT_BILL_DATE) VALUES ('\n    ,if(empty(split(item().Prop_0,'|')[1]),'NULL',concat('''',split(item().Prop_0,'|')[1],'''')),',',\nif(empty(split(item().Prop_0,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')'),concat('''',split(item().Prop_0,'|')[2],'''')),',',\nif(empty(split(item().Prop_0,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(item().Prop_0,'|')[3],'''')),',',\nif(empty(split(item().Prop_0,'|')[4]),'NULL',concat('''',split(item().Prop_0,'|')[4],'''')),',',\nif(empty(split(item().Prop_0,'|')[5]),'NULL',concat('''',split(item().Prop_0,'|')[5],'''')),',',\nif(empty(split(item().Prop_0,'|')[6]),'NULL',concat('''',split(item().Prop_0,'|')[6],'''')),',',\nif(empty(split(item().Prop_0,'|')[7]),'NULL',concat('''',split(item().Prop_0,'|')[7],'''')),',',\nif(empty(split(item().Prop_0,'|')[8]),'NULL',concat('''',split(item().Prop_0,'|')[8],'''')),',',\nif(empty(split(item().Prop_0,'|')[9]),'NULL',concat('''',split(item().Prop_0,'|')[9],'''')),',',\nif(empty(split(item().Prop_0,'|')[10]),'NULL',concat('''',split(item().Prop_0,'|')[10],'''')),',',\nif(empty(split(item().Prop_0,'|')[11]),'NULL',concat('''',split(item().Prop_0,'|')[11],'''')),',',\nif(empty(split(item().Prop_0,'|')[12]),'NULL',concat('''',split(item().Prop_0,'|')[12],'''')),',',\nif(empty(split(item().Prop_0,'|')[13]),'NULL',concat('''',split(item().Prop_0,'|')[13],'''')),',',\nif(empty(split(item().Prop_0,'|')[14]),'NULL',concat('''',split(item().Prop_0,'|')[14],'''')),',',\nif(empty(split(item().Prop_0,'|')[15]),'NULL',concat('''',split(item().Prop_0,'|')[15],'''')),',',\nif(empty(split(item().Prop_0,'|')[16]),'NULL',concat('''',split(item().Prop_0,'|')[16],'''')),',',\nif(empty(split(item().Prop_0,'|')[17]),'NULL',concat('''',split(item().Prop_0,'|')[17],'''')),',',\nif(empty(split(item().Prop_0,'|')[18]),'NULL',concat('''',split(item().Prop_0,'|')[18],'''')),',',\nif(empty(split(item().Prop_0,'|')[19]),'NULL',concat('''',split(item().Prop_0,'|')[19],'''')),',',\nif(empty(split(item().Prop_0,'|')[20]),'NULL',concat('''',split(item().Prop_0,'|')[20],'''')),',',\nif(empty(split(item().Prop_0,'|')[21]),'NULL',concat('''',split(item().Prop_0,'|')[21],'''')),',',\nif(empty(split(item().Prop_0,'|')[22]),'NULL',concat('''',split(item().Prop_0,'|')[22],'''')),',',\nif(empty(split(item().Prop_0,'|')[23]),'NULL',concat('''',split(item().Prop_0,'|')[23],'''')),',',\nif(empty(split(item().Prop_0,'|')[25]),'NULL',concat('''',split(item().Prop_0,'|')[25],'''')),');')\n\n,concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN\n    SET\n\tCREATED =',if(empty(split(item().Prop_0,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')'),concat('''',split(item().Prop_0,'|')[2],'''')),',\n\tCREATED_BY =',if(empty(split(item().Prop_0,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(item().Prop_0,'|')[3],'''')),',\n\tLAST_UPD =',if(empty(split(item().Prop_0,'|')[4]),'NULL',concat('''',split(item().Prop_0,'|')[4],'''')),',\n\tLAST_UPD_BY =',if(empty(split(item().Prop_0,'|')[5]),'NULL',concat('''',split(item().Prop_0,'|')[5],'''')),',\n\tBILLING_ACCOUNT_NUM =',if(empty(split(item().Prop_0,'|')[6]),'NULL',concat('''',split(item().Prop_0,'|')[6],'''')),',\n\tLIMIT_MNY =',if(empty(split(item().Prop_0,'|')[7]),'NULL',concat('''',split(item().Prop_0,'|')[7],'''')),',\n\tGNV_LIMIT_MNY =',if(empty(split(item().Prop_0,'|')[8]),'NULL',concat('''',split(item().Prop_0,'|')[8],'''')),',\n\tTHRESHOLD_ID =',if(empty(split(item().Prop_0,'|')[9]),'NULL',concat('''',split(item().Prop_0,'|')[9],'''')),',\n\tREQUEST_ID =',if(empty(split(item().Prop_0,'|')[10]),'NULL',concat('''',split(item().Prop_0,'|')[10],'''')),',\n\tACTION_TYPE =',if(empty(split(item().Prop_0,'|')[11]),'NULL',concat('''',split(item().Prop_0,'|')[11],'''')),',\n\tACTION_DTM =',if(empty(split(item().Prop_0,'|')[12]),'NULL',concat('''',split(item().Prop_0,'|')[12],'''')),',\n\tREASON_CODE =',if(empty(split(item().Prop_0,'|')[13]),'NULL',concat('''',split(item().Prop_0,'|')[13],'''')),',\n\tREASON_SUBCODE =',if(empty(split(item().Prop_0,'|')[14]),'NULL',concat('''',split(item().Prop_0,'|')[14],'''')),',\n\tLAST_UPDATE_BY =',if(empty(split(item().Prop_0,'|')[15]),'NULL',concat('''',split(item().Prop_0,'|')[15],'''')),',\n\tLAST_UPDATE_DTM =',if(empty(split(item().Prop_0,'|')[16]),'NULL',concat('''',split(item().Prop_0,'|')[16],'''')),',\n\tASSIGN_NO =',if(empty(split(item().Prop_0,'|')[17]),'NULL',concat('''',split(item().Prop_0,'|')[17],'''')),',\n\tTEMP_EXPIRE_DAT =',if(empty(split(item().Prop_0,'|')[18]),'NULL',concat('''',split(item().Prop_0,'|')[18],'''')),',\n\tSEQ_NO =',if(empty(split(item().Prop_0,'|')[19]),'NULL',concat('''',split(item().Prop_0,'|')[19],'''')),',\n\tCREDIT_GRADE =',if(empty(split(item().Prop_0,'|')[20]),'NULL',concat('''',split(item().Prop_0,'|')[20],'''')),',\n\tARPU =',if(empty(split(item().Prop_0,'|')[21]),'NULL',concat('''',split(item().Prop_0,'|')[21],'''')),',\n\tMIN_REVIEW =',if(empty(split(item().Prop_0,'|')[22]),'NULL',concat('''',split(item().Prop_0,'|')[22],'''')),',\n\tSUM_MAIN =',if(empty(split(item().Prop_0,'|')[23]),'NULL',concat('''',split(item().Prop_0,'|')[23],'''')),',\n\tNEXT_BILL_DATE =',if(empty(split(item().Prop_0,'|')[25]),'NULL',concat('''',split(item().Prop_0,'|')[25],'''')),'\n\tWHERE REF_ROW_ID = ''',split(item().Prop_0,'|')[1],''';'))",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Script Insert Table CC_DATA_FACTORY_HIST",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set haveErrorRow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',item().Prop_0,''',\n\t''',replace(activity('Script Insert or Update Table CC_CREDIT_ASSIGN').Error.Message,'''','\"'),''',\n\t''E''\n\t)')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set haveErrorRow",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Script Insert or Update Table CC_CREDIT_ASSIGN",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "haveErrorRow",
										"value": {
											"value": "@bool(true)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If have Error Record",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('haveErrorRow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update CC_DATA_FACTORY Success",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Update CC_DATA_FACTORY haveErrorRow is true",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					},
					"refRowId": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCurrent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateNegotiationValue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableCurrent",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Pipeline FindFile indir",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@variables('executeDatPipeLineName')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY\n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DATA_FAC"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_insert_nego_value"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "INSERT_NEGO"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_INSERT_NEGO"
					},
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"moveInputPath": {
						"type": "String"
					},
					"executeDatPipeLineName": {
						"type": "String",
						"defaultValue": "CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCurrent')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryFindFileSyncInDir')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update CC_DATA_FACTORY Success_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,2)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_NEGOTIATION_VALUE (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ROW_ID AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_NEGOTIATION_VALUE WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_NEGOTIATION_VALUE \n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ROW_ID = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Merge ca To CC_NEGOTIATION_VALUE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,2)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DATA_ID",
										"value": {
											"value": "@pipeline().parameters.dataId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_ID",
											"type": "String"
										},
										"sink": {
											"name": "DATA_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "REQ_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "BILLING_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "NEGO_CREDIT_LIMIT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "AR_BALANCE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "AVAILABLE_FOR_MONTHLY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "PRICE_MAIN_PRO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "MULTIPLIER",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "BA_SCORE_RANGE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "CL_BEFORE_NEGO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "REASON_BEF_NEGO",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "CUSTOMER_REQUEST_FLG",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 19
										},
										"sink": {
											"name": "CUS_REQ_BALANCE",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 20
										},
										"sink": {
											"name": "NEGO_STATUS",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 21
										},
										"sink": {
											"name": "REASON_CODE",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 22
										},
										"sink": {
											"name": "CHANNEL",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"ordinal": 23
										},
										"sink": {
											"name": "CL_BEFORE_NEGO_PERM",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 24
										},
										"sink": {
											"name": "CL_BEFORE_NEGO_TEMP",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCLocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_DATA_FACTORY_NEGOTIATION_VALUE"
								}
							}
						]
					},
					{
						"name": "Merge ca To CC_NEGOTIATION_VALUE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('WITH NEGO AS (SELECT * FROM CREDIT_DATA_FAC.CC_DATA_FACTORY_NEGOTIATION_VALUE WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE LIKE ''02%'' ORDER BY DATA_NEGO_ID ASC OFFSET 0 ROWS)\nMERGE CREDIT_DATA_FAC.CC_NEGOTIATION_VALUE AS TARGET\nUSING NEGO AS SOURCE\nON (TARGET.ACCNT_ID = SOURCE.ACCNT_ID)\nWHEN MATCHED AND TARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID \nTHEN \nUPDATE\nSET\nTARGET.REF_ROW_ID = SOURCE.ROW_ID,\nTARGET.CREATED = SOURCE.CREATED,\nTARGET.CREATED_BY = SOURCE.CREATED_BY,\nTARGET.LAST_UPD = SOURCE.LAST_UPD,\nTARGET.LAST_UPD_BY = SOURCE.LAST_UPD_BY,\nTARGET.REQ_ID = SOURCE.REQ_ID,\nTARGET.ACCNT_ID = SOURCE.ACCNT_ID,\nTARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID,\nTARGET.NEGO_CREDIT_LIMIT = SOURCE.NEGO_CREDIT_LIMIT,\nTARGET.AR_BALANCE = SOURCE.AR_BALANCE,\nTARGET.AVAILABLE_FOR_MONTHLY = SOURCE.AVAILABLE_FOR_MONTHLY,\nTARGET.PRICE_MAIN_PRO = SOURCE.PRICE_MAIN_PRO,\nTARGET.MULTIPLIER = SOURCE.MULTIPLIER,\nTARGET.BA_SCORE_RANGE = SOURCE.BA_SCORE_RANGE,\nTARGET.CL_BEFORE_NEGO = SOURCE.CL_BEFORE_NEGO,\nTARGET.REASON_BEF_NEGO = SOURCE.REASON_BEF_NEGO,\nTARGET.CUSTOMER_REQUEST_FLG = SOURCE.CUSTOMER_REQUEST_FLG,\nTARGET.CUS_REQ_BALANCE = SOURCE.CUS_REQ_BALANCE,\nTARGET.NEGO_STATUS = SOURCE.NEGO_STATUS,\nTARGET.REASON_CODE = SOURCE.REASON_CODE,\nTARGET.CHANNEL = SOURCE.CHANNEL,\nTARGET.CL_BEFORE_NEGO_PERM = SOURCE.CL_BEFORE_NEGO_PERM,\nTARGET.CL_BEFORE_NEGO_TEMP = SOURCE.CL_BEFORE_NEGO_TEMP\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (REF_ROW_ID,\nCREATED,\nCREATED_BY,\nLAST_UPD,\nLAST_UPD_BY,\nREQ_ID,\nACCNT_ID,\nBILLING_ACCNT_ID,\nNEGO_CREDIT_LIMIT,\nAR_BALANCE,\nAVAILABLE_FOR_MONTHLY,\nPRICE_MAIN_PRO,\nMULTIPLIER,\nBA_SCORE_RANGE,\nCL_BEFORE_NEGO,\nREASON_BEF_NEGO,\nCUSTOMER_REQUEST_FLG,\nCUS_REQ_BALANCE,\nNEGO_STATUS,\nREASON_CODE,\nCHANNEL,\nCL_BEFORE_NEGO_PERM,CL_BEFORE_NEGO_TEMP ) VALUES (SOURCE.ROW_ID,\nSOURCE.CREATED,\nSOURCE.CREATED_BY,\nSOURCE.LAST_UPD,\nSOURCE.LAST_UPD_BY,\nSOURCE.REQ_ID,\nSOURCE.ACCNT_ID,\nSOURCE.BILLING_ACCNT_ID,\nSOURCE.NEGO_CREDIT_LIMIT,\nSOURCE.AR_BALANCE,\nSOURCE.AVAILABLE_FOR_MONTHLY,\nSOURCE.PRICE_MAIN_PRO,\nSOURCE.MULTIPLIER,\nSOURCE.BA_SCORE_RANGE,\nSOURCE.CL_BEFORE_NEGO,\nSOURCE.REASON_BEF_NEGO,\nSOURCE.CUSTOMER_REQUEST_FLG,\nSOURCE.CUS_REQ_BALANCE,\nSOURCE.NEGO_STATUS,\nSOURCE.REASON_CODE,\nSOURCE.CHANNEL,\nSOURCE.CL_BEFORE_NEGO_PERM,\nSOURCE.CL_BEFORE_NEGO_TEMP);')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterSplitPipe')]",
				"[concat(variables('factoryId'), '/datasets/CC_TableDynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateScoreValue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableCurrent",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Pipeline FindFile indir",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@variables('executeDatPipeLineName')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY\n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DATA_FAC"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_insert_score_value"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "INSERT_SCORE"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_INSERT_SCORE"
					},
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"moveInputPath": {
						"type": "String"
					},
					"executeDatPipeLineName": {
						"type": "String",
						"defaultValue": "CC_DataFactoryInsertOrUpdateScoreValueProcessDat"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCurrent')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryFindFileSyncInDir')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertOrUpdateScoreValueProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Exception",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',activity('Copy data to CC_TEMP_FILE_DETAIL').Error),0,if(greater(length(activity('Copy data to CC_TEMP_FILE_DETAIL').Error),499),499,length(activity('Copy data to CC_TEMP_FILE_DETAIL').Error))),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DATA_ID",
										"value": {
											"value": "@pipeline().parameters.dataId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "credit-control/logs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_ID",
											"type": "String"
										},
										"sink": {
											"name": "DATA_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "BILLING_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "CL_LEVEL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "SCORE_RANGE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "CL_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "CL_CHANGE_REASON",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "OUTCOME_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "OUTCOME_REASON",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "CREDIT_LIMIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "PERM_CREDIT_LIMIT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "TEMP_CREDIT_LIMIT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 19
										},
										"sink": {
											"name": "PREV_CREDIT_LIMIT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 20
										},
										"sink": {
											"name": "PREV_SCORE_RANGE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 21
										},
										"sink": {
											"name": "ACTUAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 22
										},
										"sink": {
											"name": "ACTUAL_PERM",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 23
										},
										"sink": {
											"name": "BILLING_CREDIT_LIMIT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 24
										},
										"sink": {
											"name": "BILLING_THRESHOLD_SET_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 25
										},
										"sink": {
											"name": "FBB_FLAG",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 26
										},
										"sink": {
											"name": "LAST_REVIEW_DAT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 27
										},
										"sink": {
											"name": "MIN_REVIEW",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 28
										},
										"sink": {
											"name": "AVAILABLE_CREDIT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 29
										},
										"sink": {
											"name": "PAYMENT_FLG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 30
										},
										"sink": {
											"name": "BA_REGISTER_DT",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCLocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_DATA_FACTORY_SCORE_VALUE"
								}
							}
						]
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_SCORE_VALUE (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ROW_ID AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_SCORE_VALUE WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_SCORE_VALUE\n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ROW_ID = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Success_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Merge ca To cc_scorevalue",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Merge Ba To cc_scorevalue",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,2)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Merge Ba To cc_scorevalue",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('WITH SCORE AS (SELECT * FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_SCORE_VALUE WHERE DATA_ID = ',pipeline().parameters.dataId,' AND CL_LEVEL = ''BA'' AND PROCESS_TYPE LIKE ''02%'')\nMERGE ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE AS TARGET\nUSING SCORE AS SOURCE\nON (TARGET.ACCNT_ID = SOURCE.ACCNT_ID)\nWHEN MATCHED AND TARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID \nTHEN \nUPDATE\nSET\n TARGET.REF_ROW_ID = SOURCE.ROW_ID ,\n TARGET.CREATED = SOURCE.CREATED ,\n TARGET.CREATED_BY = SOURCE. CREATED_BY,\n TARGET.LAST_UPD = SOURCE.LAST_UPD ,\n TARGET.LAST_UPD_BY = SOURCE.LAST_UPD_BY,\n TARGET.ACCNT_ID = SOURCE.ACCNT_ID ,\n TARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID,\n TARGET.ACCNT_NO = SOURCE.ACCNT_NO ,\n TARGET.CL_LEVEL = SOURCE.CL_LEVEL ,\n TARGET.SCORE_RANGE = SOURCE.SCORE_RANGE,\n TARGET.CL_TYPE = SOURCE.CL_TYPE ,\n TARGET.CL_CHANGE_REASON = SOURCE.CL_CHANGE_REASON,\n TARGET.OUTCOME_CD = SOURCE.OUTCOME_CD,\n TARGET.OUTCOME_REASON = SOURCE.OUTCOME_REASON,\n TARGET.CREDIT_LIMIT = SOURCE.CREDIT_LIMIT,\n TARGET.PERM_CREDIT_LIMIT = SOURCE.PERM_CREDIT_LIMIT,\n TARGET.TEMP_CREDIT_LIMIT = SOURCE.TEMP_CREDIT_LIMIT,\n TARGET.PREV_CREDIT_LIMIT = SOURCE.PREV_CREDIT_LIMIT,\n TARGET.PREV_SCORE_RANGE = SOURCE.PREV_SCORE_RANGE,\n TARGET.ACTUAL = SOURCE.ACTUAL,\n TARGET.ACTUAL_PERM = SOURCE.ACTUAL_PERM,\n TARGET.BILLING_CREDIT_LIMIT = SOURCE.BILLING_CREDIT_LIMIT ,\n TARGET.BILLING_THRESHOLD_SET_ID = SOURCE.BILLING_THRESHOLD_SET_ID ,\n TARGET.FBB_FLAG = SOURCE.FBB_FLAG ,\n TARGET.LAST_REVIEW_DAT = SOURCE.LAST_REVIEW_DAT ,\n TARGET.MIN_REVIEW = SOURCE.MIN_REVIEW ,\n TARGET.AVAILABLE_CREDIT = SOURCE.AVAILABLE_CREDIT ,\n TARGET.PAYMENT_FLG = SOURCE.PAYMENT_FLG ,\n TARGET.BA_REGISTER_DT = SOURCE.BA_REGISTER_DT\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (REF_ROW_ID ,\n CREATED ,\n CREATED_BY ,\n LAST_UPD ,\n LAST_UPD_BY ,\n ACCNT_ID ,\n BILLING_ACCNT_ID ,\n ACCNT_NO ,\n CL_LEVEL ,\n SCORE_RANGE ,\n CL_TYPE ,\n CL_CHANGE_REASON ,\n OUTCOME_CD ,\n OUTCOME_REASON ,\n CREDIT_LIMIT ,\n PERM_CREDIT_LIMIT ,\n TEMP_CREDIT_LIMIT ,\n PREV_CREDIT_LIMIT ,\n PREV_SCORE_RANGE ,\n ACTUAL ,\n ACTUAL_PERM ,\n BILLING_CREDIT_LIMIT ,\n BILLING_THRESHOLD_SET_ID ,\n FBB_FLAG ,\n LAST_REVIEW_DAT ,\n MIN_REVIEW ,\n AVAILABLE_CREDIT ,\n PAYMENT_FLG ,\n BA_REGISTER_DT ) VALUES (SOURCE.ROW_ID ,\n SOURCE.CREATED ,\n SOURCE. CREATED_BY,\n SOURCE.LAST_UPD ,\n SOURCE.LAST_UPD_BY,\n SOURCE.ACCNT_ID ,\n SOURCE.BILLING_ACCNT_ID,\n SOURCE.ACCNT_NO ,\n SOURCE.CL_LEVEL ,\n SOURCE.SCORE_RANGE,\n SOURCE.CL_TYPE ,\n SOURCE.CL_CHANGE_REASON,\n SOURCE.OUTCOME_CD,\n SOURCE.OUTCOME_REASON,\n SOURCE.CREDIT_LIMIT,\n SOURCE.PERM_CREDIT_LIMIT,\n SOURCE.TEMP_CREDIT_LIMIT,\n SOURCE.PREV_CREDIT_LIMIT,\n SOURCE.PREV_SCORE_RANGE,\n SOURCE.ACTUAL,\n SOURCE.ACTUAL_PERM,\n SOURCE.BILLING_CREDIT_LIMIT ,\n SOURCE.BILLING_THRESHOLD_SET_ID ,\n SOURCE.FBB_FLAG ,\n SOURCE.LAST_REVIEW_DAT ,\n SOURCE.MIN_REVIEW ,\n SOURCE.AVAILABLE_CREDIT ,\n SOURCE.PAYMENT_FLG ,\n SOURCE.BA_REGISTER_DT);')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Merge ca To cc_scorevalue",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('WITH SCORE AS (SELECT * FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_SCORE_VALUE WHERE DATA_ID = ',pipeline().parameters.dataId,' AND CL_LEVEL = ''CA'' AND PROCESS_TYPE LIKE ''02%'' ORDER BY DATA_SCORE_ID ASC OFFSET 0 ROWS)\nMERGE ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE AS TARGET\nUSING SCORE AS SOURCE\nON (TARGET.ACCNT_ID = SOURCE.ACCNT_ID)\nWHEN MATCHED \nTHEN \nUPDATE\nSET\n TARGET.REF_ROW_ID = SOURCE.ROW_ID ,\n TARGET.CREATED = SOURCE.CREATED ,\n TARGET.CREATED_BY = SOURCE. CREATED_BY,\n TARGET.LAST_UPD = SOURCE.LAST_UPD ,\n TARGET.LAST_UPD_BY = SOURCE.LAST_UPD_BY,\n TARGET.ACCNT_ID = SOURCE.ACCNT_ID ,\n TARGET.BILLING_ACCNT_ID = SOURCE.BILLING_ACCNT_ID,\n TARGET.ACCNT_NO = SOURCE.ACCNT_NO ,\n TARGET.CL_LEVEL = SOURCE.CL_LEVEL ,\n TARGET.SCORE_RANGE = SOURCE.SCORE_RANGE,\n TARGET.CL_TYPE = SOURCE.CL_TYPE ,\n TARGET.CL_CHANGE_REASON = SOURCE.CL_CHANGE_REASON,\n TARGET.OUTCOME_CD = SOURCE.OUTCOME_CD,\n TARGET.OUTCOME_REASON = SOURCE.OUTCOME_REASON,\n TARGET.CREDIT_LIMIT = SOURCE.CREDIT_LIMIT,\n TARGET.PERM_CREDIT_LIMIT = SOURCE.PERM_CREDIT_LIMIT,\n TARGET.TEMP_CREDIT_LIMIT = SOURCE.TEMP_CREDIT_LIMIT,\n TARGET.PREV_CREDIT_LIMIT = SOURCE.PREV_CREDIT_LIMIT,\n TARGET.PREV_SCORE_RANGE = SOURCE.PREV_SCORE_RANGE,\n TARGET.ACTUAL = SOURCE.ACTUAL,\n TARGET.ACTUAL_PERM = SOURCE.ACTUAL_PERM,\n TARGET.BILLING_CREDIT_LIMIT = SOURCE.BILLING_CREDIT_LIMIT ,\n TARGET.BILLING_THRESHOLD_SET_ID = SOURCE.BILLING_THRESHOLD_SET_ID ,\n TARGET.FBB_FLAG = SOURCE.FBB_FLAG ,\n TARGET.LAST_REVIEW_DAT = SOURCE.LAST_REVIEW_DAT ,\n TARGET.MIN_REVIEW = SOURCE.MIN_REVIEW ,\n TARGET.AVAILABLE_CREDIT = SOURCE.AVAILABLE_CREDIT ,\n TARGET.PAYMENT_FLG = SOURCE.PAYMENT_FLG ,\n TARGET.BA_REGISTER_DT = SOURCE.BA_REGISTER_DT\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT (REF_ROW_ID ,\n CREATED ,\n CREATED_BY ,\n LAST_UPD ,\n LAST_UPD_BY ,\n ACCNT_ID ,\n BILLING_ACCNT_ID ,\n ACCNT_NO ,\n CL_LEVEL ,\n SCORE_RANGE ,\n CL_TYPE ,\n CL_CHANGE_REASON ,\n OUTCOME_CD ,\n OUTCOME_REASON ,\n CREDIT_LIMIT ,\n PERM_CREDIT_LIMIT ,\n TEMP_CREDIT_LIMIT ,\n PREV_CREDIT_LIMIT ,\n PREV_SCORE_RANGE ,\n ACTUAL ,\n ACTUAL_PERM ,\n BILLING_CREDIT_LIMIT ,\n BILLING_THRESHOLD_SET_ID ,\n FBB_FLAG ,\n LAST_REVIEW_DAT ,\n MIN_REVIEW ,\n AVAILABLE_CREDIT ,\n PAYMENT_FLG ,\n BA_REGISTER_DT ) VALUES (SOURCE.ROW_ID ,\n SOURCE.CREATED ,\n SOURCE. CREATED_BY,\n SOURCE.LAST_UPD ,\n SOURCE.LAST_UPD_BY,\n SOURCE.ACCNT_ID ,\n SOURCE.BILLING_ACCNT_ID,\n SOURCE.ACCNT_NO ,\n SOURCE.CL_LEVEL ,\n SOURCE.SCORE_RANGE,\n SOURCE.CL_TYPE ,\n SOURCE.CL_CHANGE_REASON,\n SOURCE.OUTCOME_CD,\n SOURCE.OUTCOME_REASON,\n SOURCE.CREDIT_LIMIT,\n SOURCE.PERM_CREDIT_LIMIT,\n SOURCE.TEMP_CREDIT_LIMIT,\n SOURCE.PREV_CREDIT_LIMIT,\n SOURCE.PREV_SCORE_RANGE,\n SOURCE.ACTUAL,\n SOURCE.ACTUAL_PERM,\n SOURCE.BILLING_CREDIT_LIMIT ,\n SOURCE.BILLING_THRESHOLD_SET_ID ,\n SOURCE.FBB_FLAG ,\n SOURCE.LAST_REVIEW_DAT ,\n SOURCE.MIN_REVIEW ,\n SOURCE.AVAILABLE_CREDIT ,\n SOURCE.PAYMENT_FLG ,\n SOURCE.BA_REGISTER_DT);')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterSplitPipe')]",
				"[concat(variables('factoryId'), '/datasets/CC_TableDynamic')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertUpdateCaBilling')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear CC_UPDATE_CA_BILLING",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTableCurrent",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value').output),'firstRow')),or(or(or(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null)),equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Pipeline FindFile indir",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@variables('executePipeLineName')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY\n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val1,'')),''),null,activity('Get Config Value').output.firstRow.val1),null),',Input path(val1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val3,'')),''),null,activity('Get Config Value').output.firstRow.val3),null),',Prefix Input file(val3)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val4,'')),''),null,activity('Get Config Value').output.firstRow.val4),null),',file type Input file(val4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.val7,'')),''),null,activity('Get Config Value').output.firstRow.val7),null),',Move Input path(val7)',''))\n\t)\n\t,' Data not found.')),''');')\n",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Clear CC_UPDATE_CA_BILLING",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_UPDATE_CA_BILLING')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DATA_FAC"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "sff_cc_ba_accnt_id_res"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "CA_CL_INSERT_CA"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_INSERT_CA"
					},
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"moveInputPath": {
						"type": "String"
					},
					"executePipeLineName": {
						"type": "String",
						"defaultValue": "CC_DataFactoryInsertUpdateCaBillingProcessDat"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCurrent')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryFindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryInsertUpdateCaBillingProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup File dat",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Filter Start With 02",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lookup File dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup File dat').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@startswith(item().Prop_0,'02')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach row",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter Start With 02",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter Start With 02').output.Value",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Script Insert FACTORY_HIST Or CC_UPDATE_CA_BILLING",
									"description": "",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "If accntId is null",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@if(empty(split(item().Prop_0,'|')[1]),\nconcat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (\n\tCONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\tCONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',item().Prop_0,''',\n\t''accntId data not found'',\n\t''E''\n\t)')\n,concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_UPDATE_CA_BILLING\n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tACCNT_ID,\n\tBILLING_ACCNT_ID,\n\tSTATUS_CD,\n\tDATA_ID,\n\tSTATUS,\n\tREMARK) VALUES (\n\tCONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\tCONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',split(item().Prop_0,'|')[1],''',\n\t''',split(item().Prop_0,'|')[2],''',\n\t''',if(empty(split(item().Prop_0,'|')[3]),'Inactive',split(item().Prop_0,'|')[3]),''',\n\t',pipeline().parameters.dataId,',\n\t''S'',\n\t''',\n\tif(empty(split(item().Prop_0,'|')[2]),'billing accntId data not found',concat(\n\tif(empty(split(item().Prop_0,'|')[3]),'statusCd data not found and default is Inactive',null)))\n\t,''');'))",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set haveErrorRow",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Script Insert FACTORY_HIST Or CC_UPDATE_CA_BILLING",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "haveErrorRow",
										"value": {
											"value": "@bool(true)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Script Insert Table CC_DATA_FACTORY_HIST",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set haveErrorRow",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',item().Prop_0,''',\n\t''',substring(replace(activity('Script Insert FACTORY_HIST Or CC_UPDATE_CA_BILLING').Error.Message,'''','\"'),0,499),''',\n\t''E''\n\t)')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "If accntId is null",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(split(item().Prop_0,'|')[1])",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Set haveErrorRow_copy",
												"type": "SetVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "haveErrorRow",
													"value": {
														"value": "@bool(true)",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If have Error Record",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach row",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@variables('haveErrorRow')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Update CC_DATA_FACTORY Success",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Update CC_DATA_FACTORY haveErrorRow is true",
									"description": "",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Lookup File dat').output.count),' record -> count process ',string(length(activity('Filter Start With 02').output.Value)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "If have Error Record",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryProcessFileSync')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each file Sync",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.fileNameList",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Execute CC_ReviewProcessFileSyncChildren",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryProcessFileSyncChildren",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@pipeline().parameters.DATA_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"fileInputName": {
												"value": "@item().name",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@pipeline().parameters.executePipeLineName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileNameList": {
						"type": "array"
					},
					"executePipeLineName": {
						"type": "string"
					},
					"oldDataIdList": {
						"type": "string"
					}
				},
				"variables": {
					"fileDatName": {
						"type": "String"
					},
					"fileDatSize": {
						"type": "String"
					},
					"reviewId": {
						"type": "String"
					},
					"fileinputName": {
						"type": "String"
					},
					"exceptionError": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryProcessFileSyncChildren')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactoryProcessFileSyncChildren')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Read File Sync",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set dataId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileinputName')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get File size Dat",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Setfor file Dat Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileDatName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"size",
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If file size equal and Not exist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get File size Dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@and(activity('Get File size Dat').output.exists,equals(variables('fileDatSize'), string(if(contains(activity('Get File size Dat').output,'size'),activity('Get File size Dat').output.size,0))))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set executePipeLineName error message",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "executePipeLineName",
										"value": "error message file dat size not mapping"
									}
								}
							]
						}
					},
					{
						"name": "Setfor file Dat Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set For Each File Dat Sizer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatName",
							"value": {
								"value": "@trim(string(split(activity('Read File Sync').output.firstRow.Prop_0,'|')[0]))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set For Each File Dat Sizer",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Read File Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatSize",
							"value": {
								"value": "@trim(split(activity('Read FIle Sync').output.firstRow.Prop_0,'|')[1])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set dataId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "insert data factory  process file sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "dataId",
							"value": {
								"value": "@string(first(first(activity('insert data factory  process file sync').output.resultSets).rows).DATA_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileInputName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set executePipeLineName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileinputName",
							"value": {
								"value": "@pipeline().parameters.fileInputName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "insert data factory  process file sync",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set fileInputName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tFILE_PATH,\n\tFILE_NAME_SYNC,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID\t VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.DATA_TYPE,''',\n\t''',pipeline().parameters.inputPath,''',\n\t''',pipeline().parameters.fileInputName,''',\n\t''P'',''Process file name :  ',pipeline().parameters.fileInputName,''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Switch Case Execute pipeline dat",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "If file size equal and Not exist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('executePipeLineName')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "error message file dat size not mapping",
									"activities": [
										{
											"name": "update file dat data not mapping",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY  \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t'FILE_NAME = ''',variables('fileDatName'),''',',\n\t' DESCRIPTION = ''file name data not found/file size no mapping file result ',pipeline().parameters.fileInputName,'''',\n\t' WHERE DATA_ID =',variables('dataId'),';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "CC_ReviewDataFacInsertBillingProfileProcessDat",
									"activities": [
										{
											"name": "Execute CC_ReviewDataFacInsertBillingProfileProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_ReviewDataFacInsertBillingProfileProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "CC_ChangeCatSubcatInsertBillingAccountNoProcessDat",
									"activities": [
										{
											"name": "CC_DataFactoryInsertBillingChangeCatSubcatProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertBillingChangeCatSubcatProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "CC_ChangeCatSubcatDataFactoryInsertProfileChangeProcessDat",
									"activities": [
										{
											"name": "CC_DataFactoryInsertProfileChangeProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_ChangeCatSubcatDataFactoryInsertProfileChangeProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat",
									"activities": [
										{
											"name": "CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										}
									]
								},
								{
									"value": "CC_DataFactoryInsertOrUpdateScoreValueProcessDat",
									"activities": [
										{
											"name": "CC_DataFactoryInsertOrUpdateScoreValueProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_DataFactoryInsertOrUpdateScoreValueProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"dataId": {
														"value": "@variables('dataId')",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													}
												}
											}
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Fail Not Have Pipeline Name in data factory",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "Fail Not Have Pipeline Name in data factory",
										"errorCode": "400"
									}
								}
							]
						}
					},
					{
						"name": "Set executePipeLineName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "executePipeLineName",
							"value": {
								"value": "@pipeline().parameters.executePipeLineName",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileInputName": {
						"type": "string"
					},
					"executePipeLineName": {
						"type": "string"
					}
				},
				"variables": {
					"fileDatName": {
						"type": "String"
					},
					"fileDatSize": {
						"type": "String"
					},
					"dataId": {
						"type": "String"
					},
					"fileinputName": {
						"type": "String"
					},
					"exceptionError": {
						"type": "String"
					},
					"executePipeLineName": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewDataFacInsertBillingProfileProcessDat')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryInsertBillingChangeCatSubcatProcessDat')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ChangeCatSubcatDataFactoryInsertProfileChangeProcessDat')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryInsertOrUpdateNegotiationValueProcessDat')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryInsertOrUpdateScoreValueProcessDat')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactorySendFileProcessCount')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get COUNT",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@pipeline().parameters.ScriptCount",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "If Billing Account List is empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get COUNT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get COUNT').output.firstRow.COUNT,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Get limit",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT CAST(ISNULL(NULLIF(LOV_NAME ,''''),50000) AS NUMERIC(22,0)) AS LIMIT FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT WHERE LOV_TYPE = ''WRITE_FILE_MAX_RECORD'' AND ACTIVE_FLG = ''Y''')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlMaster",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Get Count Round",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set limitPerRound",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT\n    IIF(ROUND(',activity('Get COUNT').output.firstRow.COUNT,' /(',variables('limitPerRound'),'), 0, 1)>0,\n\tROUND(',activity('Get COUNT').output.firstRow.COUNT,' /(',variables('limitPerRound'),'), 0, 1)+\n\t(IIF(',activity('Get COUNT').output.firstRow.COUNT,'%(',variables('limitPerRound'),') > 0,1,0)),1) AS COUNT_ROUND;')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "AzureSqlMaster",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "Set limitPerRound",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get limit",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "limitPerRound",
										"value": {
											"value": "@string(activity('Get limit').output.firstRow.LIMIT)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CC_DataFactorySendFileProcessCrossway",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Get Count Round",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactorySendFileProcessCrossway",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@pipeline().parameters.prefixOutputFile",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@pipeline().parameters.fileTypeOutputFile",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@pipeline().parameters.DATA_TYPE",
												"type": "Expression"
											},
											"count": {
												"value": "@activity('Get COUNT').output.firstRow.COUNT",
												"type": "Expression"
											},
											"pipeLineProcessFileName": {
												"value": "@pipeline().parameters.pipeLineProcessFileName",
												"type": "Expression"
											},
											"limitPerRound": {
												"value": "@variables('limitPerRound')",
												"type": "Expression"
											},
											"listRound": {
												"value": "@range(1,int(activity('Get Count Round').output.firstRow.COUNT_ROUND) )",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert CC_DATA_FACTORY exception",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "CC_DataFactorySendFileProcessCrossway",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''E'',''',substring(concat('CC_DataFactorySendFileProcessCrossway Exception :',replace(activity('CC_DataFactorySendFileProcessCrossway').Error.Message,'''','\"')),0,if(less(length(replace(activity('CC_DataFactorySendFileProcessCrossway').Error.Message,'''','\"')),499),length(replace(activity('CC_DataFactorySendFileProcessCrossway').Error.Message,'''','\"')),499)),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert when Billing Account List is empty",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.DATA_TYPE,''',\n\t''S'',''',pipeline().parameters.messageWhenCountZero,''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"ScriptCount": {
						"type": "string"
					},
					"messageWhenCountZero": {
						"type": "string"
					},
					"pipeLineProcessFileName": {
						"type": "string"
					}
				},
				"variables": {
					"fileName": {
						"type": "String"
					},
					"fileSyncName": {
						"type": "String"
					},
					"pocessTime": {
						"type": "String"
					},
					"countBa": {
						"type": "String"
					},
					"limitPerRound": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactorySendFileProcessCrossway')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DataFactorySendFileProcessCrossway')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SendFileProcessCrossway",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.pipeLineProcessFileName",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "CC_ReviewDataFactorySendBilingNoProcesFile",
									"activities": [
										{
											"name": "CC_ReviewDataFactorySendBilingNoProcessAccountNoList",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_ReviewDataFactorySendBilingNoProcessLoop",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"outputPath": {
														"value": "@pipeline().parameters.outputPath",
														"type": "Expression"
													},
													"prefixOutputFile": {
														"value": "@pipeline().parameters.prefixOutputFile",
														"type": "Expression"
													},
													"fileTypeOutputFile": {
														"value": "@pipeline().parameters.fileTypeOutputFile",
														"type": "Expression"
													},
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"count": {
														"value": "@pipeline().parameters.count",
														"type": "Expression"
													},
													"limitPerRound": {
														"value": "@pipeline().parameters.limitPerRound",
														"type": "Expression"
													},
													"listRound": {
														"value": "@pipeline().parameters.listRound",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "insert CC_DATA_FACTORY exception",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "CC_ReviewDataFactorySendBilingNoProcessAccountNoList",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''E'',''',substring(concat('CC_ReviewDataFactorySendBilingNoProcessAccountNoList Exception :',replace(activity('CC_ReviewDataFactorySendBilingNoProcessAccountNoList').Error.Message,'''','\"')),0,if(less(length(replace(activity('CC_ReviewDataFactorySendBilingNoProcessAccountNoList').Error.Message,'''','\"')),499),length(replace(activity('CC_ReviewDataFactorySendBilingNoProcessAccountNoList').Error.Message,'''','\"')),499)),''');')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "CC_CaCreditLimitDataFatorySendAccntIdProcesFile",
									"activities": [
										{
											"name": "CC_CaCreditLimitDataFatorySendAccntIdProcesFile",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_CaCreditLimitDataFatorySendAccntIdProcesLoop",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"outputPath": {
														"value": "@pipeline().parameters.outputPath",
														"type": "Expression"
													},
													"prefixOutputFile": {
														"value": "@pipeline().parameters.prefixOutputFile",
														"type": "Expression"
													},
													"fileTypeOutputFile": {
														"value": "@pipeline().parameters.fileTypeOutputFile",
														"type": "Expression"
													},
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"count": {
														"value": "@pipeline().parameters.count",
														"type": "Expression"
													},
													"listRound": {
														"value": "@pipeline().parameters.listRound",
														"type": "Expression"
													},
													"limitPerRound": {
														"value": "@pipeline().parameters.limitPerRound",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "insert CC_DATA_FACTORY exception_copy1",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "CC_CaCreditLimitDataFatorySendAccntIdProcesFile",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''E'',''',substring(concat('CC_CaCreditLimitDataFatorySendAccntIdProcesFile Exception :',replace(activity('CC_CaCreditLimitDataFatorySendAccntIdProcesFile').Error.Message,'''','\"')),0,if(less(length(replace(activity('CC_CaCreditLimitDataFatorySendAccntIdProcesFile').Error.Message,'''','\"')),499),length(replace(activity('CC_CaCreditLimitDataFatorySendAccntIdProcesFile').Error.Message,'''','\"')),499)),''');')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "CC_SendTestCcBillingProcessLoop",
									"activities": [
										{
											"name": "CC_SendTestCcBillingProcessLoop",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_SendTestCcBillingProcessLoop",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"outputPath": {
														"value": "@pipeline().parameters.outputPath",
														"type": "Expression"
													},
													"prefixOutputFile": {
														"value": "@pipeline().parameters.prefixOutputFile",
														"type": "Expression"
													},
													"fileTypeOutputFile": {
														"value": "@pipeline().parameters.fileTypeOutputFile",
														"type": "Expression"
													},
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"DATA_TYPE": {
														"value": "@pipeline().parameters.DATA_TYPE",
														"type": "Expression"
													},
													"count": {
														"value": "@pipeline().parameters.count",
														"type": "Expression"
													},
													"limitPerRound": {
														"value": "@pipeline().parameters.limitPerRound",
														"type": "Expression"
													},
													"listRound": {
														"value": "@pipeline().parameters.listRound",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "insert CC_DATA_FACTORY exception_copy1_copy1",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "CC_SendTestCcBillingProcessLoop",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''E'',''',substring(concat('CC_SendTestCcBillingProcessLoop Exception :',replace(activity('CC_SendTestCcBillingProcessLoop').Error.Message,'''','\"')),0,if(less(length(replace(activity('CC_SendTestCcBillingProcessLoop').Error.Message,'''','\"')),499),length(replace(activity('CC_SendTestCcBillingProcessLoop').Error.Message,'''','\"')),499)),''');')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"count": {
						"type": "float"
					},
					"pipeLineProcessFileName": {
						"type": "string"
					},
					"limitPerRound": {
						"type": "string"
					},
					"listRound": {
						"type": "array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewDataFactorySendBilingNoProcessLoop')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_CaCreditLimitDataFatorySendAccntIdProcesLoop')]",
				"[concat(variables('factoryId'), '/pipelines/CC_SendTestCcBillingProcessLoop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_InsertOrUpdateScoreValueByClLevelCase')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Insert or Update ScoreValue",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Set insertOrUpdateCase",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@variables('insertOrUpdateCase')",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "CA",
									"activities": [
										{
											"name": "Script Insert Table CC_DATA_FACTORY_HIST_copy1",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Script Insert or Update Table CC_SCORE_VALUE",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',pipeline().parameters.line,''',\n\t''',substring(replace(activity('Script Insert or Update Table CC_SCORE_VALUE').Error.Message,'''','\"'),0,499),''',\n\t''E''\n\t)')",
															"type": "Expression"
														}
													}
												]
											}
										},
										{
											"name": "Get Exiting Value by accntId",
											"type": "Lookup",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT ''Y'' from ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE WHERE ACCNT_ID = ''',split(pipeline().parameters.line,'|')[6],'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSqlTableCurrent",
													"type": "DatasetReference",
													"parameters": {}
												}
											}
										},
										{
											"name": "Script Insert or Update Table CC_SCORE_VALUE",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Set Insert Ca Case",
													"dependencyConditions": [
														"Succeeded"
													]
												},
												{
													"activity": "Set Update Ca Case",
													"dependencyConditions": [
														"Succeeded"
													]
												},
												{
													"activity": "Set Existing Ca Case",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@if(variables('existing'),variables('scriptInsert'),variables('scriptUpdate'))",
															"type": "Expression"
														}
													}
												]
											}
										},
										{
											"name": "Set Existing Ca Case",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get Exiting Value by accntId",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "existing",
												"value": {
													"value": "@not(contains(string(activity('Get Exiting Value by accntId').output),'firstRow'))",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set Update Ca Case",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get Exiting Value by accntId",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "scriptUpdate",
												"value": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE\n    SET\n\tCREATED =',if(empty(split(pipeline().parameters.line,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')'),concat('''',split(pipeline().parameters.line,'|')[2],'''')),',\n\tCREATED_BY =',if(empty(split(pipeline().parameters.line,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(pipeline().parameters.line,'|')[3],'''')),',\n\tLAST_UPD =',if(empty(split(pipeline().parameters.line,'|')[4]),'NULL',concat('''',split(pipeline().parameters.line,'|')[4],'''')),',\n\tLAST_UPD_BY =',if(empty(split(pipeline().parameters.line,'|')[5]),'NULL',concat('''',split(pipeline().parameters.line,'|')[5],'''')),',\n\tACCNT_ID =',if(empty(split(pipeline().parameters.line,'|')[6]),'NULL',concat('''',split(pipeline().parameters.line,'|')[6],'''')),',\n\tBILLING_ACCNT_ID =',if(empty(split(pipeline().parameters.line,'|')[7]),'NULL',concat('''',split(pipeline().parameters.line,'|')[7],'''')),',\n\tACCNT_NO =',if(empty(split(pipeline().parameters.line,'|')[8]),'NULL',concat('''',split(pipeline().parameters.line,'|')[8],'''')),',\n\tCL_LEVEL =',if(empty(split(pipeline().parameters.line,'|')[9]),'NULL',concat('''',split(pipeline().parameters.line,'|')[9],'''')),',\n\tSCORE_RANGE =',if(empty(split(pipeline().parameters.line,'|')[10]),'NULL',concat('''',split(pipeline().parameters.line,'|')[10],'''')),',\n\tCL_TYPE =',if(empty(split(pipeline().parameters.line,'|')[11]),'NULL',concat('''',split(pipeline().parameters.line,'|')[11],'''')),',\n\tCL_CHANGE_REASON =',if(empty(split(pipeline().parameters.line,'|')[12]),'NULL',concat('''',split(pipeline().parameters.line,'|')[12],'''')),',\n\tOUTCOME_CD =',if(empty(split(pipeline().parameters.line,'|')[13]),'NULL',concat('''',split(pipeline().parameters.line,'|')[12],'''')),',\n\tOUTCOME_REASON =',if(empty(split(pipeline().parameters.line,'|')[14]),'NULL',concat('''',split(pipeline().parameters.line,'|')[14],'''')),',\n\tCREDIT_LIMIT =',if(empty(split(pipeline().parameters.line,'|')[15]),'NULL',concat('''',split(pipeline().parameters.line,'|')[15],'''')),',\n\tPERM_CREDIT_LIMIT =',if(empty(split(pipeline().parameters.line,'|')[16]),'NULL',concat('''',split(pipeline().parameters.line,'|')[16],'''')),',\n\tTEMP_CREDIT_LIMIT =',if(empty(split(pipeline().parameters.line,'|')[17]),'NULL',concat('''',split(pipeline().parameters.line,'|')[17],'''')),',\n\tPREV_CREDIT_LIMIT =',if(empty(split(pipeline().parameters.line,'|')[18]),'NULL',concat('''',split(pipeline().parameters.line,'|')[18],'''')),',\n\tPREV_SCORE_RANGE =',if(empty(split(pipeline().parameters.line,'|')[19]),'NULL',concat('''',split(pipeline().parameters.line,'|')[19],'''')),',\n\tACTUAL =',if(empty(split(pipeline().parameters.line,'|')[20]),'NULL',concat('''',split(pipeline().parameters.line,'|')[20],'''')),',\n\tACTUAL_PERM =',if(empty(split(pipeline().parameters.line,'|')[21]),'NULL',concat('''',split(pipeline().parameters.line,'|')[21],'''')),',\n\tBILLING_CREDIT_LIMIT =',if(empty(split(pipeline().parameters.line,'|')[22]),'NULL',concat('''',split(pipeline().parameters.line,'|')[22],'''')),',\n\tBILLING_THRESHOLD_SET_ID =',if(empty(split(pipeline().parameters.line,'|')[23]),'NULL',concat('''',split(pipeline().parameters.line,'|')[23],'''')),',\n\tFBB_FLAG =',if(empty(split(pipeline().parameters.line,'|')[24]),'NULL',concat('''',split(pipeline().parameters.line,'|')[24],'''')),',\n\tLAST_REVIEW_DAT =',if(empty(split(pipeline().parameters.line,'|')[25]),'NULL',concat('''',split(pipeline().parameters.line,'|')[25],'''')),',\n\tMIN_REVIEW =',if(empty(split(pipeline().parameters.line,'|')[26]),'NULL',concat('''',split(pipeline().parameters.line,'|')[26],'''')),',\n\tAVAILABLE_CREDIT =',if(empty(split(pipeline().parameters.line,'|')[27]),'NULL',concat('''',split(pipeline().parameters.line,'|')[27],'''')),',\n\tPAYMENT_FLG =',if(empty(split(pipeline().parameters.line,'|')[28]),'NULL',concat('''',split(pipeline().parameters.line,'|')[28],'''')),',\n\tBA_REGISTER_DT =',if(empty(split(pipeline().parameters.line,'|')[29]),'NULL',concat('''',split(pipeline().parameters.line,'|')[29],'''')),'\n\tWHERE ACCNT_ID = ''',split(pipeline().parameters.line,'|')[6],''';')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set Insert Ca Case",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get Exiting Value by accntId",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "scriptInsert",
												"value": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE \n    (REF_ROW_ID,\n\tCREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tACCNT_ID,\n\tBILLING_ACCNT_ID,\n\tACCNT_NO,\n\tCL_LEVEL,\n\tSCORE_RANGE,\n\tCL_TYPE,\n\tCL_CHANGE_REASON,\n\tOUTCOME_CD,\n\tOUTCOME_REASON,\n\tCREDIT_LIMIT,\n\tPERM_CREDIT_LIMIT,\n\tTEMP_CREDIT_LIMIT,\n\tPREV_CREDIT_LIMIT,\n\tPREV_SCORE_RANGE,\n\tACTUAL,\n\tACTUAL_PERM,\n\tBILLING_CREDIT_LIMIT,\n\tBILLING_THRESHOLD_SET_ID,\n\tFBB_FLAG,\n\tLAST_REVIEW_DAT,\n\tMIN_REVIEW,\n\tAVAILABLE_CREDIT,\n\tPAYMENT_FLG,\n\tBA_REGISTER_DT) VALUES ('\n    ,if(empty(split(pipeline().parameters.line,'|')[1]),'NULL',concat('''',split(pipeline().parameters.line,'|')[1],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')'),concat('''',split(pipeline().parameters.line,'|')[2],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(pipeline().parameters.line,'|')[3],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[4]),'NULL',concat('''',split(pipeline().parameters.line,'|')[4],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[5]),'NULL',concat('''',split(pipeline().parameters.line,'|')[5],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[6]),'NULL',concat('''',split(pipeline().parameters.line,'|')[6],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[7]),'NULL',concat('''',split(pipeline().parameters.line,'|')[7],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[8]),'NULL',concat('''',split(pipeline().parameters.line,'|')[8],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[9]),'NULL',concat('''',split(pipeline().parameters.line,'|')[9],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[10]),'NULL',concat('''',split(pipeline().parameters.line,'|')[10],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[11]),'NULL',concat('''',split(pipeline().parameters.line,'|')[11],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[12]),'NULL',concat('''',split(pipeline().parameters.line,'|')[12],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[13]),'NULL',concat('''',split(pipeline().parameters.line,'|')[13],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[14]),'NULL',concat('''',split(pipeline().parameters.line,'|')[14],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[15]),'NULL',concat('''',split(pipeline().parameters.line,'|')[15],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[16]),'NULL',concat('''',split(pipeline().parameters.line,'|')[16],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[17]),'NULL',concat('''',split(pipeline().parameters.line,'|')[17],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[18]),'NULL',concat('''',split(pipeline().parameters.line,'|')[18],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[19]),'NULL',concat('''',split(pipeline().parameters.line,'|')[19],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[20]),'NULL',concat('''',split(pipeline().parameters.line,'|')[20],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[21]),'NULL',concat('''',split(pipeline().parameters.line,'|')[21],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[22]),'NULL',concat('''',split(pipeline().parameters.line,'|')[22],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[23]),'NULL',concat('''',split(pipeline().parameters.line,'|')[23],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[24]),'NULL',concat('''',split(pipeline().parameters.line,'|')[24],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[25]),'NULL',concat('''',split(pipeline().parameters.line,'|')[25],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[26]),'NULL',concat('''',split(pipeline().parameters.line,'|')[26],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[27]),'NULL',concat('''',split(pipeline().parameters.line,'|')[27],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[28]),'NULL',concat('''',split(pipeline().parameters.line,'|')[28],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[29]),'NULL',concat('''',split(pipeline().parameters.line,'|')[29],'''')),');')\n",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "BA",
									"activities": [
										{
											"name": "Script Insert Table CC_DATA_FACTORY_HIST",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Script Insert or Update Table CC_SCORE_VALUE_copy1",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',pipeline().parameters.line,''',\n\t''',substring(replace(activity('Script Insert or Update Table CC_SCORE_VALUE_copy1').Error.Message,'''','\"'),0,499),''',\n\t''E''\n\t)')",
															"type": "Expression"
														}
													}
												]
											}
										},
										{
											"name": "Get Exiting Value",
											"type": "Lookup",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "AzureSqlSource",
													"sqlReaderQuery": {
														"value": "@concat('SELECT ''Y'' from ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE WHERE ACCNT_ID = ''',split(pipeline().parameters.line,'|')[6],''' AND BILLING_ACCNT_ID = ''',split(pipeline().parameters.line,'|')[7],'''')",
														"type": "Expression"
													},
													"queryTimeout": "02:00:00",
													"partitionOption": "None"
												},
												"dataset": {
													"referenceName": "AzureSqlTableCurrent",
													"type": "DatasetReference",
													"parameters": {}
												}
											}
										},
										{
											"name": "Script Insert or Update Table CC_SCORE_VALUE_copy1",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Set Existing Ba Case",
													"dependencyConditions": [
														"Succeeded"
													]
												},
												{
													"activity": "Set Update Ba Case",
													"dependencyConditions": [
														"Succeeded"
													]
												},
												{
													"activity": "Set Insert Ba Case",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@if(variables('existing'),variables('scriptInsert'),variables('scriptUpdate'))",
															"type": "Expression"
														}
													}
												]
											}
										},
										{
											"name": "Set Existing Ba Case",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get Exiting Value",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "existing",
												"value": {
													"value": "@not(contains(string(activity('Get Exiting Value').output),'firstRow'))",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set Update Ba Case",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get Exiting Value",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "scriptUpdate",
												"value": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE\n    SET\n\tCREATED =',if(empty(split(pipeline().parameters.line,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')'),concat('''',split(pipeline().parameters.line,'|')[2],'''')),',\n\tCREATED_BY =',if(empty(split(pipeline().parameters.line,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(pipeline().parameters.line,'|')[3],'''')),',\n\tLAST_UPD =',if(empty(split(pipeline().parameters.line,'|')[4]),'NULL',concat('''',split(pipeline().parameters.line,'|')[4],'''')),',\n\tLAST_UPD_BY =',if(empty(split(pipeline().parameters.line,'|')[5]),'NULL',concat('''',split(pipeline().parameters.line,'|')[5],'''')),',\n\tACCNT_ID =',if(empty(split(pipeline().parameters.line,'|')[6]),'NULL',concat('''',split(pipeline().parameters.line,'|')[6],'''')),',\n\tBILLING_ACCNT_ID =',if(empty(split(pipeline().parameters.line,'|')[7]),'NULL',concat('''',split(pipeline().parameters.line,'|')[7],'''')),',\n\tACCNT_NO =',if(empty(split(pipeline().parameters.line,'|')[8]),'NULL',concat('''',split(pipeline().parameters.line,'|')[8],'''')),',\n\tCL_LEVEL =',if(empty(split(pipeline().parameters.line,'|')[9]),'NULL',concat('''',split(pipeline().parameters.line,'|')[9],'''')),',\n\tSCORE_RANGE =',if(empty(split(pipeline().parameters.line,'|')[10]),'NULL',concat('''',split(pipeline().parameters.line,'|')[10],'''')),',\n\tCL_TYPE =',if(empty(split(pipeline().parameters.line,'|')[11]),'NULL',concat('''',split(pipeline().parameters.line,'|')[11],'''')),',\n\tCL_CHANGE_REASON =',if(empty(split(pipeline().parameters.line,'|')[12]),'NULL',concat('''',split(pipeline().parameters.line,'|')[12],'''')),',\n\tOUTCOME_CD =',if(empty(split(pipeline().parameters.line,'|')[13]),'NULL',concat('''',split(pipeline().parameters.line,'|')[12],'''')),',\n\tOUTCOME_REASON =',if(empty(split(pipeline().parameters.line,'|')[14]),'NULL',concat('''',split(pipeline().parameters.line,'|')[14],'''')),',\n\tCREDIT_LIMIT =',if(empty(split(pipeline().parameters.line,'|')[15]),'NULL',concat('''',split(pipeline().parameters.line,'|')[15],'''')),',\n\tPERM_CREDIT_LIMIT =',if(empty(split(pipeline().parameters.line,'|')[16]),'NULL',concat('''',split(pipeline().parameters.line,'|')[16],'''')),',\n\tTEMP_CREDIT_LIMIT =',if(empty(split(pipeline().parameters.line,'|')[17]),'NULL',concat('''',split(pipeline().parameters.line,'|')[17],'''')),',\n\tPREV_CREDIT_LIMIT =',if(empty(split(pipeline().parameters.line,'|')[18]),'NULL',concat('''',split(pipeline().parameters.line,'|')[18],'''')),',\n\tPREV_SCORE_RANGE =',if(empty(split(pipeline().parameters.line,'|')[19]),'NULL',concat('''',split(pipeline().parameters.line,'|')[19],'''')),',\n\tACTUAL =',if(empty(split(pipeline().parameters.line,'|')[20]),'NULL',concat('''',split(pipeline().parameters.line,'|')[20],'''')),',\n\tACTUAL_PERM =',if(empty(split(pipeline().parameters.line,'|')[21]),'NULL',concat('''',split(pipeline().parameters.line,'|')[21],'''')),',\n\tBILLING_CREDIT_LIMIT =',if(empty(split(pipeline().parameters.line,'|')[22]),'NULL',concat('''',split(pipeline().parameters.line,'|')[22],'''')),',\n\tBILLING_THRESHOLD_SET_ID =',if(empty(split(pipeline().parameters.line,'|')[23]),'NULL',concat('''',split(pipeline().parameters.line,'|')[23],'''')),',\n\tFBB_FLAG =',if(empty(split(pipeline().parameters.line,'|')[24]),'NULL',concat('''',split(pipeline().parameters.line,'|')[24],'''')),',\n\tLAST_REVIEW_DAT =',if(empty(split(pipeline().parameters.line,'|')[25]),'NULL',concat('''',split(pipeline().parameters.line,'|')[25],'''')),',\n\tMIN_REVIEW =',if(empty(split(pipeline().parameters.line,'|')[26]),'NULL',concat('''',split(pipeline().parameters.line,'|')[26],'''')),',\n\tAVAILABLE_CREDIT =',if(empty(split(pipeline().parameters.line,'|')[27]),'NULL',concat('''',split(pipeline().parameters.line,'|')[27],'''')),',\n\tPAYMENT_FLG =',if(empty(split(pipeline().parameters.line,'|')[28]),'NULL',concat('''',split(pipeline().parameters.line,'|')[28],'''')),',\n\tBA_REGISTER_DT =',if(empty(split(pipeline().parameters.line,'|')[29]),'NULL',concat('''',split(pipeline().parameters.line,'|')[29],'''')),'\n\tWHERE ACCNT_ID = ''',split(pipeline().parameters.line,'|')[6],''' AND BILLING_ACCNT_ID = ''',split(pipeline().parameters.line,'|')[7],''';')",
													"type": "Expression"
												}
											}
										},
										{
											"name": "Set Insert Ba Case",
											"type": "SetVariable",
											"dependsOn": [
												{
													"activity": "Get Exiting Value",
													"dependencyConditions": [
														"Succeeded"
													]
												}
											],
											"userProperties": [],
											"typeProperties": {
												"variableName": "scriptInsert",
												"value": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE \n    (REF_ROW_ID,\n\tCREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tACCNT_ID,\n\tBILLING_ACCNT_ID,\n\tACCNT_NO,\n\tCL_LEVEL,\n\tSCORE_RANGE,\n\tCL_TYPE,\n\tCL_CHANGE_REASON,\n\tOUTCOME_CD,\n\tOUTCOME_REASON,\n\tCREDIT_LIMIT,\n\tPERM_CREDIT_LIMIT,\n\tTEMP_CREDIT_LIMIT,\n\tPREV_CREDIT_LIMIT,\n\tPREV_SCORE_RANGE,\n\tACTUAL,\n\tACTUAL_PERM,\n\tBILLING_CREDIT_LIMIT,\n\tBILLING_THRESHOLD_SET_ID,\n\tFBB_FLAG,\n\tLAST_REVIEW_DAT,\n\tMIN_REVIEW,\n\tAVAILABLE_CREDIT,\n\tPAYMENT_FLG,\n\tBA_REGISTER_DT) VALUES ('\n    ,if(empty(split(pipeline().parameters.line,'|')[1]),'NULL',concat('''',split(pipeline().parameters.line,'|')[1],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[2]),concat('CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')'),concat('''',split(pipeline().parameters.line,'|')[2],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[3]),concat('''',pipeline().parameters.CREDIT_USER,''''),concat('''',split(pipeline().parameters.line,'|')[3],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[4]),'NULL',concat('''',split(pipeline().parameters.line,'|')[4],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[5]),'NULL',concat('''',split(pipeline().parameters.line,'|')[5],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[6]),'NULL',concat('''',split(pipeline().parameters.line,'|')[6],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[7]),'NULL',concat('''',split(pipeline().parameters.line,'|')[7],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[8]),'NULL',concat('''',split(pipeline().parameters.line,'|')[8],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[9]),'NULL',concat('''',split(pipeline().parameters.line,'|')[9],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[10]),'NULL',concat('''',split(pipeline().parameters.line,'|')[10],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[11]),'NULL',concat('''',split(pipeline().parameters.line,'|')[11],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[12]),'NULL',concat('''',split(pipeline().parameters.line,'|')[12],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[13]),'NULL',concat('''',split(pipeline().parameters.line,'|')[13],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[14]),'NULL',concat('''',split(pipeline().parameters.line,'|')[14],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[15]),'NULL',concat('''',split(pipeline().parameters.line,'|')[15],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[16]),'NULL',concat('''',split(pipeline().parameters.line,'|')[16],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[17]),'NULL',concat('''',split(pipeline().parameters.line,'|')[17],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[18]),'NULL',concat('''',split(pipeline().parameters.line,'|')[18],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[19]),'NULL',concat('''',split(pipeline().parameters.line,'|')[19],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[20]),'NULL',concat('''',split(pipeline().parameters.line,'|')[20],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[21]),'NULL',concat('''',split(pipeline().parameters.line,'|')[21],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[22]),'NULL',concat('''',split(pipeline().parameters.line,'|')[22],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[23]),'NULL',concat('''',split(pipeline().parameters.line,'|')[23],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[24]),'NULL',concat('''',split(pipeline().parameters.line,'|')[24],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[25]),'NULL',concat('''',split(pipeline().parameters.line,'|')[25],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[26]),'NULL',concat('''',split(pipeline().parameters.line,'|')[26],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[27]),'NULL',concat('''',split(pipeline().parameters.line,'|')[27],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[28]),'NULL',concat('''',split(pipeline().parameters.line,'|')[28],'''')),',',\nif(empty(split(pipeline().parameters.line,'|')[29]),'NULL',concat('''',split(pipeline().parameters.line,'|')[29],'''')),');')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"value": "NotInCaAndBa",
									"activities": [
										{
											"name": "Script Insert Table CC_DATA_FACTORY_HIST_copy2",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_HIST \n    (CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_ID,\n\tDESCRIPTION,\n\tERROR_MSG,\n\tSTATUS) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t',pipeline().parameters.dataId,',\n\t''',pipeline().parameters.line,''',\n\t''',if(and(not(equals(trim(coalesce(split(pipeline().parameters.line,'|')[9],'')),'CA')),not(equals(trim(coalesce(split(pipeline().parameters.line,'|')[9],'')),'BA'))),'clLevel not match Ca or Ba',\n\t\tif(and(equals(trim(coalesce(split(pipeline().parameters.line,'|')[9],'')),'CA'),equals(trim(coalesce(split(pipeline().parameters.line,'|')[6],'')),'')),'accntId data not found',\n\t\tif(and(equals(trim(coalesce(split(pipeline().parameters.line,'|')[9],'')),'BA'),equals(trim(coalesce(split(pipeline().parameters.line,'|')[6],'')),'')),'accntId data not found',\n\t\t'billingAccntId data not found'))),''',\n\t''E''\n\t)')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Set insertOrUpdateCase",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "insertOrUpdateCase",
							"value": {
								"value": "@if(and(not(equals(trim(coalesce(split(pipeline().parameters.line,'|')[6],'')),'')),equals(string(split(pipeline().parameters.line,'|')[9]),'CA')),'CA',\nif(and(and(not(equals(trim(coalesce(split(pipeline().parameters.line,'|')[6],'')),'')),not(equals(trim(coalesce(split(pipeline().parameters.line,'|')[7],'')),'')) ),equals(string(split(pipeline().parameters.line,'|')[9]),'BA')),'BA',\n'NotInCaAndBa'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"line": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					}
				},
				"variables": {
					"existing": {
						"type": "Boolean"
					},
					"scriptInsert": {
						"type": "String"
					},
					"scriptUpdate": {
						"type": "String"
					},
					"insertOrUpdateCase": {
						"type": "String"
					},
					"lineError": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableCurrent')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_MoveFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy to create file",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inDir",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.inName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outDir",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.outName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Delete File",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy to create file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inDir",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.inName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Delete File Archive",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Delete File",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outDir",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.outName",
										"type": "Expression"
									}
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inDir": {
						"type": "string"
					},
					"outDir": {
						"type": "string"
					},
					"inName": {
						"type": "string"
					},
					"outName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_PLAY_GROUND')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Set prefix",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"maxRowsPerFile": {
										"value": "@variables('limit')",
										"type": "Expression"
									},
									"fileNamePrefix": {
										"value": "@variables('prefixName')",
										"type": "Expression"
									},
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									},
									{
										"source": {
											"name": "CREATED",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										}
									},
									{
										"source": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										}
									},
									{
										"source": {
											"name": "LAST_UPD",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										}
									},
									{
										"source": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										}
									},
									{
										"source": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										}
									},
									{
										"source": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										}
									},
									{
										"source": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										}
									},
									{
										"source": {
											"name": "BILL_NAME",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										}
									},
									{
										"source": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										}
									},
									{
										"source": {
											"name": "INVOICING_COMPANY",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										}
									},
									{
										"source": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										}
									},
									{
										"source": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 13
										}
									},
									{
										"source": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 14
										}
									},
									{
										"source": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 15
										}
									},
									{
										"source": {
											"name": "REGISTER_DT",
											"type": "DateTime",
											"physicalType": "datetime2"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 16
										}
									},
									{
										"source": {
											"name": "ARPU",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 17
										}
									},
									{
										"source": {
											"name": "CREDIT_GRADE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 5
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 18
										}
									},
									{
										"source": {
											"name": "DEBT_NEGO_FLG",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 19
										}
									},
									{
										"source": {
											"name": "PAYMENT_FLAG",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 20
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "TestCCBilling",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileMasterPath",
								"type": "DatasetReference",
								"parameters": {
									"filePath": "C:\\export\\home\\oper\\sffdata\\sff_billing_review"
								}
							}
						]
					},
					{
						"name": "Set processTime",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "processTime",
							"value": {
								"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','North Asia Standard Time'),'yyyyMMdd_HHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set prefix",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "prefixName",
							"value": {
								"value": "@concat('REQ_REVIEW_BILLING_',variables('processTime'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"processTime": {
						"type": "String"
					},
					"prefixName": {
						"type": "String"
					},
					"limit": {
						"type": "String",
						"defaultValue": "50000"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/TestCCBilling')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterPath')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewCreateFileOutput')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "insert response file onprocess",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tRES_TYPE,\n\tSTATUS,\n\tFILE_NAME) OUTPUT INSERTED.RES_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.fileType,''',\n\t''O'',''',pipeline().parameters.fileName,''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set resId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "insert response file onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "resId",
							"value": {
								"value": "@string(first(first(activity('insert response file onprocess').output.resultSets).rows).RES_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup file detail",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set resId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT COALESCE(FILE_LINE+''|''+ERROR_MSG ,FILE_LINE) AS errorLine, STATUS AS status \n        FROM CREDIT_DEV.CC_TEMP_FILE_DETAIL \n        WHERE FILE_ID = ',pipeline().parameters.fileId,' ORDER BY FILE_DTL_ID;')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "If not Have Archive",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup file detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.fileNameArchive,string(null) )",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute createFileAndFileArchive",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewCreateFileOutputAndArchive",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"fileType": {
												"value": "@pipeline().parameters.fileType",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"fileId": {
												"value": "@pipeline().parameters.fileId",
												"type": "Expression"
											},
											"fileNameArchive": {
												"value": "@pipeline().parameters.fileNameArchive",
												"type": "Expression"
											},
											"countRecord": {
												"value": "@activity('Lookup file detail').output.count",
												"type": "Expression"
											},
											"resId": {
												"value": "@variables('resId')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert response file ExceptionError",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set error exception_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',variables('exceptionMessage'),'''  WHERE RES_ID =',variables('resId'),'')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set error exception_copy1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Execute createFileAndFileArchive",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "exceptionMessage",
										"value": {
											"value": "@substring(concat('Datafac Exception ',replace(string(activity('Execute createFileAndFileArchive')),'''','''''')),0,499)",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Execute createFileAndNotArchive",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewCreateFileOutputNotArchive",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"fileType": {
												"value": "@pipeline().parameters.fileType",
												"type": "Expression"
											},
											"fileName": {
												"value": "@pipeline().parameters.fileName",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"fileId": {
												"value": "@pipeline().parameters.fileId",
												"type": "Expression"
											},
											"countRecord": {
												"value": "@activity('Lookup file detail').output.count",
												"type": "Expression"
											},
											"resId": {
												"value": "@variables('resId')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "insert response file ExceptionError 1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set error exception",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',variables('exceptionMessage'),'''  WHERE RES_ID =',variables('resId'),'')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set error exception",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Execute createFileAndNotArchive",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "exceptionMessage",
										"value": {
											"value": "@substring(concat('Datafac Exception ',replace(string(activity('Execute createFileAndNotArchive')),'''','''''')),0,499)",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"fileType": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"fileId": {
						"type": "string"
					},
					"fileNameArchive": {
						"type": "string"
					}
				},
				"variables": {
					"resId": {
						"type": "String"
					},
					"switchCaseVal": {
						"type": "String"
					},
					"exceptionMessage": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewCreateFileOutputAndArchive')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewCreateFileOutputNotArchive')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewCreateFileOutputAndArchive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update RESPONSE_FILE not have input file_copy1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''P'',\n\tDESCRIPTION = ''Query response detail ',string(pipeline().parameters.countRecord),' record'' WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "create file output",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update RESPONSE_FILE not have input file_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT COALESCE(FILE_LINE+''|''+ERROR_MSG ,FILE_LINE) AS errorLine, STATUS AS status \n        FROM ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_DETAIL \n        WHERE FILE_ID = ',pipeline().parameters.fileId,' ORDER BY FILE_DTL_ID;')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "errorLine",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileToWrite",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Clear temp file detail",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Creste file Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_DETAIL\n        WHERE FILE_ID = ',pipeline().parameters.fileId,'')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear temp file",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear temp file detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE\n        WHERE FILE_ID = ',pipeline().parameters.fileId,'')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Creste file Success",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "create file output archive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tDESCRIPTION = ''Query response detail ',string(pipeline().parameters.countRecord),' record | create file ',pipeline().parameters.fileName,' in path ',pipeline().parameters.outputPath,' complete'' WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Creste file Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "create file output",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',activity('create file output').Error.Message,''' WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Get Metadata file created",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "create file output",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"exists",
								"size",
								"columnCount"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "create file output archive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Metadata file created",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"additionalColumns": [
									{
										"name": "COLUMN",
										"value": {
											"value": "@concat(pipeline().parameters.fileName,'|',coalesce(activity('Get Metadata file created').output?.size,'0'))",
											"type": "Expression"
										}
									}
								],
								"sqlReaderQuery": " SELECT 'ONE'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "COLUMN"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileToWrite",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileNameArchive",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Creste file Error_copy1",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "create file output archive",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',activity('create file output archive').Error.Message,''' WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"fileType": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"fileId": {
						"type": "string"
					},
					"fileNameArchive": {
						"type": "string"
					},
					"countRecord": {
						"type": "string"
					},
					"resId": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileToWrite')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewCreateFileOutputNotArchive')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update RESPONSE_FILE not have input file_copy1",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''P'',\n\tDESCRIPTION = ''Query response detail ',string(pipeline().parameters.countRecord),' record'' WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "create file output",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update RESPONSE_FILE not have input file_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT COALESCE(FILE_LINE+''|''+ERROR_MSG ,FILE_LINE) AS errorLine, STATUS AS status \n        FROM ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_DETAIL \n        WHERE FILE_ID = ',pipeline().parameters.fileId,' ORDER BY FILE_DTL_ID;')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "errorLine",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileToWrite",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.outputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileName",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Clear temp file detail",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Creste file Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_DETAIL\n        WHERE FILE_ID = ',pipeline().parameters.fileId,'')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear temp file",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear temp file detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE\n        WHERE FILE_ID = ',pipeline().parameters.fileId,'')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Creste file Success",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "create file output",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tDESCRIPTION = ''Query response detail ',string(pipeline().parameters.countRecord),' record | create file ',pipeline().parameters.fileName,' in path ',pipeline().parameters.outputPath,' complete'' WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Creste file Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "create file output",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',activity('create file output').Error.Message,'''  WHERE RES_ID =',pipeline().parameters.resId,';')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"fileType": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"fileId": {
						"type": "string"
					},
					"countRecord": {
						"type": "string"
					},
					"resId": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileToWrite')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewDataFacInsertBillingProfile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear CC_BILLING_REVIEW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config value').output),'firstRow')),\n\tor(\n\t\tor(\n\t\t\tor(\n\t\t\t\tequals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL1,'')),''),null,activity('Get Config value').output.firstRow.VAL1),null),\n\t\t\t\tequals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL3,'')),''),null,activity('Get Config value').output.firstRow.VAL3),null)\n\t\t\t),\n\t\t\tequals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL4,'')),''),null,activity('Get Config value').output.firstRow.VAL4),null)\n\t\t),\n\t\tequals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL7,'')),''),null,activity('Get Config value').output.firstRow.VAL7),null)\n\t)\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.val7",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute Pipeline FindFile indir",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactoryFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"executePipeLineName": {
												"value": "@variables('executeDatPipeLineName')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											},
											"oldDataIdList": {
												"value": "@variables('oldDataIdList')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL1,'')),''),null,activity('Get Config Value').output.firstRow.VAL1),null),',Input path(VAL1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL3,'')),''),null,activity('Get Config Value').output.firstRow.VAL3),null),',Prefix Input path(VAL3) ',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL4,'')),''),null,activity('Get Config Value').output.firstRow.VAL4),null),',file type Input path(VAL4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL7,'')),''),null,activity('Get Config Value').output.firstRow.VAL7),null),',Move Input path(VAL7)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL1,'')),''),null,activity('Get Config Value').output.firstRow.VAL1),null),',Input path(VAL1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL3,'')),''),null,activity('Get Config Value').output.firstRow.VAL3),null),',Prefix Input path(VAL3) ',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL4,'')),''),null,activity('Get Config Value').output.firstRow.VAL4),null),',file type Input path(VAL4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL7,'')),''),null,activity('Get Config Value').output.firstRow.VAL7),null),',Move Input path(VAL7)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL1,'')),''),null,activity('Get Config Value').output.firstRow.VAL1),null),',Input path(VAL1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL3,'')),''),null,activity('Get Config Value').output.firstRow.VAL3),null),',Prefix Input path(VAL3) ',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL4,'')),''),null,activity('Get Config Value').output.firstRow.VAL4),null),',file type Input path(VAL4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL7,'')),''),null,activity('Get Config Value').output.firstRow.VAL7),null),',Move Input path(VAL7)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL1,'')),''),null,activity('Get Config Value').output.firstRow.VAL1),null),',Input path(VAL1)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL3,'')),''),null,activity('Get Config Value').output.firstRow.VAL3),null),',Prefix Input path(VAL3) ',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL4,'')),''),null,activity('Get Config Value').output.firstRow.VAL4),null),',file type Input path(VAL4)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL7,'')),''),null,activity('Get Config Value').output.firstRow.VAL7),null),',Move Input path(VAL7)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Clear CC_BILLING_REVIEW",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_BILLING_REVIEW')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DATA_FAC"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_review_Insert_billing_no"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_INSERT_BA"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "REVIEW_INSERT_BA"
					},
					"executeDatPipeLineName": {
						"type": "String",
						"defaultValue": "CC_ReviewDataFacInsertBillingProfileProcessDat"
					},
					"inputPath": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"moveInputPath": {
						"type": "String"
					},
					"oldDataIdList": {
						"type": "Array"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactoryFindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewDataFacInsertBillingProfileProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update CC_DATA_FACTORY Success_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,2)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Move FIle Sync",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileSyncName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Move FIle Dat",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Update CC_DATA_FACTORY Success",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_MoveFile",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"inDir": {
									"value": "@pipeline().parameters.inputPath",
									"type": "Expression"
								},
								"outDir": {
									"value": "@pipeline().parameters.moveInputPath",
									"type": "Expression"
								},
								"inName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								},
								"outName": {
									"value": "@pipeline().parameters.fileDatName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "update data facEnd Process Move file sync Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Sync",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update data fac End Process Move file dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move FIle Dat",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE DATA_ID =',pipeline().parameters.dataId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "DATA_ID",
										"value": {
											"value": "@pipeline().parameters.dataId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DATA_ID",
											"type": "String"
										},
										"sink": {
											"name": "DATA_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "REGISTER_DT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "FBB_FLAG",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "POST_PAID_FLAG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"physicalType": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "COUNT_SME_MOBILE",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCLocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": {
										"value": "@pipeline().parameters.SCHEMA",
										"type": "Expression"
									},
									"Table": "CC_DATA_FACTORY_BILLING_REVIEW"
								}
							}
						]
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_REVIEW (DATA_ID,PROCESS_TYPE) VALUES (',pipeline().parameters.dataId,',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ROW_ID AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_REVIEW WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_REVIEW \n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ROW_ID = NULL \n    WHERE DATA_ID = ',pipeline().parameters.dataId,' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE to CC_BILLING_REVIEW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''S'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''Process file name : ',pipeline().parameters.fileDatName,' total count ',string(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead),' record -> count process ',string(sub(activity('Copy data to CC_TEMP_FILE_DETAIL').output.rowsRead,2)),' record.''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update CC_DATA_FACTORY Catch Loop Insert HIST_copy1",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE to CC_BILLING_REVIEW",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY\n    SET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY =''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tFILE_NAME = ''',pipeline().parameters.fileDatName,''',\n\tDESCRIPTION = ''',substring(concat('Datafactories Exception : ',replace(string(activity('MERGE to CC_BILLING_REVIEW').Error),'''','\"')),0,499),'''\n\tWHERE DATA_ID = ',pipeline().parameters.dataId)",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "MERGE to CC_BILLING_REVIEW",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_BILLING_REVIEW (ROW_ID ,\n\tCREATED ,\n\tCREATED_BY ,\n\tLAST_UPD ,\n\tLAST_UPD_BY ,\n\tACCNT_NO ,\n\tACCNT_CATEGORY ,\n\tACCNT_SUB_CATEGORY ,\n\tBILL_CYCLE ,\n\tPAYMENT_METHOD ,\n\tMASTER_ACCNT_ID ,\n\tSTATUS_CD ,\n\tBILLING_STATUS_CD ,\n\tREGISTER_DT ,\n\tFBB_FLAG ,\n\tCOUNT_SME_MOBILE,\n\tPOST_PAID_FLAG)\nSELECT ROW_ID ,\n\tCREATED ,\n\tCREATED_BY ,\n\tLAST_UPD ,\n\tLAST_UPD_BY ,\n\tACCNT_NO ,\n\tACCNT_CATEGORY ,\n\tACCNT_SUB_CATEGORY ,\n\tBILL_CYCLE ,\n\tPAYMENT_METHOD ,\n\tMASTER_ACCNT_ID ,\n\tSTATUS_CD ,\n\tBILLING_STATUS_CD ,\n\tREGISTER_DT ,\n\tFBB_FLAG ,\n\tCOUNT_SME_MOBILE ,\n\tPOST_PAID_FLAG \nFROM ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY_BILLING_REVIEW WHERE DATA_ID = ',pipeline().parameters.dataId,'  AND PROCESS_TYPE =''02'' ORDER BY DATA_BILLING_ID ASC OFFSET 0 ROWS;')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					}
				},
				"variables": {
					"haveErrorRow": {
						"type": "Boolean",
						"defaultValue": false
					},
					"fileDatNameNotExension": {
						"type": "String"
					},
					"fileDatExension": {
						"type": "String"
					},
					"fileSyncNotExension": {
						"type": "String"
					},
					"fileSyncExension": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterSplitPipe')]",
				"[concat(variables('factoryId'), '/datasets/CC_TableDynamic')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewDataFactorySendBilingNoProcesFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "insert CC_DATA_FACTORY onprocess",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set ba script Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.DATA_TYPE,''',\n\t''P'',''Process review send billing account count ',if(greaterOrEquals(sub(pipeline().parameters.count,int(variables('offset'))),float(pipeline().parameters.limitPerRound)),pipeline().parameters.limitPerRound,sub(pipeline().parameters.count,int(variables('offset')))),''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update End Process",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CC_CreateFileAndArchiveHaveDatName",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',substring(concat('CC_ReviewDataFactorySendBilingNoProcessAccountNoList Exception :',replace(activity('CC_CreateFileAndArchiveHaveDatName').Error.Message,'''','\"')),0,if(less(length(replace(activity('CC_CreateFileAndArchiveHaveDatName').Error.Message,'''','\"')),499),length(replace(activity('CC_CreateFileAndArchiveHaveDatName').Error.Message,'''','\"')),499)),''' WHERE DATA_ID =',string(first(first(activity('insert CC_DATA_FACTORY onprocess').output.resultSets).rows).DATA_ID),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update End Process Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CC_CreateFileAndArchiveHaveDatName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tFILE_NAME = ',concat('''',variables('fileName'),''''),',\n\tFILE_NAME_SYNC = ',concat('''',variables('fileNameArchive'),''''),',\n\tFILE_PATH = ''',pipeline().parameters.outputPath,''',\n\tSTATUS = ''S'',\n\tDESCRIPTION = ''',concat('Create File : ',variables('fileName'),' success'),''' WHERE DATA_ID =',string(first(first(activity('insert CC_DATA_FACTORY onprocess').output.resultSets).rows).DATA_ID),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set ba script Query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set offset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "baScriptQuery",
							"value": {
								"value": "@concat('SELECT ''02|''+ COALESCE(TEMP.BILLING_ACCNT_ID+''|''+TEMP.ACCNT_NO,TEMP.BILLING_ACCNT_ID+''|'',''|''+TEMP.ACCNT_NO) AS LINE\nFROM (SELECT B.BILLING_ACCNT_ID, B.ACCNT_NO\n  FROM ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE B \n WHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \n   AND B.CL_LEVEL = ''BA''\n   AND ISNULL(B.CREDIT_LIMIT,0) > 0\n   AND B.LAST_REVIEW_DAT IS NULL  \n   AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) >= \n\t(SELECT top 1 CAST(val1 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'') \t     \n   AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) < \n\t((SELECT top 1 CAST(val1 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'') \n\t  + \n\t(SELECT top 1 CAST(val3 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' )\n\t)\nUNION ALL\nSELECT B.BILLING_ACCNT_ID,B.ACCNT_NO\n  FROM ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE B \n WHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \n   AND B.CL_LEVEL = ''BA''\n   AND ISNULL(B.CREDIT_LIMIT,0) > 0\n   AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) >= \n\t\t((SELECT top 1 CAST(val1 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'') \n\t\t + \n\t     (SELECT top 1 CAST(val3 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' )\n\t     )\n  AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE())  <=  ( SELECT top 1 CAST(lov_val1 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CFG_LOV c WHERE LOV_TYPE = ''CC_CUSTOMER_NEW_OLD'' and lov_name = ''Existing'' and active_flg = ''Y'' )      \n  AND ((B.LAST_REVIEW_DAT is null)\n        or ( B.LAST_REVIEW_DAT < cast(DATEADD(month, -(SELECT top 1 CAST(val3 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y''), GETDATE()+1) As Date) )\n\t  ) \nUNION ALL\t  \nSELECT B.BILLING_ACCNT_ID,B.ACCNT_NO\n  FROM ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE B \n WHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \n   AND B.CL_LEVEL = ''BA''\n   AND ISNULL(B.CREDIT_LIMIT,0) > 0\n  AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE())  >= ( SELECT top 1 CAST(val5 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' ) \n  AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) < \n\t\t((SELECT top 1 CAST(val5 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg =''Y'') \n\t\t + \n\t     (SELECT top 1 CAST(val7 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' )\n\t     )   \n  AND  ((B.LAST_REVIEW_DAT is null)\n        or ( B.LAST_REVIEW_DAT < cast(DATEADD(month, (SELECT top 1 CAST(val5 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y''), B.BA_REGISTER_DT) As Date) )\n\t) \nUNION ALL\nSELECT B.BILLING_ACCNT_ID, B.ACCNT_NO\n  FROM ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE B \n WHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \n   AND B.CL_LEVEL = ''BA''\n   AND ISNULL(B.CREDIT_LIMIT,0) > 0\n   AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) >= \n\t\t((SELECT top 1 CAST(val5 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'') \n\t\t + \n\t     (SELECT top 1 CAST(val7 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' )\n\t     )\n  AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE())  >= ( SELECT top 1 CAST(val5 AS NUMERIC)  FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' ) \n  AND B.LAST_REVIEW_DAT < cast(DATEADD(month, -(SELECT top 1 CAST(val7 AS NUMERIC) FROM ',pipeline().parameters.SCHEMA,'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y''), GETDATE())+1 As Date)  \nUNION ALL  \nSELECT B.BILLING_ACCNT_ID ,B.ACCNT_NO\nFROM ',pipeline().parameters.SCHEMA,'.CC_SCORE_VALUE B \nINNER JOIN ',pipeline().parameters.SCHEMA,'.CC_CREDIT_ASSIGN C ON C.BILLING_ACCOUNT_NUM = B.ACCNT_NO AND C.REASON_SUBCODE IN(''1863'',''1864'') AND C.ACTION_DTM < CAST(GETDATE() AS DATE) \nWHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \nAND B.CL_LEVEL = ''BA'' AND ISNULL(B.CREDIT_LIMIT,0) > 0\n)TEMP\nGROUP BY TEMP.BILLING_ACCNT_ID,TEMP.ACCNT_NO\nORDER BY TEMP.ACCNT_NO OFFSET ',variables('offset'),' ROWS FETCH NEXT ',string(int(pipeline().parameters.limitPerRound)),' ROWS ONLY')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set offset",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "offset",
							"value": {
								"value": "@string(mul(sub(pipeline().parameters.round,1),int(pipeline().parameters.limitPerRound)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CC_CreateFileAndArchiveHaveDatName",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set fileName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set fileNameArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set script Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_CreateFileAndArchiveHaveDatName",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"fileName": {
									"value": "@variables('fileName')",
									"type": "Expression"
								},
								"fileNameArchive": {
									"value": "@variables('fileNameArchive')",
									"type": "Expression"
								},
								"scriptQuery": {
									"value": "@variables('scriptQuery')",
									"type": "Expression"
								},
								"outputPath": {
									"value": "@pipeline().parameters.outputPath",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set processTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "insert CC_DATA_FACTORY onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "processTime",
							"value": {
								"value": "@formatDateTime(convertTimeZone(addminutes(utcnow(),pipeline().parameters.round),'UTC','North Asia Standard Time'),'yyyyMMdd_HHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileNameArchive",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.sync')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.',pipeline().parameters.fileTypeOutputFile)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set script Query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "scriptQuery",
							"value": {
								"value": "@concat('SELECT\n\t''01|'' + ''',variables('processTime'),''' AS LINE  \n    UNION ALL \n    SELECT T.LINE FROM (',variables('baScriptQuery'),') T\n    UNION ALL \n    SELECT ''09|'' + CONVERT(varchar(255),COUNT(T2.LINE)) AS LINE FROM (',variables('baScriptQuery'),') T2; ')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"count": {
						"type": "float"
					},
					"round": {
						"type": "int"
					},
					"limitPerRound": {
						"type": "string"
					}
				},
				"variables": {
					"offset": {
						"type": "String"
					},
					"scriptQuery": {
						"type": "String"
					},
					"baScriptQuery": {
						"type": "String"
					},
					"processTime": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_CreateFileAndArchiveHaveDatName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewDataFactorySendBilingNoProcessLoop')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.listRound",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "CC_ReviewDataFactorySendBilingNoProcessAccountNoList",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewDataFactorySendBilingNoProcesFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@pipeline().parameters.prefixOutputFile",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@pipeline().parameters.fileTypeOutputFile",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@pipeline().parameters.DATA_TYPE",
												"type": "Expression"
											},
											"count": {
												"value": "@pipeline().parameters.count",
												"type": "Expression"
											},
											"round": {
												"value": "@item()",
												"type": "Expression"
											},
											"limitPerRound": {
												"value": "@pipeline().parameters.limitPerRound",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"count": {
						"type": "float"
					},
					"limitPerRound": {
						"type": "string"
					},
					"listRound": {
						"type": "array"
					}
				},
				"variables": {
					"offset": {
						"type": "String"
					},
					"scriptQuery": {
						"type": "String"
					},
					"baScriptQuery": {
						"type": "String"
					},
					"processTime": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewDataFactorySendBilingNoProcesFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewDataFatorySendBilingNo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL2,VAL5,VAL6 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config value').output),'firstRow')),or(or(equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL2,'')),''),null,activity('Get Config value').output.firstRow.VAL2),null),equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL5,'')),''),null,activity('Get Config value').output.firstRow.VAL5),null)),equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL6,'')),''),null,activity('Get Config value').output.firstRow.VAL6),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set outputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "outputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.VAL2",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixOutputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set outputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixOutputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.VAL5",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeOutputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixOutputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeOutputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.VAL6",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute CC_ReviewSendBilingNo",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set fileTypeOutputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactorySendFileProcessCount",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@variables('outputPath')",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@variables('prefixOutputFile')",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@variables('fileTypeOutputFile')",
												"type": "Expression"
											},
											"ScriptCount": {
												"value": "@concat('SELECT COUNT(T.LINE) AS COUNT FROM (SELECT ''02|''+COALESCE(TEMP.BILLING_ACCNT_ID+''|''+TEMP.ACCNT_NO,TEMP.BILLING_ACCNT_ID+''|'',''|''+TEMP.ACCNT_NO) AS LINE\nFROM (SELECT B.BILLING_ACCNT_ID, B.ACCNT_NO\n  FROM ',variables('SCHEMA'),'.CC_SCORE_VALUE B \n WHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \n   AND B.CL_LEVEL = ''BA''\n   AND ISNULL(B.CREDIT_LIMIT,0) > 0\n   AND B.LAST_REVIEW_DAT IS NULL  \n   AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) >= \n\t(SELECT top 1 CAST(val1 AS NUMERIC)  FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'') \t     \n   AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) < \n\t((SELECT top 1 CAST(val1 AS NUMERIC)  FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'') \n\t  + \n\t(SELECT top 1 CAST(val3 AS NUMERIC) FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' )\n\t)\nUNION ALL\nSELECT B.BILLING_ACCNT_ID,B.ACCNT_NO\n  FROM ',variables('SCHEMA'),'.CC_SCORE_VALUE B \n WHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \n   AND B.CL_LEVEL = ''BA''\n   AND ISNULL(B.CREDIT_LIMIT,0) > 0\n   AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) >= \n\t\t((SELECT top 1 CAST(val1 AS NUMERIC)  FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'') \n\t\t + \n\t     (SELECT top 1 CAST(val3 AS NUMERIC) FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' )\n\t     )\n  AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE())  <=  ( SELECT top 1 CAST(lov_val1 AS NUMERIC) FROM ',variables('SCHEMA'),'.CC_CFG_LOV c WHERE LOV_TYPE = ''CC_CUSTOMER_NEW_OLD'' and lov_name = ''Existing'' and active_flg = ''Y'' )      \n  AND ((B.LAST_REVIEW_DAT is null)\n        or ( B.LAST_REVIEW_DAT < cast(DATEADD(month, -(SELECT top 1 CAST(val3 AS NUMERIC) FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y''), GETDATE()+1) As Date) )\n\t  ) \nUNION ALL\t  \nSELECT B.BILLING_ACCNT_ID,B.ACCNT_NO\n  FROM ',variables('SCHEMA'),'.CC_SCORE_VALUE B \n WHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \n   AND B.CL_LEVEL = ''BA''\n   AND ISNULL(B.CREDIT_LIMIT,0) > 0\n  AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE())  >= ( SELECT top 1 CAST(val5 AS NUMERIC)  FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' ) \n  AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) < \n\t\t((SELECT top 1 CAST(val5 AS NUMERIC)  FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg =''Y'') \n\t\t + \n\t     (SELECT top 1 CAST(val7 AS NUMERIC) FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' )\n\t     )   \n  AND  ((B.LAST_REVIEW_DAT is null)\n        or ( B.LAST_REVIEW_DAT < cast(DATEADD(month, (SELECT top 1 CAST(val5 AS NUMERIC) FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y''), B.BA_REGISTER_DT) As Date) )\n\t) \nUNION ALL\nSELECT B.BILLING_ACCNT_ID, B.ACCNT_NO\n  FROM ',variables('SCHEMA'),'.CC_SCORE_VALUE B \n WHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \n   AND B.CL_LEVEL = ''BA''\n   AND ISNULL(B.CREDIT_LIMIT,0) > 0\n   AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE()) >= \n\t\t((SELECT top 1 CAST(val5 AS NUMERIC)  FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'') \n\t\t + \n\t     (SELECT top 1 CAST(val7 AS NUMERIC) FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' )\n\t     )\n  AND DATEDIFF(month,B.BA_REGISTER_DT,GETDATE())  >= ( SELECT top 1 CAST(val5 AS NUMERIC)  FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y'' ) \n  AND B.LAST_REVIEW_DAT < cast(DATEADD(month, -(SELECT top 1 CAST(val7 AS NUMERIC) FROM ',variables('SCHEMA'),'.CC_CURRENT c WHERE LOV_TYPE = ''CC_REVIEW_CREDIT_LIMIT'' and active_flg = ''Y''), GETDATE())+1 As Date)  \nUNION ALL  \nSELECT B.BILLING_ACCNT_ID ,B.ACCNT_NO\nFROM ',variables('SCHEMA'),'.CC_SCORE_VALUE B \nINNER JOIN ',variables('SCHEMA'),'.CC_CREDIT_ASSIGN C ON C.BILLING_ACCOUNT_NUM = B.ACCNT_NO AND C.REASON_SUBCODE IN(''1863'',''1864'') AND C.ACTION_DTM < CAST(GETDATE() AS DATE) \nWHERE B.CL_TYPE IN (''System Review'', ''Permanent'') \nAND B.CL_LEVEL = ''BA'' AND ISNULL(B.CREDIT_LIMIT,0) > 0\n)TEMP\nGROUP BY TEMP.BILLING_ACCNT_ID,TEMP.ACCNT_NO) T;')",
												"type": "Expression"
											},
											"messageWhenCountZero": "Query Billing account no for send billing account no to sff data not found",
											"pipeLineProcessFileName": {
												"value": "@variables('pipeLineProcessFileName')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_UAT"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_review_send_billing_no"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_SEND_BA"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "REVIEW_SEND_BA"
					},
					"outputPath": {
						"type": "String"
					},
					"prefixOutputFile": {
						"type": "String"
					},
					"fileTypeOutputFile": {
						"type": "String"
					},
					"pipeLineProcessFileName": {
						"type": "String",
						"defaultValue": "CC_ReviewDataFactorySendBilingNoProcesFile"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactorySendFileProcessCount')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewFileOutputValidate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach file error",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.fileErrorList",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute CC_ReviewFileOutputValidateChildren",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewFileOutputValidateChildren",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"fileName": {
												"value": "@item().FILE_NAME",
												"type": "Expression"
											},
											"fileId": {
												"value": "@item().FILE_ID",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@item().OUTPUT_PATH",
												"type": "Expression"
											},
											"fileType": {
												"value": "@item().FILE_TYPE",
												"type": "Expression"
											},
											"fileNameArchive": {
												"value": "@item().FILE_NAME_ARCHIVE",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileErrorList": {
						"type": "array"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					}
				},
				"variables": {
					"resId": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileId": {
						"type": "String"
					},
					"outputPath": {
						"type": "String"
					},
					"errorMessage": {
						"type": "String"
					},
					"fileType": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"switchCaseValue": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewFileOutputValidateChildren')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewFileOutputValidateChildren')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set fileId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileId",
							"value": {
								"value": "@string(if(equals(trim(coalesce(string(pipeline().parameters.fileId),'')),''),null,string(pipeline().parameters.fileId)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Some val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set fileOutputpath",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(or(or(equals(variables('fileId'),string(null)),equals(variables('fileName'),string(null))),equals(variables('outputPath'),string(null))),equals(variables('fileType'),string(null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute CreateFileOutPut",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewCreateFileOutput",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"fileType": {
												"value": "@variables('fileType')",
												"type": "Expression"
											},
											"fileName": {
												"value": "@variables('fileName')",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@variables('outputPath')",
												"type": "Expression"
											},
											"fileId": {
												"value": "@variables('fileId')",
												"type": "Expression"
											},
											"fileNameArchive": {
												"value": "@variables('fileNameArchive')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set errorMsg",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_RESPONSE_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tRES_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.RES_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''RESPONSE_FILE'',\n\t''E'',''Temp file Val ',if(startswith(\n\tvariables('errorMessage'),','),substring(\n\tvariables('errorMessage'),1,sub(length(\n\tvariables('errorMessage')),1)),\n\tvariables('errorMessage')),' data not found.'');')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "Set errorMsg",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "errorMessage",
										"value": {
											"value": "@concat(if(equals(variables('fileId'),string(null)),',file id',''),if(equals(variables('fileName'),string(null)),',file name',''),if(equals(variables('outputPath'),string(null)),',output path',''),if(equals(variables('fileType'),string(null)),',file type',''))",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set fileOutputpath",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "outputPath",
							"value": {
								"value": "@string(if(equals(trim(coalesce(pipeline().parameters.outputPath,'')),''),null,pipeline().parameters.outputPath))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileType",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@string(if(equals(trim(coalesce(pipeline().parameters.fileName,'')),''),null,pipeline().parameters.fileName))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileType",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileAchriveName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileType",
							"value": {
								"value": "@string(if(equals(trim(coalesce(pipeline().parameters.fileType,'')),''),null,pipeline().parameters.fileType))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileAchriveName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@string(if(equals(trim(coalesce(pipeline().parameters.fileNameArchive,'')),''),null,pipeline().parameters.fileNameArchive))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"CREDIT_USER": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"fileId": {
						"type": "string"
					},
					"outputPath": {
						"type": "string"
					},
					"fileType": {
						"type": "string"
					},
					"fileNameArchive": {
						"type": "string"
					}
				},
				"variables": {
					"resId": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileId": {
						"type": "String"
					},
					"outputPath": {
						"type": "String"
					},
					"errorMessage": {
						"type": "String"
					},
					"fileType": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"switchCaseValue": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewCreateFileOutput')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewFindFileSyncInDir')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get All FIle in Config directory",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterPath",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems",
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If not Have file input",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Filter file Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(empty(activity('Filter file Sync').output.Value),not(activity('Get All FIle in Config directory').output.exists))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute ProcessFileSync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewProcessFileSync",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@pipeline().parameters.LOV_TYPE_REVIEW",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@pipeline().parameters.FILE_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"fileNameList": {
												"value": "@activity('Filter file Sync').output.Value",
												"type": "Expression"
											},
											"FILE_UPDATE_TYPE": {
												"value": "@pipeline().parameters.FILE_UPDATE_TYPE",
												"type": "Expression"
											},
											"processDatName": {
												"value": "@pipeline().parameters.processDatName",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert review process file sync not have input file",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.REVIEW_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.LOV_TYPE_REVIEW,''',\n\t''S'',''File prefix : ',pipeline().parameters.prefixInputFile,' data not found in path ',pipeline().parameters.inputPath,''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Filter file Sync",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get All FIle in Config directory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get All FIle in Config directory').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@and(startswith(item().name,pipeline().parameters.prefixInputFile),endswith(item().name,pipeline().parameters.fileTypeInputFile))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"prefixInputFile": {
						"type": "string"
					},
					"fileTypeInputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"LOV_TYPE_REVIEW": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					},
					"processDatName": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterPath')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewProcessFileSync')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewProcessFileSync')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For Each file Sync",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.fileNameList",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "Execute CC_ReviewProcessFileSyncChildren",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewProcessFileSyncChildren",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@pipeline().parameters.LOV_TYPE_REVIEW",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@pipeline().parameters.FILE_TYPE",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"FILE_UPDATE_TYPE": {
												"value": "@pipeline().parameters.FILE_UPDATE_TYPE",
												"type": "Expression"
											},
											"fileInputName": {
												"value": "@item().name",
												"type": "Expression"
											},
											"processDatName": {
												"value": "@pipeline().parameters.processDatName",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"LOV_TYPE_REVIEW": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileNameList": {
						"type": "array"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					},
					"processDatName": {
						"type": "string"
					}
				},
				"variables": {
					"fileDatName": {
						"type": "String"
					},
					"fileDatSize": {
						"type": "String"
					},
					"reviewId": {
						"type": "String"
					},
					"fileinputName": {
						"type": "String"
					},
					"exceptionError": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewProcessFileSyncChildren')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewProcessFileSyncChildren')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Read File Sync",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set reviewId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileinputName')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Get File size Dat",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Setfor file Dat Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileDatName')",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"size",
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Setfor file Dat Name",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set For Each File Dat Sizer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatName",
							"value": {
								"value": "@split(activity('Read File Sync').output.firstRow.Prop_0,'|')[0]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set For Each File Dat Sizer",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Read File Sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatSize",
							"value": {
								"value": "@trim(split(activity('Read FIle Sync').output.firstRow.Prop_0,'|')[1])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "insert review process file sync",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set fileInputName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.REVIEW_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.LOV_TYPE_REVIEW,''',\n\t''P'',''Process :',variables('fileinputName'),''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set reviewId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "insert review process file sync",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "reviewId",
							"value": {
								"value": "@string(first(first(activity('insert review process file sync').output.resultSets).rows).REVIEW_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileInputName",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileinputName",
							"value": {
								"value": "@pipeline().parameters.fileInputName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Switch case error or process Dat",
						"type": "Switch",
						"dependsOn": [
							{
								"activity": "Get File size Dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@if(not(and(activity('Get File size Dat').output.exists,equals(variables('fileDatSize'), string(string(if(contains(activity('Get File size Dat').output,'size'),activity('Get File size Dat').output?.size,0)))))),'file size/name not map',pipeline().parameters.processDatName)",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "file size/name not map",
									"activities": [
										{
											"name": "update file dat data not mapping",
											"type": "Script",
											"dependsOn": [],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''file name data not found/file size no mapping file result ',variables('fileinputName'),'''',\n\t' WHERE REVIEW_ID =',variables('reviewId'),';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "CC_ReviewUpdateArpuProcessDat",
									"activities": [
										{
											"name": "Execute ProcessFileDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_ReviewUpdateArpuProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"FILE_TYPE": {
														"value": "@pipeline().parameters.FILE_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													},
													"reviewId": {
														"value": "@variables('reviewId')",
														"type": "Expression"
													},
													"FILE_UPDATE_TYPE": {
														"value": "@pipeline().parameters.FILE_UPDATE_TYPE",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "update review End Process Error",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Execute ProcessFileDat",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t'    DESCRIPTION ''',substring(concat('Datafac Exception ',replace(string(activity('Execute ProcessFileDat')),'''','''''')),0,499),'''',\n\t' WHERE REVIEW_ID =''',variables('reviewId'),''';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								},
								{
									"value": "CC_ReviewUpdateCreditgradeProcessDat",
									"activities": [
										{
											"name": "Execute CC_ReviewUpdateCreditgradeProcessDat",
											"type": "ExecutePipeline",
											"dependsOn": [],
											"userProperties": [],
											"typeProperties": {
												"pipeline": {
													"referenceName": "CC_ReviewUpdateCreditgradeProcessDat",
													"type": "PipelineReference"
												},
												"waitOnCompletion": true,
												"parameters": {
													"fileDatName": {
														"value": "@variables('fileDatName')",
														"type": "Expression"
													},
													"SCHEMA": {
														"value": "@pipeline().parameters.SCHEMA",
														"type": "Expression"
													},
													"FILE_TYPE": {
														"value": "@pipeline().parameters.FILE_TYPE",
														"type": "Expression"
													},
													"CREDIT_USER": {
														"value": "@pipeline().parameters.CREDIT_USER",
														"type": "Expression"
													},
													"inputPath": {
														"value": "@pipeline().parameters.inputPath",
														"type": "Expression"
													},
													"moveInputPath": {
														"value": "@pipeline().parameters.moveInputPath",
														"type": "Expression"
													},
													"fileSyncName": {
														"value": "@variables('fileinputName')",
														"type": "Expression"
													},
													"reviewId": {
														"value": "@variables('reviewId')",
														"type": "Expression"
													},
													"FILE_UPDATE_TYPE": {
														"value": "@pipeline().parameters.FILE_UPDATE_TYPE",
														"type": "Expression"
													}
												}
											}
										},
										{
											"name": "update review End Process Error_copy1",
											"type": "Script",
											"dependsOn": [
												{
													"activity": "Execute CC_ReviewUpdateCreditgradeProcessDat",
													"dependencyConditions": [
														"Failed"
													]
												}
											],
											"policy": {
												"timeout": "7.00:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"linkedServiceName": {
												"referenceName": "AzureSqlDatabase1",
												"type": "LinkedServiceReference"
											},
											"typeProperties": {
												"scripts": [
													{
														"type": "Query",
														"text": {
															"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t'    DESCRIPTION ''',substring(concat('Datafac Exception ',replace(string(activity('Execute CC_ReviewUpdateCreditgradeProcessDat').Error),'''','''''')),0,499),'''',\n\t' WHERE REVIEW_ID =''',variables('reviewId'),''';')",
															"type": "Expression"
														}
													}
												]
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"inputPath": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"LOV_TYPE_REVIEW": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					},
					"fileInputName": {
						"type": "string"
					},
					"processDatName": {
						"type": "string"
					}
				},
				"variables": {
					"fileDatName": {
						"type": "String"
					},
					"fileDatSize": {
						"type": "String"
					},
					"reviewId": {
						"type": "String"
					},
					"fileinputName": {
						"type": "String"
					},
					"exceptionError": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewUpdateArpuProcessDat')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewUpdateCreditgradeProcessDat')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewTempFileResponseFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "get file Error Temp file",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT FILE_ID,FILE_TYPE,FILE_NAME,FILE_NAME_ARCHIVE,OUTPUT_PATH FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \nWHERE FILE_TYPE  LIKE ''RESPONSE_FILE%''\nORDER BY CREATED;')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "If not Have file input",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "get file Error Temp file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(activity('get file Error Temp file').output.value)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Execute Create file error",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewFileOutputValidate",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"fileErrorList": {
												"value": "@activity('get file Error Temp file').output.value",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert response file not have input file",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_RESPONSE_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tRES_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.RES_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''RESPONSE_FILE'',\n\t''S'',''Query response file data not found'');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_UAT"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "CREDIT"
					},
					"errorException": {
						"type": "String"
					},
					"RESPONST_TYPE": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewFileOutputValidate')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewUpdateArpu')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value in Clound Storage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1,VAL3,VAL4,NULLIF(VAL7,'''') AS VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('lovType'),''' AND c.LOV_NAME = ''',variables('lovName'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Clear Data Temp Table Detail",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE_ARPU \n    WHERE FILE_ID IN(SELECT FILE_ID \n                        FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n                        WHERE STATUS = ''S'' \n                        AND FILE_TYPE = ''',variables('FILE_TYPE'),''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear Data Temp Table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n            WHERE STATUS = ''S'' \n            AND FILE_TYPE = ''',variables('FILE_TYPE'),'''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value in Clound Storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),or(or(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')))),empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')))))\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@if(empty(activity('Get Config Value in Clound Storage').output.firstRow.val7),'',activity('Get Config Value in Clound Storage').output.firstRow.val7)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute All Process",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@variables('FILE_TYPE')",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@variables('REVIEW_TYPE')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"FILE_UPDATE_TYPE": {
												"value": "@variables('FILE_UPDATE_TYPE')",
												"type": "Expression"
											},
											"processDatName": {
												"value": "@variables('processDatName')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('REVIEW_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),concat('Config LOV_TYPE : ',variables('lovType'),' ,LOV_NAME : ',variables('lovName'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),',Input path(val1)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,''))),',Prefix Input file(val3)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,''))),',file type Input file(val4)',''))\n\t,','),substring(\n\tconcat(if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),',Input path(val1)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,''))),',Prefix Input file(val3)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,''))),',file type Input file(val4)',''))\n\t,1,sub(length(\n\tconcat(if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),',Input path(val1)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,''))),',Prefix Input file(val3)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,''))),',file type Input file(val4)',''))\n\t),1)),\n\tconcat(if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),',Input path(val1)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,''))),',Prefix Input file(val3)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,''))),',file type Input file(val4)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_ARPU"
					},
					"FILE_TYPE": {
						"type": "String",
						"defaultValue": "REQUEST_FILE_ARPU"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DEV"
					},
					"moveInputPath": {
						"type": "String"
					},
					"configErrorMsg": {
						"type": "String"
					},
					"lovType": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"lovName": {
						"type": "String",
						"defaultValue": "sff_cc_arpu"
					},
					"REVIEW_TYPE": {
						"type": "String",
						"defaultValue": "sff_cc_arpu_data_fac"
					},
					"FILE_UPDATE_TYPE": {
						"type": "String",
						"defaultValue": "arpu"
					},
					"processDatName": {
						"type": "String",
						"defaultValue": "CC_ReviewUpdateArpuProcessDat"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewFindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewUpdateArpuProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "FILE_ID",
										"value": {
											"value": "@variables('tempFileDatId')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 2000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FILE_ID",
											"type": "String"
										},
										"sink": {
											"name": "FILE_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "BILLING_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "ARPU",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "ARPU_DT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "REMARK",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false,
									"dateTimeFormat": "yyyyMMdd"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCLocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "CREDIT_DEV",
									"Table": "CC_TEMP_FILE_ARPU"
								}
							}
						]
					},
					{
						"name": "Insert CC_TEMP_FILE_DAT",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set fileNameArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tFILE_TYPE,\n\tFILE_NAME,\n\tFILE_NAME_ARCHIVE,\n\tFILE_PROCESS_TIME,\n\tSTATUS) OUTPUT INSERTED.FILE_ID  \n\tVALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.FILE_TYPE,''',\n\t''',pipeline().parameters.fileDatName,''',\n\t''',variables('fileNameArchive'),''',\n\t''',variables('fileProcessTime'),''',\n\t''O'');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set temp file dat Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Insert CC_TEMP_FILE_DAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "tempFileDatId",
							"value": {
								"value": "@string(first(first(activity('Insert CC_TEMP_FILE_DAT').output.resultSets).rows).FILE_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Move Data Dat Succes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE\n\t',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''S''',\n\t', DESCRIPTION = ''Insert data on file update ',pipeline().parameters.FILE_UPDATE_TYPE,' complete''',\n\t' WHERE FILE_ID =',variables('tempFileDatId'),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Move Data Dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE\n\t',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E''',\n\t''', DESCRIPTION = ''', substring(concat('Datafac Exception ',replace(string(activity('Copy data to CC_TEMP_FILE_DETAIL')),'''','''''')),0,499),'''',\n\t' WHERE FILE_ID =',variables('tempFileDatId'),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set fileProcessTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "update file dat onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileProcessTime",
							"value": {
								"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','North Asia Standard Time'),'yyyyMMddHHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileNameArchive",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileProcessTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@concat(variables('fileDatNameNotExension'),'_',variables('fileProcessTime'),'.',variables('fileDatExension'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "update file dat onprocess",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set description on process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''P'',',\n\t' DESCRIPTION = ''',variables('descriptionOnprocess'),'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Lookup FIle Dat",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set fileDatExension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "update review End Process Success",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move Data Dat Succes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''S''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update review End Process Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move Data Dat Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''', substring(concat('Datafac Exception ',replace(string(activity('Copy data to CC_TEMP_FILE_DETAIL')),'''','''''')),0,499),'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set fileDatNameNotExtension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileSyncExension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatNameNotExension",
							"value": {
								"value": "@if(greater(length(split(pipeline().parameters.fileDatName,'.')),2),join(take(split(pipeline().parameters.fileDatName,'.'),sub(length(split(pipeline().parameters.fileDatName,'.')),1)),'.'),split(pipeline().parameters.fileDatName,'.')[0])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileDatExension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileDatNameNotExtension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatExension",
							"value": {
								"value": "@split(pipeline().parameters.fileDatName,'.')[sub(length(split(pipeline().parameters.fileDatName,'.')),1)]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileSyncNameNotExtension",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileSyncNotExension",
							"value": {
								"value": "@if(greater(length(split(pipeline().parameters.fileSyncName,'.')),2),join(take(split(pipeline().parameters.fileSyncName,'.'),sub(length(split(pipeline().parameters.fileSyncName,'.')),1)),'.'),split(pipeline().parameters.fileSyncName,'.')[0])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileSyncExension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileSyncNameNotExtension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileSyncExension",
							"value": {
								"value": "@split(pipeline().parameters.fileSyncName,'.')[sub(length(split(pipeline().parameters.fileSyncName,'.')),1)]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set description on process",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup FIle Dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "descriptionOnprocess",
							"value": {
								"value": "@concat('Process file name : ',pipeline().parameters.fileDatName,' total count ',string(length(activity('Lookup FIle Dat').output.value)),' record -> count process ',if(equals(pipeline().parameters.CREDIT_USER,'DATA_FAC_UPDATE_PAYMENT'),string(length(activity('Lookup FIle Dat').output.value)),string(sub(length(activity('Lookup FIle Dat').output.value),2))),' record.')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Move Path is Empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Move Data Dat Succes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(pipeline().parameters.moveInputPath)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Move FIle Sync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inDir": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"outDir": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"inName": {
												"value": "@pipeline().parameters.fileSyncName",
												"type": "Expression"
											},
											"outName": {
												"value": "@concat(variables('fileSyncNotExension'),'_',variables('fileProcessTime'),'.',variables('fileSyncExension'))",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Move FIle Dat",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inDir": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"outDir": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"inName": {
												"value": "@pipeline().parameters.fileDatName",
												"type": "Expression"
											},
											"outName": {
												"value": "@variables('fileNameArchive')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "update review End Process Move file sync Error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Move FIle Sync",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "update review End Process Move file dat Error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Move FIle Dat",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_ARPU (FILE_ID,PROCESS_TYPE) VALUES (',variables('tempFileDatId'),',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set temp file dat Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ACCNT_NO AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_ARPU WHERE FILE_ID = ',variables('tempFileDatId'),' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_ARPU \n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ACCNT_NO = NULL \n    WHERE FILE_ID = ',variables('tempFileDatId'),' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileDatName": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					},
					"reviewId": {
						"type": "string"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessTime": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"tempFileDatId": {
						"type": "String"
					},
					"fileDatNameNotExension": {
						"type": "String"
					},
					"fileDatExension": {
						"type": "String"
					},
					"fileSyncNotExension": {
						"type": "String"
					},
					"fileSyncExension": {
						"type": "String"
					},
					"descriptionOnprocess": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterSplitPipe')]",
				"[concat(variables('factoryId'), '/datasets/CC_TableDynamic')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewUpdateCreditgrade')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value in Clound Storage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1, VAL3, VAL4, NULLIF(VAL7,'''') AS VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('lovType'),''' AND c.LOV_NAME = ''',variables('lovName'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Clear Data Temp Table Detail",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE_CREDIT_GRADE \n    WHERE FILE_ID IN(SELECT FILE_ID \n                        FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n                        WHERE STATUS = ''S'' \n                        AND FILE_TYPE = ''',variables('FILE_TYPE'),''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear Data Temp Table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n            WHERE STATUS = ''S'' \n            AND FILE_TYPE = ''',variables('FILE_TYPE'),'''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value in Clound Storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),or(or(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')))),empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')))))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@if(empty(activity('Get Config Value in Clound Storage').output.firstRow.val7),'',activity('Get Config Value in Clound Storage').output.firstRow.val7)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute All Process",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@variables('FILE_TYPE')",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@variables('REVIEW_TYPE')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"FILE_UPDATE_TYPE": {
												"value": "@variables('FILE_UPDATE_TYPE')",
												"type": "Expression"
											},
											"processDatName": {
												"value": "@variables('processDatName')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('REVIEW_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),concat('Config LOV_TYPE : ',variables('lovType'),' ,LOV_NAME : ',variables('lovName'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),',Input path(val1)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,''))),',Prefix Input file(val3)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,''))),',file type Input file(val4)',''))\n\t,','),substring(\n\tconcat(if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),',Input path(val1)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,''))),',Prefix Input file(val3)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,''))),',file type Input file(val4)',''))\n\t,1,sub(length(\n\tconcat(if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),',Input path(val1)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,''))),',Prefix Input file(val3)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,''))),',file type Input file(val4)',''))\n\t),1)),\n\tconcat(if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),',Input path(val1)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,''))),',Prefix Input file(val3)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,''))),',file type Input file(val4)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_CREDIT_GRADE"
					},
					"FILE_TYPE": {
						"type": "String",
						"defaultValue": "REQUEST_FILE_CREDIT_GRADE"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_DEV"
					},
					"moveInputPath": {
						"type": "String"
					},
					"configErrorMsg": {
						"type": "String"
					},
					"lovType": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"lovName": {
						"type": "String",
						"defaultValue": "sff_cc_credit_grade"
					},
					"REVIEW_TYPE": {
						"type": "String",
						"defaultValue": "sff_cc_credit_grade_data_fac"
					},
					"FILE_UPDATE_TYPE": {
						"type": "String",
						"defaultValue": "credit grade"
					},
					"processDatName": {
						"type": "String",
						"defaultValue": "CC_ReviewUpdateCreditgradeProcessDat"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewFindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewUpdateCreditgradeProcessDat')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data to CC_TEMP_FILE_DETAIL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "insert 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "FILE_ID",
										"value": {
											"value": "@variables('tempFileDatId')",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 2000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "FILE_ID",
											"type": "String"
										},
										"sink": {
											"name": "FILE_ID",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "PROCESS_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "BILLING_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREDIT_GRADE",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false,
									"dateTimeFormat": "yyyyMMdd"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCLocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "CREDIT_DEV",
									"Table": "CC_TEMP_FILE_CREDIT_GRADE"
								}
							}
						]
					},
					{
						"name": "Insert CC_TEMP_FILE_DAT",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set fileNameArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tFILE_TYPE,\n\tFILE_NAME,\n\tFILE_NAME_ARCHIVE,\n\tFILE_PROCESS_TIME,\n\tSTATUS) OUTPUT INSERTED.FILE_ID  \n\tVALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.FILE_TYPE,''',\n\t''',pipeline().parameters.fileDatName,''',\n\t''',variables('fileNameArchive'),''',\n\t''',variables('fileProcessTime'),''',\n\t''O'');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set temp file dat Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Insert CC_TEMP_FILE_DAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "tempFileDatId",
							"value": {
								"value": "@string(first(first(activity('Insert CC_TEMP_FILE_DAT').output.resultSets).rows).FILE_ID)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Move Data Dat Succes",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Update 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE\n\t',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''S''',\n\t', DESCRIPTION = ''Insert data on file update ',pipeline().parameters.FILE_UPDATE_TYPE,' complete''',\n\t' WHERE FILE_ID =',variables('tempFileDatId'),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Move Data Dat Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE\n\t',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E''',\n\t''', DESCRIPTION = ''', substring(concat('Datafac Exception ',replace(string(activity('Copy data to CC_TEMP_FILE_DETAIL')),'''','''''')),0,499),'''',\n\t' WHERE FILE_ID =',variables('tempFileDatId'),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set fileProcessTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "update file dat onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileProcessTime",
							"value": {
								"value": "@formatDateTime(convertTimeZone(utcnow(),'UTC','North Asia Standard Time'),'yyyyMMddHHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileNameArchive",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileProcessTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@concat(variables('fileDatNameNotExension'),'_',variables('fileProcessTime'),'.',variables('fileDatExension'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "update file dat onprocess",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set description on process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''P'',',\n\t' DESCRIPTION = ''',variables('descriptionOnprocess'),'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Lookup FIle Dat",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set fileDatExension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "update review End Process Success",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move Data Dat Succes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''S''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "update review End Process Error",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Move Data Dat Error",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''', substring(concat('Datafac Exception ',replace(string(activity('Copy data to CC_TEMP_FILE_DETAIL')),'''','''''')),0,499),'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set fileDatNameNotExtension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileSyncExension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatNameNotExension",
							"value": {
								"value": "@if(greater(length(split(pipeline().parameters.fileDatName,'.')),2),join(take(split(pipeline().parameters.fileDatName,'.'),sub(length(split(pipeline().parameters.fileDatName,'.')),1)),'.'),split(pipeline().parameters.fileDatName,'.')[0])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileDatExension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileDatNameNotExtension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileDatExension",
							"value": {
								"value": "@split(pipeline().parameters.fileDatName,'.')[sub(length(split(pipeline().parameters.fileDatName,'.')),1)]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileSyncNameNotExtension",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileSyncNotExension",
							"value": {
								"value": "@if(greater(length(split(pipeline().parameters.fileSyncName,'.')),2),join(take(split(pipeline().parameters.fileSyncName,'.'),sub(length(split(pipeline().parameters.fileSyncName,'.')),1)),'.'),split(pipeline().parameters.fileSyncName,'.')[0])",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileSyncExension",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set fileSyncNameNotExtension",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileSyncExension",
							"value": {
								"value": "@split(pipeline().parameters.fileSyncName,'.')[sub(length(split(pipeline().parameters.fileSyncName,'.')),1)]",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set description on process",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup FIle Dat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "descriptionOnprocess",
							"value": {
								"value": "@concat('Process file name : ',pipeline().parameters.fileDatName,' total count ',string(length(activity('Lookup FIle Dat').output.value)),' record -> count process ',if(equals(pipeline().parameters.CREDIT_USER,'DATA_FAC_UPDATE_PAYMENT'),string(length(activity('Lookup FIle Dat').output.value)),string(sub(length(activity('Lookup FIle Dat').output.value),2))),' record.')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Move Path is Empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Move Data Dat Succes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@empty(pipeline().parameters.moveInputPath)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Move FIle Sync",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inDir": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"outDir": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"inName": {
												"value": "@pipeline().parameters.fileSyncName",
												"type": "Expression"
											},
											"outName": {
												"value": "@concat(variables('fileSyncNotExension'),'_',variables('fileProcessTime'),'.',variables('fileSyncExension'))",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Move FIle Dat",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_MoveFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inDir": {
												"value": "@pipeline().parameters.inputPath",
												"type": "Expression"
											},
											"outDir": {
												"value": "@pipeline().parameters.moveInputPath",
												"type": "Expression"
											},
											"inName": {
												"value": "@pipeline().parameters.fileDatName",
												"type": "Expression"
											},
											"outName": {
												"value": "@variables('fileNameArchive')",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "update review End Process Move file sync Error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Move FIle Sync",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
													"type": "Expression"
												}
											}
										]
									}
								},
								{
									"name": "update review End Process Move file dat Error",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Move FIle Dat",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_REVIEW \n\tSET LAST_UPD = CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),''')\n\t, LAST_UPD_BY = ''',\n\tpipeline().parameters.CREDIT_USER,\n\t''', STATUS = ''E'',',\n\t' DESCRIPTION = ''Unable to move the file name : ',pipeline().parameters.fileSyncName,'''',\n\t' WHERE REVIEW_ID =',pipeline().parameters.reviewId,';')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "insert 01",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Read 01",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_CREDIT_GRADE (FILE_ID,PROCESS_TYPE) VALUES (',variables('tempFileDatId'),',''',activity('Read 01').output.firstRow.Prop_0,''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Read 01",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set temp file dat Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "CCLocalFileMasterNotSplit",
								"type": "DatasetReference",
								"parameters": {
									"filePath": {
										"value": "@pipeline().parameters.inputPath",
										"type": "Expression"
									},
									"fileName": {
										"value": "@pipeline().parameters.fileDatName",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "SELECT old 09",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Copy data to CC_TEMP_FILE_DETAIL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT ACCNT_NO AS OLD_COUNT FROM ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_CREDIT_GRADE WHERE FILE_ID = ',variables('tempFileDatId'),' AND PROCESS_TYPE = ''09''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Update 09",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SELECT old 09",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_TEMP_FILE_CREDIT_GRADE\n    SET PROCESS_TYPE = ''09|',activity('SELECT old 09').output.firstrow.OLD_COUNT,'''\n    ,ACCNT_NO = NULL \n    WHERE FILE_ID = ',variables('tempFileDatId'),' AND PROCESS_TYPE = ''09''')",
										"type": "Expression"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"fileDatName": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"FILE_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"inputPath": {
						"type": "string"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					},
					"reviewId": {
						"type": "string"
					},
					"FILE_UPDATE_TYPE": {
						"type": "string"
					}
				},
				"variables": {
					"fileProcessTime": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					},
					"tempFileDatId": {
						"type": "String"
					},
					"fileDatNameNotExension": {
						"type": "String"
					},
					"fileDatExension": {
						"type": "String"
					},
					"fileSyncNotExension": {
						"type": "String"
					},
					"fileSyncExension": {
						"type": "String"
					},
					"descriptionOnprocess": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterSplitPipe')]",
				"[concat(variables('factoryId'), '/datasets/CC_TableDynamic')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterNotSplit')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/pipelines/CC_MoveFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_ReviewUpdatePayment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value in Clound Storage",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL1, VAL3, VAL4, NULLIF(VAL7,'''') AS VAL7 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('lovType'),''' AND c.LOV_NAME = ''',variables('lovName'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Clear Data Temp Table Detail",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE_DETAIL \n    WHERE FILE_ID IN(SELECT FILE_ID \n                        FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n                        WHERE STATUS = ''S'' \n                        AND FILE_TYPE = ''',variables('FILE_TYPE'),''')')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Clear Data Temp Table",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Clear Data Temp Table Detail",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('DELETE FROM ',variables('SCHEMA'),'.CC_TEMP_FILE \n            WHERE STATUS = ''S'' \n            AND FILE_TYPE = ''',variables('FILE_TYPE'),'''')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value in Clound Storage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),or(or(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,'')))),empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,'')))))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set inputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "inputPath",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val1",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set inputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val4",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixInputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set fileTypeInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixInputFile",
										"value": {
											"value": "@activity('Get Config Value in Clound Storage').output.firstRow.val3",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set moveInputPath",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixInputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "moveInputPath",
										"value": {
											"value": "@if(empty(activity('Get Config Value in Clound Storage').output.firstRow.val7),'',activity('Get Config Value in Clound Storage').output.firstRow.val7)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute All Process",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set moveInputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_ReviewFindFileSyncInDir",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"inputPath": {
												"value": "@variables('inputPath')",
												"type": "Expression"
											},
											"prefixInputFile": {
												"value": "@variables('prefixInputFile')",
												"type": "Expression"
											},
											"fileTypeInputFile": {
												"value": "@variables('fileTypeInputFile')",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"FILE_TYPE": {
												"value": "@variables('FILE_TYPE')",
												"type": "Expression"
											},
											"LOV_TYPE_REVIEW": {
												"value": "@variables('REVIEW_TYPE')",
												"type": "Expression"
											},
											"moveInputPath": {
												"value": "@variables('moveInputPath')",
												"type": "Expression"
											},
											"FILE_UPDATE_TYPE": {
												"value": "@variables('FILE_UPDATE_TYPE')",
												"type": "Expression"
											},
											"processDatName": {
												"value": "@variables('processDatName')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_REVIEW \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tREVIEW_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('REVIEW_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value in Clound Storage').output),'firstRow')),concat('Config LOV_TYPE : ',variables('lovType'),' ,LOV_NAME : ',variables('lovName'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),',Input path(val1)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,''))),',Prefix Input file(val3)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,''))),',file type Input file(val4)',''))\n\t,','),substring(\n\tconcat(if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),',Input path(val1)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,''))),',Prefix Input file(val3)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,''))),',file type Input file(val4)',''))\n\t,1,sub(length(\n\tconcat(if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),',Input path(val1)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,''))),',Prefix Input file(val3)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,''))),',file type Input file(val4)',''))\n\t),1)),\n\tconcat(if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val1,''))),',Input path(val1)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val3,''))),',Prefix Input file(val3)',''),if(empty(trim(coalesce(activity('Get Config Value in Clound Storage').output.firstRow.val4,''))),',file type Input file(val4)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"inputPath": {
						"type": "String"
					},
					"prefixInputFile": {
						"type": "String"
					},
					"fileTypeInputFile": {
						"type": "String"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_UPDATE_PAYMENT"
					},
					"FILE_TYPE": {
						"type": "String",
						"defaultValue": "REQUEST_FILE_UPDATE_PAYMENT"
					},
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_UAT"
					},
					"TEMP_FILE_DETAIL_CREATED_BY": {
						"type": "String",
						"defaultValue": "CC_TEMP_FILE_DETAIL"
					},
					"moveInputPath": {
						"type": "String"
					},
					"configErrorMsg": {
						"type": "String"
					},
					"lovType": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"lovName": {
						"type": "String",
						"defaultValue": "sff_cc_review_cl_res"
					},
					"REVIEW_TYPE": {
						"type": "String",
						"defaultValue": "sff_cc_review_cl_res_data_fac"
					},
					"FILE_UPDATE_TYPE": {
						"type": "String",
						"defaultValue": "payment"
					},
					"processDatName": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewFindFileSyncInDir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_SendTestCcBilling')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Config Value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('SELECT VAL2,VAL5,VAL6 from ',variables('SCHEMA'),'.CC_CURRENT c WHERE c.LOV_TYPE= ''',variables('LOV_TYPE'),''' AND c.LOV_NAME = ''',variables('LOV_NAME'),''' AND c.ACTIVE_FLG =''Y''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Configval is nul or Some Config val is Null",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Config Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@or(not(contains(string(activity('Get Config value').output),'firstRow')),or(or(equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL2,'')),''),null,activity('Get Config value').output.firstRow.VAL2),null),equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL5,'')),''),null,activity('Get Config value').output.firstRow.VAL5),null)),equals(if(equals(trim(coalesce(activity('Get Config value').output.firstRow.VAL6,'')),''),null,activity('Get Config value').output.firstRow.VAL6),null)))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set outputPath",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "outputPath",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.VAL2",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set prefixOutputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set outputPath",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "prefixOutputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.VAL5",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set fileTypeOutputFile",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set prefixOutputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "fileTypeOutputFile",
										"value": {
											"value": "@activity('Get Config Value').output.firstRow.VAL6",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Execute CC_ReviewSendBilingNo",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set fileTypeOutputFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_DataFactorySendFileProcessCount",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SCHEMA": {
												"value": "@variables('SCHEMA')",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@variables('CREDIT_USER')",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@variables('DATA_TYPE')",
												"type": "Expression"
											},
											"outputPath": {
												"value": "@variables('outputPath')",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@variables('prefixOutputFile')",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@variables('fileTypeOutputFile')",
												"type": "Expression"
											},
											"ScriptCount": {
												"value": "@concat('SELECT COUNT(T.LINE) AS COUNT FROM (SELECT ''02|''+ CONCAT(ROW_ID ,''|'',CREATED ,''|'',CREATED_BY ,''|'',LAST_UPD,''|'',LAST_UPD_BY \n\t\t\t\t,''|'',ACCNT_NO ,''|'',ACCNT_CATEGORY ,''|'',ACCNT_SUB_CATEGORY ,''|'',BILL_NAME ,''|'',BILL_CYCLE \n\t\t\t\t,''|'',INVOICING_COMPANY ,''|'',PAYMENT_METHOD ,''|'',MASTER_ACCNT_ID ,''|'',STATUS_CD \n\t\t\t\t,''|'',BILLING_STATUS_CD ,''|'',REGISTER_DT ,''|'',ARPU ,''|'',CREDIT_GRADE ,''|'',DEBT_NEGO_FLG \n\t\t\t\t,''|'',PAYMENT_FLAG) as LINE FROM CREDIT.TEST_CC_BILLING tcb ) T;')",
												"type": "Expression"
											},
											"messageWhenCountZero": "Query Billing account no for send billing account no to sff data not found",
											"pipeLineProcessFileName": {
												"value": "@variables('pipeLineProcessFileName')",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "insert error when config val error",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase1",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('INSERT INTO ',variables('SCHEMA'),'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',variables('CREDIT_USER'),''',\n\t''',variables('DATA_TYPE'),''',\n\t''E'',''',\n\tif(not(contains(string(activity('Get Config Value').output),'firstRow')),concat('Config LOV_TYPE : ',variables('LOV_TYPE'),' ,LOV_NAME : ',variables('LOV_NAME'),' Data not found.'),concat('Config ',\n\tif(startswith(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t,','),substring(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t,1,sub(length(\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t),1)),\n\tconcat(if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL2,'')),''),null,activity('Get Config Value').output.firstRow.VAL2),null),',Output path(VAL2)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL5,'')),''),null,activity('Get Config Value').output.firstRow.VAL5),null),',Prefix Output path(VAL5)',''),if(equals(if(equals(trim(coalesce(activity('Get Config Value').output.firstRow.VAL6,'')),''),null,activity('Get Config Value').output.firstRow.VAL6),null),',file type Output path(VAL6)',''))\n\t)\n\t,' Data not found.')),''');')",
													"type": "Expression"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"SCHEMA": {
						"type": "String",
						"defaultValue": "CREDIT_UAT"
					},
					"LOV_TYPE": {
						"type": "String",
						"defaultValue": "CC_MONITOR_MASTER"
					},
					"LOV_NAME": {
						"type": "String",
						"defaultValue": "cc_data_fac_review_send_billing_no"
					},
					"CREDIT_USER": {
						"type": "String",
						"defaultValue": "DATA_FAC_SEND_BA"
					},
					"DATA_TYPE": {
						"type": "String",
						"defaultValue": "REVIEW_SEND_BA"
					},
					"outputPath": {
						"type": "String"
					},
					"prefixOutputFile": {
						"type": "String"
					},
					"fileTypeOutputFile": {
						"type": "String"
					},
					"pipeLineProcessFileName": {
						"type": "String",
						"defaultValue": "CC_SendTestCcBillingProcessLoop"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/pipelines/CC_DataFactorySendFileProcessCount')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_SendTestCcBillingProcessFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "insert CC_DATA_FACTORY onprocess",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set ba script Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('INSERT INTO ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\t(CREATED,\n\tCREATED_BY,\n\tLAST_UPD,\n\tLAST_UPD_BY,\n\tDATA_TYPE,\n\tSTATUS,\n\tDESCRIPTION) OUTPUT INSERTED.DATA_ID VALUES (CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',CONVERT(DATETIME2(0),'''\n\t,convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\t''',pipeline().parameters.CREDIT_USER,''',\n\t''',pipeline().parameters.DATA_TYPE,''',\n\t''P'',''Process review send billing account count ',if(greaterOrEquals(sub(pipeline().parameters.count,int(variables('offset'))),float(pipeline().parameters.limitPerRound)),pipeline().parameters.limitPerRound,sub(pipeline().parameters.count,int(variables('offset')))),''');')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update End Process",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CC_CreateFileAndArchiveHaveDatName",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tSTATUS = ''E'',\n\tDESCRIPTION = ''',substring(concat('CC_ReviewDataFactorySendBilingNoProcessAccountNoList Exception :',replace(activity('CC_CreateFileAndArchiveHaveDatName').Error.Message,'''','\"')),0,if(less(length(replace(activity('CC_CreateFileAndArchiveHaveDatName').Error.Message,'''','\"')),499),length(replace(activity('CC_CreateFileAndArchiveHaveDatName').Error.Message,'''','\"')),499)),''' WHERE DATA_ID =',string(first(first(activity('insert CC_DATA_FACTORY onprocess').output.resultSets).rows).DATA_ID),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Update End Process Success",
						"description": "",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CC_CreateFileAndArchiveHaveDatName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('UPDATE ',pipeline().parameters.SCHEMA,'.CC_DATA_FACTORY \n\tSET LAST_UPD = CONVERT(DATETIME2(0),''',convertTimeZone(utcNow(),'UTC','SE Asia Standard Time'),'''),\n\tLAST_UPD_BY = ''',pipeline().parameters.CREDIT_USER,''',\n\tFILE_NAME = ',concat('''',variables('fileName'),''''),',\n\tFILE_NAME_SYNC = ',concat('''',variables('fileNameArchive'),''''),',\n\tFILE_PATH = ''',pipeline().parameters.outputPath,''',\n\tSTATUS = ''S'',\n\tDESCRIPTION = ''',concat('Create File : ',variables('fileName'),' success'),''' WHERE DATA_ID =',string(first(first(activity('insert CC_DATA_FACTORY onprocess').output.resultSets).rows).DATA_ID),';')",
										"type": "Expression"
									}
								}
							]
						}
					},
					{
						"name": "Set ba script Query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set offset",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "baScriptQuery",
							"value": {
								"value": "@concat('SELECT ''02|''+ CONCAT(ROW_ID ,''|'',CREATED ,''|'',CREATED_BY ,''|'',LAST_UPD,''|'',LAST_UPD_BY \n\t\t\t\t,''|'',ACCNT_NO ,''|'',ACCNT_CATEGORY ,''|'',ACCNT_SUB_CATEGORY ,''|'',BILL_NAME ,''|'',BILL_CYCLE \n\t\t\t\t,''|'',INVOICING_COMPANY ,''|'',PAYMENT_METHOD ,''|'',MASTER_ACCNT_ID ,''|'',STATUS_CD \n\t\t\t\t,''|'',BILLING_STATUS_CD ,''|'',REGISTER_DT ,''|'',ARPU ,''|'',CREDIT_GRADE ,''|'',DEBT_NEGO_FLG \n\t\t\t\t,''|'',PAYMENT_FLAG) as LINE FROM CREDIT.TEST_CC_BILLING tcb ORDER BY ROW_ID OFFSET ',variables('offset'),' ROWS FETCH NEXT ',string(int(pipeline().parameters.limitPerRound)),' ROWS ONLY')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set offset",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "offset",
							"value": {
								"value": "@string(mul(sub(pipeline().parameters.round,1),int(pipeline().parameters.limitPerRound)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CC_CreateFileAndArchiveHaveDatName",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set fileName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set fileNameArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set script Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "CC_CreateFileAndArchiveHaveDatName",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"fileName": {
									"value": "@variables('fileName')",
									"type": "Expression"
								},
								"fileNameArchive": {
									"value": "@variables('fileNameArchive')",
									"type": "Expression"
								},
								"scriptQuery": {
									"value": "@variables('scriptQuery')",
									"type": "Expression"
								},
								"outputPath": {
									"value": "@pipeline().parameters.outputPath",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set processTime",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "insert CC_DATA_FACTORY onprocess",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "processTime",
							"value": {
								"value": "@formatDateTime(convertTimeZone(addminutes(utcnow(),pipeline().parameters.round),'UTC','North Asia Standard Time'),'yyyyMMdd_HHmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileNameArchive",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileNameArchive",
							"value": {
								"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.sync')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set fileName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": {
								"value": "@concat(pipeline().parameters.prefixOutputFile,variables('processTime'),'.',pipeline().parameters.fileTypeOutputFile)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set script Query",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set processTime",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "scriptQuery",
							"value": {
								"value": "@concat('SELECT\n\t''01|'' + ''',variables('processTime'),''' AS LINE  \n    UNION ALL \n    SELECT T.LINE FROM (',variables('baScriptQuery'),') T\n    UNION ALL \n    SELECT ''09|'' + CONVERT(varchar(255),COUNT(T2.LINE)) AS LINE FROM (',variables('baScriptQuery'),') T2; ')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"count": {
						"type": "float"
					},
					"round": {
						"type": "int"
					},
					"limitPerRound": {
						"type": "string"
					}
				},
				"variables": {
					"offset": {
						"type": "String"
					},
					"scriptQuery": {
						"type": "String"
					},
					"baScriptQuery": {
						"type": "String"
					},
					"processTime": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/pipelines/CC_CreateFileAndArchiveHaveDatName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_SendTestCcBillingProcessLoop')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.listRound",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "CC_ReviewDataFactorySendBilingNoProcessAccountNoList",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "CC_SendTestCcBillingProcessFile",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"outputPath": {
												"value": "@pipeline().parameters.outputPath",
												"type": "Expression"
											},
											"prefixOutputFile": {
												"value": "@pipeline().parameters.prefixOutputFile",
												"type": "Expression"
											},
											"fileTypeOutputFile": {
												"value": "@pipeline().parameters.fileTypeOutputFile",
												"type": "Expression"
											},
											"SCHEMA": {
												"value": "@pipeline().parameters.SCHEMA",
												"type": "Expression"
											},
											"CREDIT_USER": {
												"value": "@pipeline().parameters.CREDIT_USER",
												"type": "Expression"
											},
											"DATA_TYPE": {
												"value": "@pipeline().parameters.DATA_TYPE",
												"type": "Expression"
											},
											"count": {
												"value": "@pipeline().parameters.count",
												"type": "Expression"
											},
											"round": {
												"value": "@item()",
												"type": "Expression"
											},
											"limitPerRound": {
												"value": "@pipeline().parameters.limitPerRound",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"outputPath": {
						"type": "string"
					},
					"prefixOutputFile": {
						"type": "string"
					},
					"fileTypeOutputFile": {
						"type": "string"
					},
					"SCHEMA": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"count": {
						"type": "float"
					},
					"limitPerRound": {
						"type": "string"
					},
					"listRound": {
						"type": "array"
					}
				},
				"variables": {
					"offset": {
						"type": "String"
					},
					"scriptQuery": {
						"type": "String"
					},
					"baScriptQuery": {
						"type": "String"
					},
					"processTime": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"fileNameArchive": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_SendTestCcBillingProcessFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_TEMPLATEMOVE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Write File_copy1_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "CREATED_BY",
										"value": {
											"value": "@pipeline().parameters.CREDIT_USER",
											"type": "Expression"
										}
									},
									{
										"name": "CREATED",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									},
									{
										"name": "LAST_UPD_BY",
										"value": {
											"value": "@pipeline().parameters.CREDIT_USER",
											"type": "Expression"
										}
									},
									{
										"name": "LAST_UPD",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"sqlWriterStoredProcedureName": "[[CREDIT_DEV].[insertOrUpdateBillingInfo]",
								"sqlWriterTableType": "CREDIT_DEV.CC_BILLING_INFO",
								"storedProcedureTableTypeParameterName": "CC_BILLING_INFO",
								"storedProcedureParameters": {
									"accntId": {
										"type": "String"
									},
									"accntNo": {
										"type": "String"
									},
									"arpu": {
										"type": "Decimal"
									},
									"creditGrade": {
										"type": "Decimal"
									},
									"current_dt": {
										"type": "DateTime"
									},
									"user": {
										"type": "String"
									}
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "CCLocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
									"fileName": "TEST_TEMP.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "CREDIT_DEV",
									"Table": "CC_BILLING_INFO"
								}
							}
						]
					},
					{
						"name": "Write File_copy1_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"ordinal": 1
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"ordinal": 2
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"ordinal": 3
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "CCLocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
									"fileName": "CSR_ACCNT_ARPU_20220525_112235.dat"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CCLocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
									"fileName": "TEST_TEMP.csv"
								}
							}
						]
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Copy data1_copy2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(10,37)",
								"type": "Expression"
							},
							"batchCount": 20,
							"activities": [
								{
									"name": "Copy data1_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "FileServerWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true
									},
									"inputs": [
										{
											"referenceName": "CCLocalFileMasterSplitPipe",
											"type": "DatasetReference",
											"parameters": {
												"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
												"fileName": "CSR_ACCNT_ARPU_20220525_112235_01.dat"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CCLocalFileMasterSplitPipe",
											"type": "DatasetReference",
											"parameters": {
												"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
												"fileName": {
													"value": "@concat('CSR_ACCNT_ARPU_20220525_112235_',item(),'.dat')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Copy data1_copy1_copy1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "FileServerWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true
									},
									"inputs": [
										{
											"referenceName": "CCLocalFileMasterSplitPipe",
											"type": "DatasetReference",
											"parameters": {
												"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
												"fileName": "CSR_ACCNT_ARPU_20220525_112235_01.sync"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "CCLocalFileMasterSplitPipe",
											"type": "DatasetReference",
											"parameters": {
												"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_arpu",
												"fileName": {
													"value": "@concat('CSR_ACCNT_ARPU_20220525_112235_',item(),'.sync')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Copy data1_copy2",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM CREDIT_DATA_FAC.CC_DATA_FACTORY_NEGOTIATION_VALUE WHERE DATA_ID = 396 AND PROCESS_TYPE LIKE '02%';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"REF_ROW_ID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Warning",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage3",
										"type": "LinkedServiceReference"
									},
									"path": "credit-control/logs"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ROW_ID",
											"type": "String"
										},
										"sink": {
											"name": "REF_ROW_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CREATED",
											"type": "String"
										},
										"sink": {
											"name": "CREATED",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CREATED_BY",
											"type": "String"
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LAST_UPD",
											"type": "String"
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "LAST_UPD_BY",
											"type": "String"
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "REQ_ID",
											"type": "String"
										},
										"sink": {
											"name": "REQ_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ACCNT_ID",
											"type": "String"
										},
										"sink": {
											"name": "ACCNT_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BILLING_ACCNT_ID",
											"type": "String"
										},
										"sink": {
											"name": "BILLING_ACCNT_ID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NEGO_CREDIT_LIMIT",
											"type": "String"
										},
										"sink": {
											"name": "NEGO_CREDIT_LIMIT",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "AR_BALANCE",
											"type": "String"
										},
										"sink": {
											"name": "AR_BALANCE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "AVAILABLE_FOR_MONTHLY",
											"type": "String"
										},
										"sink": {
											"name": "AVAILABLE_FOR_MONTHLY",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "PRICE_MAIN_PRO",
											"type": "String"
										},
										"sink": {
											"name": "PRICE_MAIN_PRO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "MULTIPLIER",
											"type": "String"
										},
										"sink": {
											"name": "MULTIPLIER",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "BA_SCORE_RANGE",
											"type": "String"
										},
										"sink": {
											"name": "BA_SCORE_RANGE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CL_BEFORE_NEGO",
											"type": "String"
										},
										"sink": {
											"name": "CL_BEFORE_NEGO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "REASON_BEF_NEGO",
											"type": "String"
										},
										"sink": {
											"name": "REASON_BEF_NEGO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CUSTOMER_REQUEST_FLG",
											"type": "String"
										},
										"sink": {
											"name": "CUSTOMER_REQUEST_FLG",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CUS_REQ_BALANCE",
											"type": "String"
										},
										"sink": {
											"name": "CUS_REQ_BALANCE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "NEGO_STATUS",
											"type": "String"
										},
										"sink": {
											"name": "NEGO_STATUS",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "REASON_CODE",
											"type": "String"
										},
										"sink": {
											"name": "REASON_CODE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CHANNEL",
											"type": "String"
										},
										"sink": {
											"name": "CHANNEL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CL_BEFORE_NEGO_PERM",
											"type": "String"
										},
										"sink": {
											"name": "CL_BEFORE_NEGO_PERM",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "CL_BEFORE_NEGO_TEMP",
											"type": "String"
										},
										"sink": {
											"name": "CL_BEFORE_NEGO_TEMP",
											"type": "Decimal"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "CREDIT_DATA_FAC",
									"Table": "CC_NEGOTIATION_VALUE"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SCHEMA": {
						"type": "string",
						"defaultValue": "CREDIT_UAT"
					},
					"DATA_TYPE": {
						"type": "string"
					},
					"CREDIT_USER": {
						"type": "string",
						"defaultValue": "UPDATE_ARPU"
					},
					"inputPath": {
						"type": "string",
						"defaultValue": "C:\\export\\home\\oper\\sffinput\\sff_cc_credit_grade"
					},
					"moveInputPath": {
						"type": "string"
					},
					"fileDatName": {
						"type": "string",
						"defaultValue": "CCS_ACCNT_CGRADE_TEST.dat"
					},
					"dataId": {
						"type": "string"
					},
					"fileSyncName": {
						"type": "string"
					},
					"tableToUpsert": {
						"type": "string",
						"defaultValue": "CC_BILLING_INFO"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterSplitPipe')]",
				"[concat(variables('factoryId'), '/datasets/CC_TableDynamic')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_TestInsertOrUpdateFileDatafacScoreValue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"skipLineCount": 1
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"ROW_ID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "REF_ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "CREATED",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "BILLING_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "CL_LEVEL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "SCORE_RANGE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "CL_TYPE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 13
										},
										"sink": {
											"name": "CL_CHANGE_REASON",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 14
										},
										"sink": {
											"name": "OUTCOME_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 15
										},
										"sink": {
											"name": "OUTCOME_REASON",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 16
										},
										"sink": {
											"name": "CREDIT_LIMIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 17
										},
										"sink": {
											"name": "PERM_CREDIT_LIMIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 18
										},
										"sink": {
											"name": "TEMP_CREDIT_LIMIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 19
										},
										"sink": {
											"name": "PREV_CREDIT_LIMIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 20
										},
										"sink": {
											"name": "PREV_SCORE_RANGE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 21
										},
										"sink": {
											"name": "ACTUAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 22
										},
										"sink": {
											"name": "ACTUAL_PERM",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 23
										},
										"sink": {
											"name": "BILLING_CREDIT_LIMIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 24
										},
										"sink": {
											"name": "BILLING_THRESHOLD_SET_ID",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 10
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 25
										},
										"sink": {
											"name": "FBB_FLAG",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 26
										},
										"sink": {
											"name": "LAST_REVIEW_DAT",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 27
										},
										"sink": {
											"name": "MIN_REVIEW",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 28
										},
										"sink": {
											"name": "AVAILABLE_CREDIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 29
										},
										"sink": {
											"name": "PAYMENT_FLG",
											"type": "String",
											"physicalType": "char"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 30
										},
										"sink": {
											"name": "BA_REGISTER_DT",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": false,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCLocalFileMasterSplitPipe",
								"type": "DatasetReference",
								"parameters": {
									"filePath": "C:\\export\\home\\oper\\sffinput\\sff_cc_score_value",
									"fileName": "CC_SCORE_VALUE_20220621_171513_01.dat"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "CC_TableDynamic",
								"type": "DatasetReference",
								"parameters": {
									"Schema": "CREDIT_DATA_FAC",
									"Table": "CC_SCORE_VALUE"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CCLocalFileMasterSplitPipe')]",
				"[concat(variables('factoryId'), '/datasets/CC_TableDynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyBillingFileToAzureSQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyBillingActivity",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@activity('Lookup1').output.firstRow.val3",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREATED",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILL_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILL_NAME",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "INVOICING_COMPANY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "INVOICING_COMPANY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "REGISTER_DT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "REGISTER_DT",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "ARPU",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ARPU",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "CREDIT_GRADE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREDIT_GRADE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 5
										}
									},
									{
										"source": {
											"name": "DEBT_NEGO_FLG",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEBT_NEGO_FLG",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DemoBillingCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTestBillingTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "CopyBillingActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://www.google.com/search?q=success",
							"connectVia": {
								"referenceName": "SelfHostIntegration",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Web2",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "CopyBillingActivity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://www.google.com/search?q=failed",
							"connectVia": {
								"referenceName": "SelfHostIntegration",
								"type": "IntegrationRuntimeReference"
							},
							"method": "GET",
							"headers": {}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from CREDIT.CC_CURRENT c where c.LOV_TYPE= 'CC_MONITOR_MASTER' and c.LOV_NAME = 'sff_cc_review_cl_res' and c.ACTIVE_FLG ='Y';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlMaster",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DemoBillingCSV')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTestBillingTable')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostIntegration')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlMaster')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ImportReviewBilling')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportFileToCCBilling",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 1000,
								"writeBatchTimeout": "00:30:00",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"ROW_ID"
									]
								},
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ROW_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CREATED",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREATED",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREATED_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "LAST_UPD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_UPD",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "LAST_UPD_BY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ACCNT_SUB_CATEGORY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILL_NAME",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILL_NAME",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILL_CYCLE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "INVOICING_COMPANY",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "INVOICING_COMPANY",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "PAYMENT_METHOD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "MASTER_ACCNT_ID",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "BILLING_STATUS_CD",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "REGISTER_DT",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "REGISTER_DT",
											"type": "DateTime",
											"physicalType": "datetime2"
										}
									},
									{
										"source": {
											"name": "ARPU",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "ARPU",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 22
										}
									},
									{
										"source": {
											"name": "CREDIT_GRADE",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "CREDIT_GRADE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 5
										}
									},
									{
										"source": {
											"name": "DEBT_NEGO_FLG",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DEBT_NEGO_FLG",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CCBillingFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "TestCCBilling",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CCBillingFile')]",
				"[concat(variables('factoryId'), '/datasets/TestCCBilling')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResReviewCreditLimit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupSyncFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.sync",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ResReviewSyncFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyDataToTable",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupSyncFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "@{activity('LookupSyncFile').output.firstRow.Prop_0}",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"validateDataConsistency": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "BA_NO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "FLAG",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "DATE",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ResReviewCreditLimitData",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CCResReviewTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "DeleteDataFile",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "CopyDataToTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ResReviewCreditLimitData",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "DeleteSyncFile",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "DeleteDataFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ResReviewSyncFile",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-19T03:16:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ResReviewSyncFile')]",
				"[concat(variables('factoryId'), '/datasets/ResReviewCreditLimitData')]",
				"[concat(variables('factoryId'), '/datasets/CCResReviewTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResReviewCreditLimitCheckSize')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupSyncFile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.sync",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ResReviewSyncFile",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "GetFileMetadata",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "LookupSyncFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ResReviewCreditLimitDataMatadata",
								"type": "DatasetReference",
								"parameters": {
									"filleName": {
										"value": "@{activity('LookupSyncFile').output.firstRow.Prop_0}",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetFileMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('GetFileMetadata').output.size,0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CopyDataToTable",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFileName": {
													"value": "@{activity('LookupSyncFile').output.firstRow.Prop_0}",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"validateDataConsistency": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"type": "String",
														"ordinal": 1
													},
													"sink": {
														"name": "BA_NO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 2
													},
													"sink": {
														"name": "FLAG",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 3
													},
													"sink": {
														"name": "DATE",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ResReviewCreditLimitData",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "CCResReviewTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "DeleteDataFile",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "CopyDataToTable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ResReviewCreditLimitData",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "DeleteSyncFile",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "DeleteDataFile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ResReviewSyncFile",
											"type": "DatasetReference",
											"parameters": {}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2022-04-19T03:16:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ResReviewSyncFile')]",
				"[concat(variables('factoryId'), '/datasets/ResReviewCreditLimitDataMatadata')]",
				"[concat(variables('factoryId'), '/datasets/ResReviewCreditLimitData')]",
				"[concat(variables('factoryId'), '/datasets/CCResReviewTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ValidateDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DemoValidator2",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"structure",
								"columnCount",
								"itemName"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Metadata1').output.structure,json('[\n        {\n            \"name\": \"Prop_0\",\n            \"type\": \"String\"\n        },\n        {\n            \"name\": \"Prop_1\",\n            \"type\": \"String\"\n        },\n        {\n            \"name\": \"Prop_2\",\n            \"type\": \"String\"\n        }\n    ]'))",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "MoveErrorFile",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": "demo",
												"wildcardFileName": {
													"value": "@activity('Get Metadata1').output.itemName",
													"type": "Expression"
												},
												"deleteFilesAfterCompletion": false
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySource",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TargetBinary",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@activity('Get Metadata1').output.itemName",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "CopyDataToTable",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "CURRENT_DATE",
													"value": {
														"value": "@utcnow()",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"wildcardFolderPath": "demo",
												"wildcardFileName": {
													"value": "@activity('Get Metadata1').output.itemName",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBatchSize": 10,
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": false,
												"keys": [
													"ACCNT_NO"
												],
												"interimSchemaName": "CREDIT"
											},
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"validateDataConsistency": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "AzureBlobStorage3",
													"type": "LinkedServiceReference"
												},
												"path": "credit-control/logs"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"type": "String",
														"ordinal": 1
													},
													"sink": {
														"name": "ACCNT_NO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"type": "String",
														"ordinal": 2
													},
													"sink": {
														"name": "PAYMENT_FLAG",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CURRENT_DATE",
														"type": "String"
													},
													"sink": {
														"name": "CREATED",
														"type": "DateTime",
														"physicalType": "datetime2"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DemoValidator2",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "BillingTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DemoValidator2')]",
				"[concat(variables('factoryId'), '/datasets/BinarySource')]",
				"[concat(variables('factoryId'), '/datasets/TargetBinary')]",
				"[concat(variables('factoryId'), '/datasets/BillingTable')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlMaster')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ROW_ID",
						"type": "varchar"
					},
					{
						"name": "PAR_ROW_ID",
						"type": "varchar"
					},
					{
						"name": "LOV_TYPE",
						"type": "varchar"
					},
					{
						"name": "LOV_NAME",
						"type": "varchar"
					},
					{
						"name": "DISPLAY_VAL",
						"type": "varchar"
					},
					{
						"name": "LOV_VAL1",
						"type": "varchar"
					},
					{
						"name": "LOV_VAL2",
						"type": "varchar"
					},
					{
						"name": "LOV_VAL3",
						"type": "varchar"
					},
					{
						"name": "LOV_VAL4",
						"type": "varchar"
					},
					{
						"name": "LOV_VAL5",
						"type": "varchar"
					},
					{
						"name": "LOV_VAL6",
						"type": "varchar"
					},
					{
						"name": "LOV_VAL7",
						"type": "varchar"
					},
					{
						"name": "LOV_VAL8",
						"type": "varchar"
					},
					{
						"name": "LOV_VAL9",
						"type": "varchar"
					},
					{
						"name": "LOV_VAL10",
						"type": "varchar"
					},
					{
						"name": "TEXT_DESC",
						"type": "varchar"
					},
					{
						"name": "ORDER_BY",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "GROUP_TYPE",
						"type": "varchar"
					},
					{
						"name": "ACTIVE_FLG",
						"type": "varchar"
					},
					{
						"name": "CREATED",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "CREATED_BY",
						"type": "varchar"
					},
					{
						"name": "LAST_UPD",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "LAST_UPD_BY",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CREDIT",
					"table": "CC_CFG_LOV"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableCurrent')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ROW_ID",
						"type": "varchar"
					},
					{
						"name": "CREATED",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CREATED_BY",
						"type": "varchar"
					},
					{
						"name": "LAST_UPD",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LAST_UPD_BY",
						"type": "varchar"
					},
					{
						"name": "PAR_ROW_ID",
						"type": "varchar"
					},
					{
						"name": "REQUEST_DETAIL_ID",
						"type": "varchar"
					},
					{
						"name": "LOV_CAT",
						"type": "varchar"
					},
					{
						"name": "LOV_SUBCAT",
						"type": "varchar"
					},
					{
						"name": "LOV_CUST_GROUP",
						"type": "varchar"
					},
					{
						"name": "MODULE_NAME",
						"type": "varchar"
					},
					{
						"name": "LOV_TYPE",
						"type": "varchar"
					},
					{
						"name": "LOV_NAME",
						"type": "nvarchar"
					},
					{
						"name": "VAL1",
						"type": "nvarchar"
					},
					{
						"name": "VAL2",
						"type": "nvarchar"
					},
					{
						"name": "VAL3",
						"type": "nvarchar"
					},
					{
						"name": "VAL4",
						"type": "nvarchar"
					},
					{
						"name": "VAL5",
						"type": "nvarchar"
					},
					{
						"name": "VAL6",
						"type": "nvarchar"
					},
					{
						"name": "VAL7",
						"type": "nvarchar"
					},
					{
						"name": "VAL8",
						"type": "nvarchar"
					},
					{
						"name": "VAL9",
						"type": "nvarchar"
					},
					{
						"name": "VAL10",
						"type": "nvarchar"
					},
					{
						"name": "VAL11",
						"type": "nvarchar"
					},
					{
						"name": "VAL12",
						"type": "nvarchar"
					},
					{
						"name": "VAL13",
						"type": "nvarchar"
					},
					{
						"name": "VAL14",
						"type": "nvarchar"
					},
					{
						"name": "VAL15",
						"type": "nvarchar"
					},
					{
						"name": "VAL16",
						"type": "nvarchar"
					},
					{
						"name": "VAL17",
						"type": "nvarchar"
					},
					{
						"name": "VAL18",
						"type": "nvarchar"
					},
					{
						"name": "VAL19",
						"type": "nvarchar"
					},
					{
						"name": "VAL20",
						"type": "nvarchar"
					},
					{
						"name": "VAL21",
						"type": "nvarchar"
					},
					{
						"name": "VAL22",
						"type": "nvarchar"
					},
					{
						"name": "VAL23",
						"type": "nvarchar"
					},
					{
						"name": "VAL24",
						"type": "nvarchar"
					},
					{
						"name": "VAL25",
						"type": "nvarchar"
					},
					{
						"name": "VAL26",
						"type": "nvarchar"
					},
					{
						"name": "VAL27",
						"type": "nvarchar"
					},
					{
						"name": "VAL28",
						"type": "nvarchar"
					},
					{
						"name": "VAL29",
						"type": "nvarchar"
					},
					{
						"name": "VAL30",
						"type": "nvarchar"
					},
					{
						"name": "TEXT_DESC",
						"type": "nvarchar"
					},
					{
						"name": "ORDER_BY",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "EFFECTIVE_UNTIL_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ACTIVE_FLG",
						"type": "char"
					},
					{
						"name": "IMPORT_FLG",
						"type": "char"
					}
				],
				"typeProperties": {
					"schema": "CREDIT_DATA_FAC",
					"table": "CC_CURRENT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableFileTempDetail1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FILE_DTL_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CREATED",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CREATED_BY",
						"type": "varchar"
					},
					{
						"name": "LAST_UPD",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LAST_UPD_BY",
						"type": "varchar"
					},
					{
						"name": "FILE_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FILE_LINE",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "char"
					},
					{
						"name": "REMARK",
						"type": "varchar"
					},
					{
						"name": "ERROR_MSG",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CREDIT_DEV",
					"table": "CC_TEMP_FILE_DETAIL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTestBillingTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlBillingDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ROW_ID",
						"type": "varchar"
					},
					{
						"name": "CREATED",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "CREATED_BY",
						"type": "varchar"
					},
					{
						"name": "LAST_UPD",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "LAST_UPD_BY",
						"type": "varchar"
					},
					{
						"name": "ACCNT_NO",
						"type": "varchar"
					},
					{
						"name": "ACCNT_CATEGORY",
						"type": "varchar"
					},
					{
						"name": "ACCNT_SUB_CATEGORY",
						"type": "varchar"
					},
					{
						"name": "BILL_NAME",
						"type": "varchar"
					},
					{
						"name": "BILL_CYCLE",
						"type": "varchar"
					},
					{
						"name": "INVOICING_COMPANY",
						"type": "varchar"
					},
					{
						"name": "PAYMENT_METHOD",
						"type": "varchar"
					},
					{
						"name": "MASTER_ACCNT_ID",
						"type": "varchar"
					},
					{
						"name": "STATUS_CD",
						"type": "varchar"
					},
					{
						"name": "BILLING_STATUS_CD",
						"type": "varchar"
					},
					{
						"name": "REGISTER_DT",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "ARPU",
						"type": "decimal",
						"precision": 22,
						"scale": 7
					},
					{
						"name": "CREDIT_GRADE",
						"type": "decimal",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "DEBT_NEGO_FLG",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CREDIT",
					"table": "TEST_CC_BILLING"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlBillingDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BillingTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "GableEsavingDevAutoIR",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ROW_ID",
						"type": "varchar"
					},
					{
						"name": "CREATED",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "CREATED_BY",
						"type": "varchar"
					},
					{
						"name": "LAST_UPD",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "LAST_UPD_BY",
						"type": "varchar"
					},
					{
						"name": "ACCNT_NO",
						"type": "varchar"
					},
					{
						"name": "ACCNT_CATEGORY",
						"type": "varchar"
					},
					{
						"name": "ACCNT_SUB_CATEGORY",
						"type": "varchar"
					},
					{
						"name": "BILL_NAME",
						"type": "varchar"
					},
					{
						"name": "BILL_CYCLE",
						"type": "varchar"
					},
					{
						"name": "INVOICING_COMPANY",
						"type": "varchar"
					},
					{
						"name": "PAYMENT_METHOD",
						"type": "varchar"
					},
					{
						"name": "MASTER_ACCNT_ID",
						"type": "varchar"
					},
					{
						"name": "STATUS_CD",
						"type": "varchar"
					},
					{
						"name": "BILLING_STATUS_CD",
						"type": "varchar"
					},
					{
						"name": "REGISTER_DT",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "ARPU",
						"type": "decimal",
						"precision": 22,
						"scale": 7
					},
					{
						"name": "CREDIT_GRADE",
						"type": "decimal",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "DEBT_NEGO_FLG",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CREDIT",
					"table": "TEST_CC_BILLING2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/GableEsavingDevAutoIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySource')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RES_Review_Credit_Limit_20220225_141502.dat",
						"folderPath": "demo",
						"container": "credit-control"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CCBillingFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LocalFileServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "Large_CC_BILLING_202204221005.csv",
						"folderPath": "review"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ROW_ID",
						"type": "String"
					},
					{
						"name": "CREATED",
						"type": "String"
					},
					{
						"name": "CREATED_BY",
						"type": "String"
					},
					{
						"name": "LAST_UPD",
						"type": "String"
					},
					{
						"name": "LAST_UPD_BY",
						"type": "String"
					},
					{
						"name": "ACCNT_NO",
						"type": "String"
					},
					{
						"name": "ACCNT_CATEGORY",
						"type": "String"
					},
					{
						"name": "ACCNT_SUB_CATEGORY",
						"type": "String"
					},
					{
						"name": "BILL_NAME",
						"type": "String"
					},
					{
						"name": "BILL_CYCLE",
						"type": "String"
					},
					{
						"name": "INVOICING_COMPANY",
						"type": "String"
					},
					{
						"name": "PAYMENT_METHOD",
						"type": "String"
					},
					{
						"name": "MASTER_ACCNT_ID",
						"type": "String"
					},
					{
						"name": "STATUS_CD",
						"type": "String"
					},
					{
						"name": "BILLING_STATUS_CD",
						"type": "String"
					},
					{
						"name": "REGISTER_DT",
						"type": "String"
					},
					{
						"name": "ARPU",
						"type": "String"
					},
					{
						"name": "CREDIT_GRADE",
						"type": "String"
					},
					{
						"name": "DEBT_NEGO_FLG",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LocalFileServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CCLocalFileMasterNotSplit')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LocalFileServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "''",
					"encodingName": "TIS-620",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LocalFileServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CCLocalFileMasterPath')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LocalFileServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string",
						"defaultValue": "*"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LocalFileServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CCLocalFileMasterSplitPipe')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LocalFileServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LocalFileServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CCLocalFileToWrite')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LocalFileServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						}
					},
					"columnDelimiter": "|",
					"escapeChar": "",
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LocalFileServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CCResReviewTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "BA_NO",
						"type": "varchar"
					},
					{
						"name": "FLAG",
						"type": "varchar"
					},
					{
						"name": "DATE",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "cc_res_review"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CCTableFileTempDetail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FILE_DTL_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CREATED",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CREATED_BY",
						"type": "varchar"
					},
					{
						"name": "LAST_UPD",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LAST_UPD_BY",
						"type": "varchar"
					},
					{
						"name": "FILE_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FILE_LINE",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "char"
					},
					{
						"name": "REMARK",
						"type": "varchar"
					},
					{
						"name": "ERROR_MSG",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CREDIT_DEV",
					"table": "CC_TEMP_FILE_DETAIL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CCTableFileTempDetailSchemaUAT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "FILE_DTL_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CREATED",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CREATED_BY",
						"type": "varchar"
					},
					{
						"name": "LAST_UPD",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LAST_UPD_BY",
						"type": "varchar"
					},
					{
						"name": "FILE_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FILE_LINE",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "char"
					},
					{
						"name": "REMARK",
						"type": "varchar"
					},
					{
						"name": "ERROR_MSG",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CREDIT_UAT",
					"table": "CC_TEMP_FILE_DETAIL"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DatasetChangeCatSubcatHist')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CHANGE_HIST_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CREATED",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CREATED_BY",
						"type": "varchar"
					},
					{
						"name": "LAST_UPD",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LAST_UPD_BY",
						"type": "varchar"
					},
					{
						"name": "CHANGE_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BILLING_ACCNT_ID",
						"type": "varchar"
					},
					{
						"name": "BILLING_ACCNT_NO",
						"type": "varchar"
					},
					{
						"name": "NEW_ACCNT_SUB_CAT",
						"type": "varchar"
					},
					{
						"name": "OLD_ACCNT_SUB_CAT",
						"type": "varchar"
					},
					{
						"name": "PROFILE_CHANGE_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PROFILE_CHANGE_ROWID",
						"type": "varchar"
					},
					{
						"name": "MAIL_PERIOD",
						"type": "decimal",
						"precision": 2,
						"scale": 0
					},
					{
						"name": "SET_CL_STATUS",
						"type": "varchar"
					},
					{
						"name": "PREV_SET_CL_STATUS",
						"type": "varchar"
					},
					{
						"name": "AVAILABLE_CL",
						"type": "decimal",
						"precision": 22,
						"scale": 2
					},
					{
						"name": "CHANGE_REASON",
						"type": "varchar"
					},
					{
						"name": "REF_REQ_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "STATUS",
						"type": "char"
					},
					{
						"name": "REMARK",
						"type": "varchar"
					},
					{
						"name": "ERROR_MSG",
						"type": "varchar"
					},
					{
						"name": "REGISTER_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "NEW_ACCNT_CAT",
						"type": "varchar"
					},
					{
						"name": "ACCNT_ID",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CREDIT_DEV",
					"table": "CC_CHANGE_CAT_SUBCAT_HIST"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DatasetChangeCatSubcatHistUAT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CHANGE_HIST_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CREATED",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CREATED_BY",
						"type": "varchar"
					},
					{
						"name": "LAST_UPD",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LAST_UPD_BY",
						"type": "varchar"
					},
					{
						"name": "CHANGE_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ACCNT_ID",
						"type": "varchar"
					},
					{
						"name": "BILLING_ACCNT_ID",
						"type": "varchar"
					},
					{
						"name": "BILLING_ACCNT_NO",
						"type": "varchar"
					},
					{
						"name": "REGISTER_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "NEW_ACCNT_CAT",
						"type": "varchar"
					},
					{
						"name": "NEW_ACCNT_SUB_CAT",
						"type": "varchar"
					},
					{
						"name": "OLD_ACCNT_SUB_CAT",
						"type": "varchar"
					},
					{
						"name": "PROFILE_CHANGE_DATE",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "PROFILE_CHANGE_ROWID",
						"type": "varchar"
					},
					{
						"name": "MAIL_PERIOD",
						"type": "decimal",
						"precision": 2,
						"scale": 0
					},
					{
						"name": "SET_CL_STATUS",
						"type": "varchar"
					},
					{
						"name": "PREV_SET_CL_STATUS",
						"type": "varchar"
					},
					{
						"name": "AVAILABLE_CL",
						"type": "decimal",
						"precision": 22,
						"scale": 2
					},
					{
						"name": "CHANGE_REASON",
						"type": "varchar"
					},
					{
						"name": "REF_REQ_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "STATUS",
						"type": "char"
					},
					{
						"name": "REMARK",
						"type": "varchar"
					},
					{
						"name": "ERROR_MSG",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CREDIT_UAT",
					"table": "CC_CHANGE_CAT_SUBCAT_HIST"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_DatasetTableBillingReviewSchemaDataFac')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DATA_HIST_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CREATED",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CREATED_BY",
						"type": "varchar"
					},
					{
						"name": "LAST_UPD",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LAST_UPD_BY",
						"type": "varchar"
					},
					{
						"name": "DATA_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "STATUS",
						"type": "char"
					},
					{
						"name": "DESCRIPTION",
						"type": "varchar"
					},
					{
						"name": "ERROR_MSG",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CREDIT_DATA_FAC",
					"table": "CC_BILLING_REVIEW"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_LocalFileJson')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LocalFileServer",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filePath": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().filePath",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LocalFileServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_TableDynamic')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema": {
						"type": "string"
					},
					"Table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ROW_ID",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "REF_ROW_ID",
						"type": "varchar"
					},
					{
						"name": "CREATED",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CREATED_BY",
						"type": "varchar"
					},
					{
						"name": "LAST_UPD",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "LAST_UPD_BY",
						"type": "varchar"
					},
					{
						"name": "ACCNT_ID",
						"type": "varchar"
					},
					{
						"name": "BILLING_ACCNT_ID",
						"type": "varchar"
					},
					{
						"name": "ACCNT_NO",
						"type": "varchar"
					},
					{
						"name": "CL_LEVEL",
						"type": "varchar"
					},
					{
						"name": "SCORE_RANGE",
						"type": "varchar"
					},
					{
						"name": "CL_TYPE",
						"type": "varchar"
					},
					{
						"name": "CL_CHANGE_REASON",
						"type": "varchar"
					},
					{
						"name": "OUTCOME_CD",
						"type": "varchar"
					},
					{
						"name": "OUTCOME_REASON",
						"type": "varchar"
					},
					{
						"name": "CREDIT_LIMIT",
						"type": "decimal",
						"precision": 22,
						"scale": 7
					},
					{
						"name": "PERM_CREDIT_LIMIT",
						"type": "decimal",
						"precision": 22,
						"scale": 7
					},
					{
						"name": "TEMP_CREDIT_LIMIT",
						"type": "decimal",
						"precision": 22,
						"scale": 7
					},
					{
						"name": "PREV_CREDIT_LIMIT",
						"type": "decimal",
						"precision": 22,
						"scale": 7
					},
					{
						"name": "PREV_SCORE_RANGE",
						"type": "varchar"
					},
					{
						"name": "ACTUAL",
						"type": "decimal",
						"precision": 22,
						"scale": 7
					},
					{
						"name": "ACTUAL_PERM",
						"type": "decimal",
						"precision": 22,
						"scale": 7
					},
					{
						"name": "BILLING_CREDIT_LIMIT",
						"type": "decimal",
						"precision": 22,
						"scale": 7
					},
					{
						"name": "BILLING_THRESHOLD_SET_ID",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "FBB_FLAG",
						"type": "char"
					},
					{
						"name": "LAST_REVIEW_DAT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "MIN_REVIEW",
						"type": "decimal",
						"precision": 22,
						"scale": 7
					},
					{
						"name": "AVAILABLE_CREDIT",
						"type": "decimal",
						"precision": 22,
						"scale": 7
					},
					{
						"name": "PAYMENT_FLG",
						"type": "char"
					},
					{
						"name": "BA_REGISTER_DT",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "test.csv",
						"folderPath": "demo-out",
						"container": "credit-control"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RES_Review_Credit_Limit_20220225_141502.dat",
						"folderPath": "demo",
						"container": "credit-control"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoBillingCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "DemoBillingFileServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "CC_BILLING_202204221005.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ROW_ID",
						"type": "String"
					},
					{
						"name": "CREATED",
						"type": "String"
					},
					{
						"name": "CREATED_BY",
						"type": "String"
					},
					{
						"name": "LAST_UPD",
						"type": "String"
					},
					{
						"name": "LAST_UPD_BY",
						"type": "String"
					},
					{
						"name": "ACCNT_NO",
						"type": "String"
					},
					{
						"name": "ACCNT_CATEGORY",
						"type": "String"
					},
					{
						"name": "ACCNT_SUB_CATEGORY",
						"type": "String"
					},
					{
						"name": "BILL_NAME",
						"type": "String"
					},
					{
						"name": "BILL_CYCLE",
						"type": "String"
					},
					{
						"name": "INVOICING_COMPANY",
						"type": "String"
					},
					{
						"name": "PAYMENT_METHOD",
						"type": "String"
					},
					{
						"name": "MASTER_ACCNT_ID",
						"type": "String"
					},
					{
						"name": "STATUS_CD",
						"type": "String"
					},
					{
						"name": "BILLING_STATUS_CD",
						"type": "String"
					},
					{
						"name": "REGISTER_DT",
						"type": "String"
					},
					{
						"name": "ARPU",
						"type": "String"
					},
					{
						"name": "CREDIT_GRADE",
						"type": "String"
					},
					{
						"name": "DEBT_NEGO_FLG",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/DemoBillingFileServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoValidationFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RES_Review_Credit_Limit_20220225_141502.dat",
						"folderPath": "demo",
						"container": "credit-control"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoValidator2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage3",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RES_Review_Credit_Limit_20220225_141502.dat",
						"folderPath": "demo",
						"container": "credit-control"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResReviewCreditLimitData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "credit-control"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResReviewCreditLimitDataMatadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filleName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filleName",
							"type": "Expression"
						},
						"container": "credit-control"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ResReviewSyncFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "RES_Review_Credit_Limit_20220225_141502.sync",
						"container": "credit-control"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TargetBinary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage3",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string",
						"defaultValue": "test.csv"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "demo-out",
						"container": "credit-control"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TestCCBilling')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ROW_ID",
						"type": "varchar"
					},
					{
						"name": "CREATED",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "CREATED_BY",
						"type": "varchar"
					},
					{
						"name": "LAST_UPD",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "LAST_UPD_BY",
						"type": "varchar"
					},
					{
						"name": "ACCNT_NO",
						"type": "varchar"
					},
					{
						"name": "ACCNT_CATEGORY",
						"type": "varchar"
					},
					{
						"name": "ACCNT_SUB_CATEGORY",
						"type": "varchar"
					},
					{
						"name": "BILL_NAME",
						"type": "varchar"
					},
					{
						"name": "BILL_CYCLE",
						"type": "varchar"
					},
					{
						"name": "INVOICING_COMPANY",
						"type": "varchar"
					},
					{
						"name": "PAYMENT_METHOD",
						"type": "varchar"
					},
					{
						"name": "MASTER_ACCNT_ID",
						"type": "varchar"
					},
					{
						"name": "STATUS_CD",
						"type": "varchar"
					},
					{
						"name": "BILLING_STATUS_CD",
						"type": "varchar"
					},
					{
						"name": "REGISTER_DT",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "ARPU",
						"type": "decimal",
						"precision": 22,
						"scale": 7
					},
					{
						"name": "CREDIT_GRADE",
						"type": "decimal",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "DEBT_NEGO_FLG",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "CREDIT",
					"table": "TEST_CC_BILLING"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage2_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SelfHostIntegration",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostIntegration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage4')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage4_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureKeyVault1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('AzureKeyVault1_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlBillingDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlBillingDatabase_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "azuresqlpassword"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostIntegration",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostIntegration')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "azuresqlpassword"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoBillingFileServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('DemoBillingFileServer_properties_typeProperties_host')]",
					"userId": "[parameters('DemoBillingFileServer_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "AzureKeyVault1",
							"type": "LinkedServiceReference"
						},
						"secretName": "fileserverpassword"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostIntegration",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostIntegration')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureKeyVault1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GableEsavingDevAutoIR')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('GableEsavingDevAutoIR_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LocalFileServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LocalFileServer_properties_typeProperties_host')]",
					"userId": "[parameters('LocalFileServer_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LocalFileServer_password')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostIntegration",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostIntegration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CC_ReviewUpdatePayment",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "CC_ReviewUpdateArpu",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-05-20T08:39:00",
						"timeZone": "SE Asia Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								11
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewUpdatePayment')]",
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewUpdateArpu')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CC_triggerTest')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CC_ReviewTempFileResponseFile",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-06-02T02:07:00",
						"timeZone": "SE Asia Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								10
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CC_ReviewTempFileResponseFile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostIntegration')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		}
	]
}